
lab1_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000014e  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001e2  2**0
                  ALLOC
  3 .stab         000005dc  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c0a  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000013ca  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013dc  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  ac:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <debounce_switch>:
// function can be implemented at the same time.  Expects active low pushbutton on 
// Port D bit zero.  Debounce time is determined by external loop delay times 12. 
//*******************************************************************************
int8_t debounce_switch() {
  static uint16_t state = 0; //holds present state
  state = (state << 1) | (! bit_is_clear(PIND, 0)) | 0xE000;
  b4:	40 b3       	in	r20, 0x10	; 16
  b6:	20 91 00 01 	lds	r18, 0x0100
  ba:	30 91 01 01 	lds	r19, 0x0101
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
  c2:	30 6e       	ori	r19, 0xE0	; 224
  c4:	84 2f       	mov	r24, r20
  c6:	81 70       	andi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	28 2b       	or	r18, r24
  cc:	39 2b       	or	r19, r25
  ce:	30 93 01 01 	sts	0x0101, r19
  d2:	20 93 00 01 	sts	0x0100, r18
  if (state == 0xF000) return 1;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	21 15       	cp	r18, r1
  da:	30 4f       	sbci	r19, 0xF0	; 240
  dc:	09 f0       	breq	.+2      	; 0xe0 <debounce_switch+0x2c>
  de:	80 e0       	ldi	r24, 0x00	; 0
  return 0;
}
  e0:	08 95       	ret

000000e2 <main>:
// Check switch S0.  When found low for 12 passes of "debounce_switch(), increment
// PORTB.  This will make an incrementing count on the port B LEDS. 
//*******************************************************************************
int main()
{
DDRB = 0xFF;  //set port B to all outputs
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	87 bb       	out	0x17, r24	; 23

uint8_t push_count = 0;
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	6d ec       	ldi	r22, 0xCD	; 205
  ea:	06 c0       	rjmp	.+12     	; 0xf8 <main+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	83 ef       	ldi	r24, 0xF3	; 243
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0xe>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x14>
  f6:	00 00       	nop
// function can be implemented at the same time.  Expects active low pushbutton on 
// Port D bit zero.  Debounce time is determined by external loop delay times 12. 
//*******************************************************************************
int8_t debounce_switch() {
  static uint16_t state = 0; //holds present state
  state = (state << 1) | (! bit_is_clear(PIND, 0)) | 0xE000;
  f8:	40 b3       	in	r20, 0x10	; 16
  fa:	80 91 00 01 	lds	r24, 0x0100
  fe:	90 91 01 01 	lds	r25, 0x0101
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	90 6e       	ori	r25, 0xE0	; 224
 108:	24 2f       	mov	r18, r20
 10a:	21 70       	andi	r18, 0x01	; 1
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	82 2b       	or	r24, r18
 110:	93 2b       	or	r25, r19
 112:	90 93 01 01 	sts	0x0101, r25
 116:	80 93 00 01 	sts	0x0100, r24
  if (state == 0xF000) return 1;
 11a:	81 15       	cp	r24, r1
 11c:	90 4f       	sbci	r25, 0xF0	; 240
 11e:	31 f7       	brne	.-52     	; 0xec <main+0xa>

while(1){     //do forever

 if(debounce_switch()) 
{
push_count++;
 120:	5f 5f       	subi	r21, 0xFF	; 255
if (push_count > 99)
 122:	54 36       	cpi	r21, 0x64	; 100
 124:	20 f0       	brcs	.+8      	; 0x12e <main+0x4c>
 126:	80 e0       	ldi	r24, 0x00	; 0
	push_count = 0;
 128:	50 e0       	ldi	r21, 0x00	; 0
uint8_t LSB = push_count % 10;
uint8_t MSB = push_count / 10;

uint8_t BCD = LSB + (MSB << 4);

PORTB = BCD;
 12a:	88 bb       	out	0x18, r24	; 24
 12c:	df cf       	rjmp	.-66     	; 0xec <main+0xa>
 12e:	56 9f       	mul	r21, r22
 130:	81 2d       	mov	r24, r1
 132:	11 24       	eor	r1, r1
 134:	86 95       	lsr	r24
 136:	86 95       	lsr	r24
 138:	86 95       	lsr	r24
 13a:	45 2f       	mov	r20, r21
 13c:	96 e0       	ldi	r25, 0x06	; 6
 13e:	89 9f       	mul	r24, r25
 140:	40 0d       	add	r20, r0
 142:	11 24       	eor	r1, r1
 144:	84 2f       	mov	r24, r20
 146:	88 bb       	out	0x18, r24	; 24
 148:	d1 cf       	rjmp	.-94     	; 0xec <main+0xa>

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
