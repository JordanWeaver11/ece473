
lab2_skel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000035e  000003f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000035e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800114  00800114  00000406  2**0
                  ALLOC
  3 .stab         00000b34  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d55  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001c91  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ca4  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e5       	ldi	r30, 0x5E	; 94
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 32       	cpi	r26, 0x25	; 37
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <main>
  c6:	0c 94 ad 01 	jmp	0x35a	; 0x35a <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <bin_to_bcd>:
    }
    return bcd;
}
*/

uint16_t bin_to_bcd(uint16_t i) {
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	ac 01       	movw	r20, r24
	uint16_t bcd = 0;
	uint16_t shift = 0;
	while(i > 0) {
  d4:	89 2b       	or	r24, r25
  d6:	89 f1       	breq	.+98     	; 0x13a <bin_to_bcd+0x6c>
  d8:	e0 e0       	ldi	r30, 0x00	; 0
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
		bcd |= (i % 10) << (shift++ << 2);
  e0:	9a 01       	movw	r18, r20
  e2:	ad ec       	ldi	r26, 0xCD	; 205
  e4:	bc ec       	ldi	r27, 0xCC	; 204
  e6:	0e 94 9e 01 	call	0x33c	; 0x33c <__umulhisi3>
  ea:	96 95       	lsr	r25
  ec:	87 95       	ror	r24
  ee:	96 95       	lsr	r25
  f0:	87 95       	ror	r24
  f2:	96 95       	lsr	r25
  f4:	87 95       	ror	r24
  f6:	bc 01       	movw	r22, r24
  f8:	66 0f       	add	r22, r22
  fa:	77 1f       	adc	r23, r23
  fc:	9c 01       	movw	r18, r24
  fe:	22 0f       	add	r18, r18
 100:	33 1f       	adc	r19, r19
 102:	22 0f       	add	r18, r18
 104:	33 1f       	adc	r19, r19
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	26 0f       	add	r18, r22
 10c:	37 1f       	adc	r19, r23
 10e:	42 1b       	sub	r20, r18
 110:	53 0b       	sbc	r21, r19
 112:	9f 01       	movw	r18, r30
 114:	22 0f       	add	r18, r18
 116:	33 1f       	adc	r19, r19
 118:	22 0f       	add	r18, r18
 11a:	33 1f       	adc	r19, r19
 11c:	02 c0       	rjmp	.+4      	; 0x122 <bin_to_bcd+0x54>
 11e:	44 0f       	add	r20, r20
 120:	55 1f       	adc	r21, r21
 122:	2a 95       	dec	r18
 124:	e2 f7       	brpl	.-8      	; 0x11e <bin_to_bcd+0x50>
 126:	c4 2b       	or	r28, r20
 128:	d5 2b       	or	r29, r21
		i /= 10;
 12a:	ac 01       	movw	r20, r24

uint16_t bin_to_bcd(uint16_t i) {
	uint16_t bcd = 0;
	uint16_t shift = 0;
	while(i > 0) {
		bcd |= (i % 10) << (shift++ << 2);
 12c:	31 96       	adiw	r30, 0x01	; 1
*/

uint16_t bin_to_bcd(uint16_t i) {
	uint16_t bcd = 0;
	uint16_t shift = 0;
	while(i > 0) {
 12e:	89 2b       	or	r24, r25
 130:	b9 f6       	brne	.-82     	; 0xe0 <bin_to_bcd+0x12>
		bcd |= (i % 10) << (shift++ << 2);
		i /= 10;
	}
	return bcd;
}
 132:	ce 01       	movw	r24, r28
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	08 95       	ret
    return bcd;
}
*/

uint16_t bin_to_bcd(uint16_t i) {
	uint16_t bcd = 0;
 13a:	c0 e0       	ldi	r28, 0x00	; 0
 13c:	d0 e0       	ldi	r29, 0x00	; 0
 13e:	f9 cf       	rjmp	.-14     	; 0x132 <bin_to_bcd+0x64>

00000140 <debounce_switch>:
//								debounce
//Debounces pushbuttons so that they are only detected once per button push.
//Taken from lecture slides
uint8_t debounce_switch() {
	static uint16_t state = 0; //holds present state
	state = (state << 1) | (! bit_is_clear(PINA, 5)) | 0xE000;
 140:	89 b3       	in	r24, 0x19	; 25
	if(state = 0xf000) {
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 ef       	ldi	r25, 0xF0	; 240
 146:	90 93 18 01 	sts	0x0118, r25
 14a:	80 93 17 01 	sts	0x0117, r24
		return TRUE;
	}
	return FALSE;
}
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	08 95       	ret

00000152 <chk_buttons>:
	
}
*/
void chk_buttons(uint8_t button) {
	uint8_t i, j;
	State[Index] = PINA & button;
 152:	30 91 15 01 	lds	r19, 0x0115
 156:	99 b3       	in	r25, 0x19	; 25
 158:	e3 2f       	mov	r30, r19
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	e7 5e       	subi	r30, 0xE7	; 231
 15e:	fe 4f       	sbci	r31, 0xFE	; 254
 160:	89 23       	and	r24, r25
 162:	80 83       	st	Z, r24
	++Index;
 164:	3f 5f       	subi	r19, 0xFF	; 255
 166:	90 91 16 01 	lds	r25, 0x0116
 16a:	e9 e1       	ldi	r30, 0x19	; 25
 16c:	f1 e0       	ldi	r31, 0x01	; 1
	j = 0xff;
 16e:	8f ef       	ldi	r24, 0xFF	; 255
	for(i = 0; i < MAX_CHECKS - 1; i++) {
		j = j & State[i];
 170:	21 91       	ld	r18, Z+
 172:	82 23       	and	r24, r18
		Debounced_State = Debounced_State ^ j;
 174:	98 27       	eor	r25, r24
		if(Index >= MAX_CHECKS) {
 176:	3c 30       	cpi	r19, 0x0C	; 12
 178:	08 f0       	brcs	.+2      	; 0x17c <chk_buttons+0x2a>
			Index = 0;
 17a:	30 e0       	ldi	r19, 0x00	; 0
void chk_buttons(uint8_t button) {
	uint8_t i, j;
	State[Index] = PINA & button;
	++Index;
	j = 0xff;
	for(i = 0; i < MAX_CHECKS - 1; i++) {
 17c:	21 e0       	ldi	r18, 0x01	; 1
 17e:	e4 32       	cpi	r30, 0x24	; 36
 180:	f2 07       	cpc	r31, r18
 182:	b1 f7       	brne	.-20     	; 0x170 <chk_buttons+0x1e>
 184:	90 93 16 01 	sts	0x0116, r25
 188:	30 93 15 01 	sts	0x0115, r19
 18c:	08 95       	ret

0000018e <segsum>:
  }
}//segment_sum
*/


void segsum(uint16_t bcd) {
 18e:	9c 01       	movw	r18, r24
    uint8_t digit;
    uint8_t i = 0;
    //bcd = 0b0001001000110100;
	for(i = 0; i < 5; i++) {
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	10 c0       	rjmp	.+32     	; 0x1b4 <segsum+0x26>
		}
		//bcd >>= 4;
		//extract the rightmost 4 bits
		digit = bcd & 0xF;
		//put the extracted digit into segment_data array
		segment_data[i] = digit;
 194:	e9 2f       	mov	r30, r25
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	e1 5f       	subi	r30, 0xF1	; 241
 19a:	fe 4f       	sbci	r31, 0xFE	; 254
		if(i == 2) {
			i++;
		}
		//bcd >>= 4;
		//extract the rightmost 4 bits
		digit = bcd & 0xF;
 19c:	82 2f       	mov	r24, r18
 19e:	8f 70       	andi	r24, 0x0F	; 15
		//put the extracted digit into segment_data array
		segment_data[i] = digit;
 1a0:	80 83       	st	Z, r24
		//shift the bcd value to move to the next digit
		bcd >>= 4;
 1a2:	32 95       	swap	r19
 1a4:	22 95       	swap	r18
 1a6:	2f 70       	andi	r18, 0x0F	; 15
 1a8:	23 27       	eor	r18, r19
 1aa:	3f 70       	andi	r19, 0x0F	; 15
 1ac:	23 27       	eor	r18, r19

void segsum(uint16_t bcd) {
    uint8_t digit;
    uint8_t i = 0;
    //bcd = 0b0001001000110100;
	for(i = 0; i < 5; i++) {
 1ae:	9f 5f       	subi	r25, 0xFF	; 255
 1b0:	95 30       	cpi	r25, 0x05	; 5
 1b2:	70 f4       	brcc	.+28     	; 0x1d0 <segsum+0x42>
		//ignore colon on display
		if(i == 2) {
 1b4:	92 30       	cpi	r25, 0x02	; 2
 1b6:	71 f7       	brne	.-36     	; 0x194 <segsum+0x6>
			i++;
		}
		//bcd >>= 4;
		//extract the rightmost 4 bits
		digit = bcd & 0xF;
 1b8:	82 2f       	mov	r24, r18
 1ba:	8f 70       	andi	r24, 0x0F	; 15
		//put the extracted digit into segment_data array
		segment_data[i] = digit;
 1bc:	80 93 12 01 	sts	0x0112, r24
		//shift the bcd value to move to the next digit
		bcd >>= 4;
 1c0:	32 95       	swap	r19
 1c2:	22 95       	swap	r18
 1c4:	2f 70       	andi	r18, 0x0F	; 15
 1c6:	23 27       	eor	r18, r19
 1c8:	3f 70       	andi	r19, 0x0F	; 15
 1ca:	23 27       	eor	r18, r19

void segsum(uint16_t bcd) {
    uint8_t digit;
    uint8_t i = 0;
    //bcd = 0b0001001000110100;
	for(i = 0; i < 5; i++) {
 1cc:	94 e0       	ldi	r25, 0x04	; 4
 1ce:	e2 cf       	rjmp	.-60     	; 0x194 <segsum+0x6>
 1d0:	08 95       	ret

000001d2 <main>:

//***********************************************************************************
uint8_t main()
{
//set port bits 4-7 B as outputs
DDRB = (1<<DDB4) | (1<<DDB5) | (1<<DDB6) | (1<<DDB7);
 1d2:	80 ef       	ldi	r24, 0xF0	; 240
 1d4:	87 bb       	out	0x17, r24	; 23
PORTB = 0;
 1d6:	18 ba       	out	0x18, r1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d8:	8f e9       	ldi	r24, 0x9F	; 159
 1da:	9f e0       	ldi	r25, 0x0F	; 15
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <main+0xa>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <main+0x10>
 1e2:	00 00       	nop
 1e4:	8f e9       	ldi	r24, 0x9F	; 159
 1e6:	9f e0       	ldi	r25, 0x0F	; 15
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <main+0x16>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0x1c>
 1ee:	00 00       	nop
while(1){
	int i = 0;
  //insert loop delay for debounce
  for(i=0;i<2;i++){_delay_ms(1);} //0.01 second wait
  //make PORTA an input port with pullups 
  DDRA = 0;
 1f0:	1a ba       	out	0x1a, r1	; 26
  PORTA = 0xff;
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	8b bb       	out	0x1b, r24	; 27
  //enable tristate buffer for pushbutton switches
  PORTB = (1<<PB4) | (1<<PB5) | (1<<PB6);
 1f6:	90 e7       	ldi	r25, 0x70	; 112
 1f8:	98 bb       	out	0x18, r25	; 24
  */
  
  
//  disp_num += chk_buttons(1);
  
  disp_num = 3;                                        //DEBUG
 1fa:	93 e0       	ldi	r25, 0x03	; 3
 1fc:	90 93 14 01 	sts	0x0114, r25
  //disable tristate buffer for pushbutton switches
  PORTB = (1<<PB5) | (1<<PB6);  //enables unused Y6 output
 200:	90 e6       	ldi	r25, 0x60	; 96
 202:	98 bb       	out	0x18, r25	; 24
  if( disp_num != 0 ) {
	segsum(bin_to_bcd(3));
  }
  */
  //make PORTA an output
  DDRA = 0xff;
 204:	8a bb       	out	0x1a, r24	; 26
{
//set port bits 4-7 B as outputs
DDRB = (1<<DDB4) | (1<<DDB5) | (1<<DDB6) | (1<<DDB7);
PORTB = 0;

int count = 0;
 206:	c0 e0       	ldi	r28, 0x00	; 0
 208:	d0 e0       	ldi	r29, 0x00	; 0
	int i = 0;
  //insert loop delay for debounce
  for(i=0;i<2;i++){_delay_ms(1);} //0.01 second wait
  //make PORTA an input port with pullups 
  DDRA = 0;
  PORTA = 0xff;
 20a:	ff 24       	eor	r15, r15
 20c:	fa 94       	dec	r15
  //enable tristate buffer for pushbutton switches
  PORTB = (1<<PB4) | (1<<PB5) | (1<<PB6);
 20e:	10 e7       	ldi	r17, 0x70	; 112
 210:	c1 2e       	mov	r12, r17
  */
  
  
//  disp_num += chk_buttons(1);
  
  disp_num = 3;                                        //DEBUG
 212:	03 e0       	ldi	r16, 0x03	; 3
 214:	d0 2e       	mov	r13, r16
  //disable tristate buffer for pushbutton switches
  PORTB = (1<<PB5) | (1<<PB6);  //enables unused Y6 output
 216:	80 e6       	ldi	r24, 0x60	; 96
 218:	e8 2e       	mov	r14, r24
    return bcd;
}
*/

uint16_t bin_to_bcd(uint16_t i) {
	uint16_t bcd = 0;
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	50 e0       	ldi	r21, 0x00	; 0
	uint16_t shift = 0;
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	10 e0       	ldi	r17, 0x00	; 0
 222:	e1 ee       	ldi	r30, 0xE1	; 225
 224:	f0 e1       	ldi	r31, 0x10	; 16
	while(i > 0) {
		bcd |= (i % 10) << (shift++ << 2);
 226:	9f 01       	movw	r18, r30
 228:	ad ec       	ldi	r26, 0xCD	; 205
 22a:	bc ec       	ldi	r27, 0xCC	; 204
 22c:	0e 94 9e 01 	call	0x33c	; 0x33c <__umulhisi3>
 230:	96 95       	lsr	r25
 232:	87 95       	ror	r24
 234:	96 95       	lsr	r25
 236:	87 95       	ror	r24
 238:	96 95       	lsr	r25
 23a:	87 95       	ror	r24
 23c:	bc 01       	movw	r22, r24
 23e:	66 0f       	add	r22, r22
 240:	77 1f       	adc	r23, r23
 242:	9c 01       	movw	r18, r24
 244:	22 0f       	add	r18, r18
 246:	33 1f       	adc	r19, r19
 248:	22 0f       	add	r18, r18
 24a:	33 1f       	adc	r19, r19
 24c:	22 0f       	add	r18, r18
 24e:	33 1f       	adc	r19, r19
 250:	26 0f       	add	r18, r22
 252:	37 1f       	adc	r19, r23
 254:	e2 1b       	sub	r30, r18
 256:	f3 0b       	sbc	r31, r19
 258:	98 01       	movw	r18, r16
 25a:	22 0f       	add	r18, r18
 25c:	33 1f       	adc	r19, r19
 25e:	22 0f       	add	r18, r18
 260:	33 1f       	adc	r19, r19
 262:	02 c0       	rjmp	.+4      	; 0x268 <main+0x96>
 264:	ee 0f       	add	r30, r30
 266:	ff 1f       	adc	r31, r31
 268:	2a 95       	dec	r18
 26a:	e2 f7       	brpl	.-8      	; 0x264 <main+0x92>
 26c:	4e 2b       	or	r20, r30
 26e:	5f 2b       	or	r21, r31
		i /= 10;
 270:	fc 01       	movw	r30, r24
 272:	0f 5f       	subi	r16, 0xFF	; 255
 274:	1f 4f       	sbci	r17, 0xFF	; 255
*/

uint16_t bin_to_bcd(uint16_t i) {
	uint16_t bcd = 0;
	uint16_t shift = 0;
	while(i > 0) {
 276:	04 30       	cpi	r16, 0x04	; 4
 278:	11 05       	cpc	r17, r1
 27a:	a9 f6       	brne	.-86     	; 0x226 <main+0x54>
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	10 c0       	rjmp	.+32     	; 0x2a0 <main+0xce>
		}
		//bcd >>= 4;
		//extract the rightmost 4 bits
		digit = bcd & 0xF;
		//put the extracted digit into segment_data array
		segment_data[i] = digit;
 280:	e8 2f       	mov	r30, r24
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	e1 5f       	subi	r30, 0xF1	; 241
 286:	fe 4f       	sbci	r31, 0xFE	; 254
		if(i == 2) {
			i++;
		}
		//bcd >>= 4;
		//extract the rightmost 4 bits
		digit = bcd & 0xF;
 288:	94 2f       	mov	r25, r20
 28a:	9f 70       	andi	r25, 0x0F	; 15
		//put the extracted digit into segment_data array
		segment_data[i] = digit;
 28c:	90 83       	st	Z, r25
		//shift the bcd value to move to the next digit
		bcd >>= 4;
 28e:	52 95       	swap	r21
 290:	42 95       	swap	r20
 292:	4f 70       	andi	r20, 0x0F	; 15
 294:	45 27       	eor	r20, r21
 296:	5f 70       	andi	r21, 0x0F	; 15
 298:	45 27       	eor	r20, r21

void segsum(uint16_t bcd) {
    uint8_t digit;
    uint8_t i = 0;
    //bcd = 0b0001001000110100;
	for(i = 0; i < 5; i++) {
 29a:	8f 5f       	subi	r24, 0xFF	; 255
 29c:	85 30       	cpi	r24, 0x05	; 5
 29e:	70 f4       	brcc	.+28     	; 0x2bc <main+0xea>
		//ignore colon on display
		if(i == 2) {
 2a0:	82 30       	cpi	r24, 0x02	; 2
 2a2:	71 f7       	brne	.-36     	; 0x280 <main+0xae>
			i++;
		}
		//bcd >>= 4;
		//extract the rightmost 4 bits
		digit = bcd & 0xF;
 2a4:	84 2f       	mov	r24, r20
 2a6:	8f 70       	andi	r24, 0x0F	; 15
		//put the extracted digit into segment_data array
		segment_data[i] = digit;
 2a8:	80 93 12 01 	sts	0x0112, r24
		//shift the bcd value to move to the next digit
		bcd >>= 4;
 2ac:	52 95       	swap	r21
 2ae:	42 95       	swap	r20
 2b0:	4f 70       	andi	r20, 0x0F	; 15
 2b2:	45 27       	eor	r20, r21
 2b4:	5f 70       	andi	r21, 0x0F	; 15
 2b6:	45 27       	eor	r20, r21

void segsum(uint16_t bcd) {
    uint8_t digit;
    uint8_t i = 0;
    //bcd = 0b0001001000110100;
	for(i = 0; i < 5; i++) {
 2b8:	84 e0       	ldi	r24, 0x04	; 4
 2ba:	e2 cf       	rjmp	.-60     	; 0x280 <main+0xae>
  }
  
  
  
  segsum(bin_to_bcd(4321));
  PORTA = dec_to_7seg[segment_data[4]];
 2bc:	e0 91 13 01 	lds	r30, 0x0113
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	eb 5f       	subi	r30, 0xFB	; 251
 2c4:	fe 4f       	sbci	r31, 0xFE	; 254
 2c6:	80 81       	ld	r24, Z
 2c8:	8b bb       	out	0x1b, r24	; 27
  PORTB = portb_digit[count];
 2ca:	fe 01       	movw	r30, r28
 2cc:	e0 50       	subi	r30, 0x00	; 0
 2ce:	ff 4f       	sbci	r31, 0xFF	; 255
 2d0:	80 81       	ld	r24, Z
 2d2:	88 bb       	out	0x18, r24	; 24
  
  /*
  PORTA = bin_to_bcd(3) & 0xff;
  PORTB = portb_digit[count];
  */
  count++;
 2d4:	21 96       	adiw	r28, 0x01	; 1
  if(count > 4) {
 2d6:	c5 30       	cpi	r28, 0x05	; 5
 2d8:	d1 05       	cpc	r29, r1
 2da:	b4 f0       	brlt	.+44     	; 0x308 <main+0x136>
 2dc:	8f e9       	ldi	r24, 0x9F	; 159
 2de:	9f e0       	ldi	r25, 0x0F	; 15
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <main+0x10e>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <main+0x114>
 2e6:	00 00       	nop
 2e8:	8f e9       	ldi	r24, 0x9F	; 159
 2ea:	9f e0       	ldi	r25, 0x0F	; 15
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <main+0x11a>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <main+0x120>
 2f2:	00 00       	nop
while(1){
	int i = 0;
  //insert loop delay for debounce
  for(i=0;i<2;i++){_delay_ms(1);} //0.01 second wait
  //make PORTA an input port with pullups 
  DDRA = 0;
 2f4:	1a ba       	out	0x1a, r1	; 26
  PORTA = 0xff;
 2f6:	fb ba       	out	0x1b, r15	; 27
  //enable tristate buffer for pushbutton switches
  PORTB = (1<<PB4) | (1<<PB5) | (1<<PB6);
 2f8:	c8 ba       	out	0x18, r12	; 24
  */
  
  
//  disp_num += chk_buttons(1);
  
  disp_num = 3;                                        //DEBUG
 2fa:	d0 92 14 01 	sts	0x0114, r13
  //disable tristate buffer for pushbutton switches
  PORTB = (1<<PB5) | (1<<PB6);  //enables unused Y6 output
 2fe:	e8 ba       	out	0x18, r14	; 24
  if( disp_num != 0 ) {
	segsum(bin_to_bcd(3));
  }
  */
  //make PORTA an output
  DDRA = 0xff;
 300:	fa ba       	out	0x1a, r15	; 26
  PORTA = bin_to_bcd(3) & 0xff;
  PORTB = portb_digit[count];
  */
  count++;
  if(count > 4) {
	  count = 0;
 302:	c0 e0       	ldi	r28, 0x00	; 0
 304:	d0 e0       	ldi	r29, 0x00	; 0
 306:	89 cf       	rjmp	.-238    	; 0x21a <main+0x48>
 308:	8f e9       	ldi	r24, 0x9F	; 159
 30a:	9f e0       	ldi	r25, 0x0F	; 15
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <main+0x13a>
 310:	00 c0       	rjmp	.+0      	; 0x312 <main+0x140>
 312:	00 00       	nop
 314:	8f e9       	ldi	r24, 0x9F	; 159
 316:	9f e0       	ldi	r25, 0x0F	; 15
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <main+0x146>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <main+0x14c>
 31e:	00 00       	nop
while(1){
	int i = 0;
  //insert loop delay for debounce
  for(i=0;i<2;i++){_delay_ms(1);} //0.01 second wait
  //make PORTA an input port with pullups 
  DDRA = 0;
 320:	1a ba       	out	0x1a, r1	; 26
  PORTA = 0xff;
 322:	fb ba       	out	0x1b, r15	; 27
  //enable tristate buffer for pushbutton switches
  PORTB = (1<<PB4) | (1<<PB5) | (1<<PB6);
 324:	c8 ba       	out	0x18, r12	; 24
  */
  
  
//  disp_num += chk_buttons(1);
  
  disp_num = 3;                                        //DEBUG
 326:	d0 92 14 01 	sts	0x0114, r13
  //disable tristate buffer for pushbutton switches
  PORTB = (1<<PB5) | (1<<PB6);  //enables unused Y6 output
 32a:	e8 ba       	out	0x18, r14	; 24
  if( disp_num != 0 ) {
	segsum(bin_to_bcd(3));
  }
  */
  //make PORTA an output
  DDRA = 0xff;
 32c:	fa ba       	out	0x1a, r15	; 26
  
  if(count == 2) {
 32e:	c2 30       	cpi	r28, 0x02	; 2
 330:	d1 05       	cpc	r29, r1
 332:	09 f0       	breq	.+2      	; 0x336 <main+0x164>
 334:	72 cf       	rjmp	.-284    	; 0x21a <main+0x48>
	count++;
 336:	c3 e0       	ldi	r28, 0x03	; 3
 338:	d0 e0       	ldi	r29, 0x00	; 0
 33a:	6f cf       	rjmp	.-290    	; 0x21a <main+0x48>

0000033c <__umulhisi3>:
 33c:	a2 9f       	mul	r26, r18
 33e:	b0 01       	movw	r22, r0
 340:	b3 9f       	mul	r27, r19
 342:	c0 01       	movw	r24, r0
 344:	a3 9f       	mul	r26, r19
 346:	70 0d       	add	r23, r0
 348:	81 1d       	adc	r24, r1
 34a:	11 24       	eor	r1, r1
 34c:	91 1d       	adc	r25, r1
 34e:	b2 9f       	mul	r27, r18
 350:	70 0d       	add	r23, r0
 352:	81 1d       	adc	r24, r1
 354:	11 24       	eor	r1, r1
 356:	91 1d       	adc	r25, r1
 358:	08 95       	ret

0000035a <_exit>:
 35a:	f8 94       	cli

0000035c <__stop_program>:
 35c:	ff cf       	rjmp	.-2      	; 0x35c <__stop_program>
