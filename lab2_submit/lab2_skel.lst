
lab2_skel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000003b8  0000044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800114  00800114  00000460  2**0
                  ALLOC
  3 .stab         00000aec  00000000  00000000  00000460  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d43  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001c8f  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ca0  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 eb       	ldi	r30, 0xB8	; 184
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 31       	cpi	r26, 0x1E	; 30
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 df 00 	call	0x1be	; 0x1be <main>
  c6:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <bin_to_bcd>:

//*****************************************************************************
//							bin_to_bcd
//Converts binary number to bdc by modding by 10 and shifting by 4 bits per digit.

uint16_t bin_to_bcd(uint16_t i) {
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	ac 01       	movw	r20, r24
    uint16_t binaryShift = 0;
    uint16_t digit;
    uint16_t bcd = 0;
    while (i > 0) {
  d4:	c0 e0       	ldi	r28, 0x00	; 0
  d6:	d0 e0       	ldi	r29, 0x00	; 0
  d8:	89 2b       	or	r24, r25
  da:	39 f1       	breq	.+78     	; 0x12a <bin_to_bcd+0x5c>
  dc:	e0 e0       	ldi	r30, 0x00	; 0
  de:	f0 e0       	ldi	r31, 0x00	; 0
        //mod by 10 each time to move from 1s to 10s, so on
        digit = i % 10;
  e0:	9a 01       	movw	r18, r20
  e2:	ad ec       	ldi	r26, 0xCD	; 205
  e4:	bc ec       	ldi	r27, 0xCC	; 204
  e6:	0e 94 cb 01 	call	0x396	; 0x396 <__umulhisi3>
  ea:	96 95       	lsr	r25
  ec:	87 95       	ror	r24
  ee:	96 95       	lsr	r25
  f0:	87 95       	ror	r24
  f2:	96 95       	lsr	r25
  f4:	87 95       	ror	r24
  f6:	bc 01       	movw	r22, r24
  f8:	66 0f       	add	r22, r22
  fa:	77 1f       	adc	r23, r23
  fc:	9c 01       	movw	r18, r24
  fe:	22 0f       	add	r18, r18
 100:	33 1f       	adc	r19, r19
 102:	22 0f       	add	r18, r18
 104:	33 1f       	adc	r19, r19
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	26 0f       	add	r18, r22
 10c:	37 1f       	adc	r19, r23
 10e:	42 1b       	sub	r20, r18
 110:	53 0b       	sbc	r21, r19
        //extract each decimal digit encoded with 4 bits
        bcd += (digit << binaryShift);
 112:	0e 2e       	mov	r0, r30
 114:	02 c0       	rjmp	.+4      	; 0x11a <bin_to_bcd+0x4c>
 116:	44 0f       	add	r20, r20
 118:	55 1f       	adc	r21, r21
 11a:	0a 94       	dec	r0
 11c:	e2 f7       	brpl	.-8      	; 0x116 <bin_to_bcd+0x48>
 11e:	c4 0f       	add	r28, r20
 120:	d5 1f       	adc	r29, r21
        //shift another 4 bits to get the next digit
        binaryShift += 4;
 122:	34 96       	adiw	r30, 0x04	; 4
        i /= 10;
 124:	ac 01       	movw	r20, r24

uint16_t bin_to_bcd(uint16_t i) {
    uint16_t binaryShift = 0;
    uint16_t digit;
    uint16_t bcd = 0;
    while (i > 0) {
 126:	89 2b       	or	r24, r25
 128:	d9 f6       	brne	.-74     	; 0xe0 <bin_to_bcd+0x12>
        //shift another 4 bits to get the next digit
        binaryShift += 4;
        i /= 10;
    }
    return bcd;
}
 12a:	ce 01       	movw	r24, r28
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <chk_buttons>:
	
}
*/
void chk_buttons(uint8_t button) {
	uint8_t i, j;
	State[Index] = PINA & (1<<button);
 132:	20 91 15 01 	lds	r18, 0x0115
 136:	99 b3       	in	r25, 0x19	; 25
 138:	e2 2f       	mov	r30, r18
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	e9 5e       	subi	r30, 0xE9	; 233
 13e:	fe 4f       	sbci	r31, 0xFE	; 254
 140:	41 e0       	ldi	r20, 0x01	; 1
 142:	50 e0       	ldi	r21, 0x00	; 0
 144:	01 c0       	rjmp	.+2      	; 0x148 <chk_buttons+0x16>
 146:	44 0f       	add	r20, r20
 148:	8a 95       	dec	r24
 14a:	ea f7       	brpl	.-6      	; 0x146 <chk_buttons+0x14>
 14c:	49 23       	and	r20, r25
 14e:	40 83       	st	Z, r20
	++Index;
 150:	2f 5f       	subi	r18, 0xFF	; 255
 152:	90 91 16 01 	lds	r25, 0x0116
 156:	e7 e1       	ldi	r30, 0x17	; 23
 158:	f1 e0       	ldi	r31, 0x01	; 1
	j = 0xff;
 15a:	8f ef       	ldi	r24, 0xFF	; 255
	for(i = 0; i < MAX_CHECKS - 1; i++) {
		j = j & State[i];
 15c:	31 91       	ld	r19, Z+
 15e:	83 23       	and	r24, r19
		Debounced_State = Debounced_State ^ j;
 160:	98 27       	eor	r25, r24
		if(Index >= MAX_CHECKS) {
 162:	27 30       	cpi	r18, 0x07	; 7
 164:	08 f0       	brcs	.+2      	; 0x168 <chk_buttons+0x36>
			Index = 0;
 166:	20 e0       	ldi	r18, 0x00	; 0
void chk_buttons(uint8_t button) {
	uint8_t i, j;
	State[Index] = PINA & (1<<button);
	++Index;
	j = 0xff;
	for(i = 0; i < MAX_CHECKS - 1; i++) {
 168:	31 e0       	ldi	r19, 0x01	; 1
 16a:	ed 31       	cpi	r30, 0x1D	; 29
 16c:	f3 07       	cpc	r31, r19
 16e:	b1 f7       	brne	.-20     	; 0x15c <chk_buttons+0x2a>
 170:	90 93 16 01 	sts	0x0116, r25
 174:	20 93 15 01 	sts	0x0115, r18
 178:	08 95       	ret

0000017a <segsum>:
  }
}//segment_sum
*/


void segsum(uint16_t bcd) {
 17a:	9c 01       	movw	r18, r24
    uint8_t digit;
    uint8_t i = 0;
    //bcd = 0b0001001000110100;
	for(i = 0; i < 5; i++) {
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	10 c0       	rjmp	.+32     	; 0x1a0 <segsum+0x26>
		}
		//bcd >>= 4;
		//extract the rightmost 4 bits
		digit = bcd & 0xF;
		//put the extracted digit into segment_data array
		segment_data[i] = digit;
 180:	e9 2f       	mov	r30, r25
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	e1 5f       	subi	r30, 0xF1	; 241
 186:	fe 4f       	sbci	r31, 0xFE	; 254
		if(i == 2) {
			i++;
		}
		//bcd >>= 4;
		//extract the rightmost 4 bits
		digit = bcd & 0xF;
 188:	82 2f       	mov	r24, r18
 18a:	8f 70       	andi	r24, 0x0F	; 15
		//put the extracted digit into segment_data array
		segment_data[i] = digit;
 18c:	80 83       	st	Z, r24
		//shift the bcd value to move to the next digit
		bcd >>= 4;
 18e:	32 95       	swap	r19
 190:	22 95       	swap	r18
 192:	2f 70       	andi	r18, 0x0F	; 15
 194:	23 27       	eor	r18, r19
 196:	3f 70       	andi	r19, 0x0F	; 15
 198:	23 27       	eor	r18, r19

void segsum(uint16_t bcd) {
    uint8_t digit;
    uint8_t i = 0;
    //bcd = 0b0001001000110100;
	for(i = 0; i < 5; i++) {
 19a:	9f 5f       	subi	r25, 0xFF	; 255
 19c:	95 30       	cpi	r25, 0x05	; 5
 19e:	70 f4       	brcc	.+28     	; 0x1bc <segsum+0x42>
		//ignore colon on display
		if(i == 2) {
 1a0:	92 30       	cpi	r25, 0x02	; 2
 1a2:	71 f7       	brne	.-36     	; 0x180 <segsum+0x6>
			i++;
		}
		//bcd >>= 4;
		//extract the rightmost 4 bits
		digit = bcd & 0xF;
 1a4:	82 2f       	mov	r24, r18
 1a6:	8f 70       	andi	r24, 0x0F	; 15
		//put the extracted digit into segment_data array
		segment_data[i] = digit;
 1a8:	80 93 12 01 	sts	0x0112, r24
		//shift the bcd value to move to the next digit
		bcd >>= 4;
 1ac:	32 95       	swap	r19
 1ae:	22 95       	swap	r18
 1b0:	2f 70       	andi	r18, 0x0F	; 15
 1b2:	23 27       	eor	r18, r19
 1b4:	3f 70       	andi	r19, 0x0F	; 15
 1b6:	23 27       	eor	r18, r19

void segsum(uint16_t bcd) {
    uint8_t digit;
    uint8_t i = 0;
    //bcd = 0b0001001000110100;
	for(i = 0; i < 5; i++) {
 1b8:	94 e0       	ldi	r25, 0x04	; 4
 1ba:	e2 cf       	rjmp	.-60     	; 0x180 <segsum+0x6>
 1bc:	08 95       	ret

000001be <main>:

//***********************************************************************************
uint8_t main()
{
//set port bits 4-7 B as outputs
DDRB = (1<<DDB4) | (1<<DDB5) | (1<<DDB6) | (1<<DDB7);
 1be:	80 ef       	ldi	r24, 0xF0	; 240
 1c0:	87 bb       	out	0x17, r24	; 23
PORTB = 0;
 1c2:	18 ba       	out	0x18, r1	; 24

int count = 0;
 1c4:	c0 e0       	ldi	r28, 0x00	; 0
 1c6:	d0 e0       	ldi	r29, 0x00	; 0
	int i = 0;
  //insert loop delay for debounce
  for(i=0;i<5;i++){_delay_ms(2);} //0.01 second wait
  //make PORTA an input port with pullups 
  DDRA = 0;
  PORTA = 0xff;
 1c8:	ff 24       	eor	r15, r15
 1ca:	fa 94       	dec	r15
  //enable tristate buffer for pushbutton switches
  PORTB = (1<<PB4) | (1<<PB5) | (1<<PB6);
 1cc:	b0 e7       	ldi	r27, 0x70	; 112
 1ce:	db 2e       	mov	r13, r27
  
//  disp_num += chk_buttons(1);
  
//  disp_num = 3;                                        //DEBUG
  //disable tristate buffer for pushbutton switches
  PORTB = (1<<PB5) | (1<<PB6);  //enables unused Y6 output
 1d0:	10 e6       	ldi	r17, 0x60	; 96
 1d2:	e1 2e       	mov	r14, r17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d4:	8f e3       	ldi	r24, 0x3F	; 63
 1d6:	9f e1       	ldi	r25, 0x1F	; 31
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <main+0x1a>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0x20>
 1de:	00 00       	nop
 1e0:	8f e3       	ldi	r24, 0x3F	; 63
 1e2:	9f e1       	ldi	r25, 0x1F	; 31
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <main+0x26>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <main+0x2c>
 1ea:	00 00       	nop
 1ec:	8f e3       	ldi	r24, 0x3F	; 63
 1ee:	9f e1       	ldi	r25, 0x1F	; 31
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <main+0x32>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0x38>
 1f6:	00 00       	nop
 1f8:	8f e3       	ldi	r24, 0x3F	; 63
 1fa:	9f e1       	ldi	r25, 0x1F	; 31
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <main+0x3e>
 200:	00 c0       	rjmp	.+0      	; 0x202 <main+0x44>
 202:	00 00       	nop
 204:	8f e3       	ldi	r24, 0x3F	; 63
 206:	9f e1       	ldi	r25, 0x1F	; 31
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <main+0x4a>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <main+0x50>
 20e:	00 00       	nop
while(1){
	int i = 0;
  //insert loop delay for debounce
  for(i=0;i<5;i++){_delay_ms(2);} //0.01 second wait
  //make PORTA an input port with pullups 
  DDRA = 0;
 210:	1a ba       	out	0x1a, r1	; 26
  PORTA = 0xff;
 212:	fb ba       	out	0x1b, r15	; 27
  //enable tristate buffer for pushbutton switches
  PORTB = (1<<PB4) | (1<<PB5) | (1<<PB6);
 214:	d8 ba       	out	0x18, r13	; 24
 216:	10 e0       	ldi	r17, 0x00	; 0
  
  //now check each button and increment the count as needed
  for(i = 0; i < 8; i++) {
	  chk_buttons(i);
 218:	81 2f       	mov	r24, r17
 21a:	0e 94 99 00 	call	0x132	; 0x132 <chk_buttons>
 21e:	1f 5f       	subi	r17, 0xFF	; 255
  PORTA = 0xff;
  //enable tristate buffer for pushbutton switches
  PORTB = (1<<PB4) | (1<<PB5) | (1<<PB6);
  
  //now check each button and increment the count as needed
  for(i = 0; i < 8; i++) {
 220:	18 30       	cpi	r17, 0x08	; 8
 222:	d1 f7       	brne	.-12     	; 0x218 <main+0x5a>
	  chk_buttons(i);
  }
  if(Debounced_State & ~(1<<PA0)) {
 224:	80 91 16 01 	lds	r24, 0x0116
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	9c 01       	movw	r18, r24
 22c:	2e 7f       	andi	r18, 0xFE	; 254
 22e:	23 2b       	or	r18, r19
 230:	29 f0       	breq	.+10     	; 0x23c <main+0x7e>
	  disp_num += 1;
 232:	20 91 14 01 	lds	r18, 0x0114
 236:	2f 5f       	subi	r18, 0xFF	; 255
 238:	20 93 14 01 	sts	0x0114, r18
  }
  if(Debounced_State & ~(1<<PA1)) {
 23c:	9c 01       	movw	r18, r24
 23e:	2d 7f       	andi	r18, 0xFD	; 253
 240:	23 2b       	or	r18, r19
 242:	29 f0       	breq	.+10     	; 0x24e <main+0x90>
	  disp_num += 2;
 244:	20 91 14 01 	lds	r18, 0x0114
 248:	2e 5f       	subi	r18, 0xFE	; 254
 24a:	20 93 14 01 	sts	0x0114, r18
  }
  if(Debounced_State & ~(1<<PA2)) {
 24e:	9c 01       	movw	r18, r24
 250:	2b 7f       	andi	r18, 0xFB	; 251
 252:	23 2b       	or	r18, r19
 254:	29 f0       	breq	.+10     	; 0x260 <main+0xa2>
	  disp_num += 4;
 256:	20 91 14 01 	lds	r18, 0x0114
 25a:	2c 5f       	subi	r18, 0xFC	; 252
 25c:	20 93 14 01 	sts	0x0114, r18
  }
  if(Debounced_State & ~(1<<PA3)) {
 260:	9c 01       	movw	r18, r24
 262:	27 7f       	andi	r18, 0xF7	; 247
 264:	23 2b       	or	r18, r19
 266:	29 f0       	breq	.+10     	; 0x272 <main+0xb4>
	  disp_num += 8;
 268:	20 91 14 01 	lds	r18, 0x0114
 26c:	28 5f       	subi	r18, 0xF8	; 248
 26e:	20 93 14 01 	sts	0x0114, r18
  }
  if(Debounced_State & ~(1<<PA4)) {
 272:	9c 01       	movw	r18, r24
 274:	2f 7e       	andi	r18, 0xEF	; 239
 276:	23 2b       	or	r18, r19
 278:	29 f0       	breq	.+10     	; 0x284 <main+0xc6>
	  disp_num += 16;
 27a:	20 91 14 01 	lds	r18, 0x0114
 27e:	20 5f       	subi	r18, 0xF0	; 240
 280:	20 93 14 01 	sts	0x0114, r18
  }
  if(Debounced_State & ~(1<<PA5)) {
 284:	9c 01       	movw	r18, r24
 286:	2f 7d       	andi	r18, 0xDF	; 223
 288:	23 2b       	or	r18, r19
 28a:	29 f0       	breq	.+10     	; 0x296 <main+0xd8>
	  disp_num += 32;
 28c:	20 91 14 01 	lds	r18, 0x0114
 290:	20 5e       	subi	r18, 0xE0	; 224
 292:	20 93 14 01 	sts	0x0114, r18
  }
  if(Debounced_State & ~(1<<PA6)) {
 296:	9c 01       	movw	r18, r24
 298:	2f 7b       	andi	r18, 0xBF	; 191
 29a:	23 2b       	or	r18, r19
 29c:	29 f0       	breq	.+10     	; 0x2a8 <main+0xea>
	  disp_num += 64;
 29e:	20 91 14 01 	lds	r18, 0x0114
 2a2:	20 5c       	subi	r18, 0xC0	; 192
 2a4:	20 93 14 01 	sts	0x0114, r18
  }
  if(Debounced_State & ~(1<<PA7)) {
 2a8:	8f 77       	andi	r24, 0x7F	; 127
 2aa:	89 2b       	or	r24, r25
 2ac:	29 f0       	breq	.+10     	; 0x2b8 <main+0xfa>
	  disp_num += 128;
 2ae:	80 91 14 01 	lds	r24, 0x0114
 2b2:	80 58       	subi	r24, 0x80	; 128
 2b4:	80 93 14 01 	sts	0x0114, r24
  
//  disp_num += chk_buttons(1);
  
//  disp_num = 3;                                        //DEBUG
  //disable tristate buffer for pushbutton switches
  PORTB = (1<<PB5) | (1<<PB6);  //enables unused Y6 output
 2b8:	e8 ba       	out	0x18, r14	; 24
  if( disp_num != 0 ) {
	segsum(bin_to_bcd(3));
  }
  */
  //make PORTA an output
  DDRA = 0xff;
 2ba:	fa ba       	out	0x1a, r15	; 26
  
  if(count == 2) {
 2bc:	c2 30       	cpi	r28, 0x02	; 2
 2be:	d1 05       	cpc	r29, r1
 2c0:	09 f4       	brne	.+2      	; 0x2c4 <main+0x106>
 2c2:	66 c0       	rjmp	.+204    	; 0x390 <main+0x1d2>
	count++;
  }
  
  
  
  segsum(bin_to_bcd(disp_num));
 2c4:	40 91 14 01 	lds	r20, 0x0114
 2c8:	50 e0       	ldi	r21, 0x00	; 0

uint16_t bin_to_bcd(uint16_t i) {
    uint16_t binaryShift = 0;
    uint16_t digit;
    uint16_t bcd = 0;
    while (i > 0) {
 2ca:	e0 e0       	ldi	r30, 0x00	; 0
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	41 15       	cp	r20, r1
 2d0:	51 05       	cpc	r21, r1
 2d2:	41 f1       	breq	.+80     	; 0x324 <main+0x166>
 2d4:	00 e0       	ldi	r16, 0x00	; 0
 2d6:	10 e0       	ldi	r17, 0x00	; 0
        //mod by 10 each time to move from 1s to 10s, so on
        digit = i % 10;
 2d8:	9a 01       	movw	r18, r20
 2da:	ad ec       	ldi	r26, 0xCD	; 205
 2dc:	bc ec       	ldi	r27, 0xCC	; 204
 2de:	0e 94 cb 01 	call	0x396	; 0x396 <__umulhisi3>
 2e2:	96 95       	lsr	r25
 2e4:	87 95       	ror	r24
 2e6:	96 95       	lsr	r25
 2e8:	87 95       	ror	r24
 2ea:	96 95       	lsr	r25
 2ec:	87 95       	ror	r24
 2ee:	bc 01       	movw	r22, r24
 2f0:	66 0f       	add	r22, r22
 2f2:	77 1f       	adc	r23, r23
 2f4:	9c 01       	movw	r18, r24
 2f6:	22 0f       	add	r18, r18
 2f8:	33 1f       	adc	r19, r19
 2fa:	22 0f       	add	r18, r18
 2fc:	33 1f       	adc	r19, r19
 2fe:	22 0f       	add	r18, r18
 300:	33 1f       	adc	r19, r19
 302:	26 0f       	add	r18, r22
 304:	37 1f       	adc	r19, r23
 306:	42 1b       	sub	r20, r18
 308:	53 0b       	sbc	r21, r19
        //extract each decimal digit encoded with 4 bits
        bcd += (digit << binaryShift);
 30a:	00 2e       	mov	r0, r16
 30c:	02 c0       	rjmp	.+4      	; 0x312 <main+0x154>
 30e:	44 0f       	add	r20, r20
 310:	55 1f       	adc	r21, r21
 312:	0a 94       	dec	r0
 314:	e2 f7       	brpl	.-8      	; 0x30e <main+0x150>
 316:	e4 0f       	add	r30, r20
 318:	f5 1f       	adc	r31, r21
        //shift another 4 bits to get the next digit
        binaryShift += 4;
 31a:	0c 5f       	subi	r16, 0xFC	; 252
 31c:	1f 4f       	sbci	r17, 0xFF	; 255
        i /= 10;
 31e:	ac 01       	movw	r20, r24

uint16_t bin_to_bcd(uint16_t i) {
    uint16_t binaryShift = 0;
    uint16_t digit;
    uint16_t bcd = 0;
    while (i > 0) {
 320:	89 2b       	or	r24, r25
 322:	d1 f6       	brne	.-76     	; 0x2d8 <main+0x11a>

void segsum(uint16_t bcd) {
    uint8_t digit;
    uint8_t i = 0;
    //bcd = 0b0001001000110100;
	for(i = 0; i < 5; i++) {
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	10 c0       	rjmp	.+32     	; 0x348 <main+0x18a>
		}
		//bcd >>= 4;
		//extract the rightmost 4 bits
		digit = bcd & 0xF;
		//put the extracted digit into segment_data array
		segment_data[i] = digit;
 328:	a8 2f       	mov	r26, r24
 32a:	b0 e0       	ldi	r27, 0x00	; 0
 32c:	a1 5f       	subi	r26, 0xF1	; 241
 32e:	be 4f       	sbci	r27, 0xFE	; 254
		if(i == 2) {
			i++;
		}
		//bcd >>= 4;
		//extract the rightmost 4 bits
		digit = bcd & 0xF;
 330:	9e 2f       	mov	r25, r30
 332:	9f 70       	andi	r25, 0x0F	; 15
		//put the extracted digit into segment_data array
		segment_data[i] = digit;
 334:	9c 93       	st	X, r25
		//shift the bcd value to move to the next digit
		bcd >>= 4;
 336:	f2 95       	swap	r31
 338:	e2 95       	swap	r30
 33a:	ef 70       	andi	r30, 0x0F	; 15
 33c:	ef 27       	eor	r30, r31
 33e:	ff 70       	andi	r31, 0x0F	; 15
 340:	ef 27       	eor	r30, r31

void segsum(uint16_t bcd) {
    uint8_t digit;
    uint8_t i = 0;
    //bcd = 0b0001001000110100;
	for(i = 0; i < 5; i++) {
 342:	8f 5f       	subi	r24, 0xFF	; 255
 344:	85 30       	cpi	r24, 0x05	; 5
 346:	70 f4       	brcc	.+28     	; 0x364 <main+0x1a6>
		//ignore colon on display
		if(i == 2) {
 348:	82 30       	cpi	r24, 0x02	; 2
 34a:	71 f7       	brne	.-36     	; 0x328 <main+0x16a>
			i++;
		}
		//bcd >>= 4;
		//extract the rightmost 4 bits
		digit = bcd & 0xF;
 34c:	8e 2f       	mov	r24, r30
 34e:	8f 70       	andi	r24, 0x0F	; 15
		//put the extracted digit into segment_data array
		segment_data[i] = digit;
 350:	80 93 12 01 	sts	0x0112, r24
		//shift the bcd value to move to the next digit
		bcd >>= 4;
 354:	f2 95       	swap	r31
 356:	e2 95       	swap	r30
 358:	ef 70       	andi	r30, 0x0F	; 15
 35a:	ef 27       	eor	r30, r31
 35c:	ff 70       	andi	r31, 0x0F	; 15
 35e:	ef 27       	eor	r30, r31

void segsum(uint16_t bcd) {
    uint8_t digit;
    uint8_t i = 0;
    //bcd = 0b0001001000110100;
	for(i = 0; i < 5; i++) {
 360:	84 e0       	ldi	r24, 0x04	; 4
 362:	e2 cf       	rjmp	.-60     	; 0x328 <main+0x16a>
  }
  
  
  
  segsum(bin_to_bcd(disp_num));
  PORTA = dec_to_7seg[segment_data[count]];
 364:	fe 01       	movw	r30, r28
 366:	e1 5f       	subi	r30, 0xF1	; 241
 368:	fe 4f       	sbci	r31, 0xFE	; 254
 36a:	e0 81       	ld	r30, Z
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	eb 5f       	subi	r30, 0xFB	; 251
 370:	fe 4f       	sbci	r31, 0xFE	; 254
 372:	80 81       	ld	r24, Z
 374:	8b bb       	out	0x1b, r24	; 27
  PORTB = portb_digit[count];
 376:	fe 01       	movw	r30, r28
 378:	e0 50       	subi	r30, 0x00	; 0
 37a:	ff 4f       	sbci	r31, 0xFF	; 255
 37c:	80 81       	ld	r24, Z
 37e:	88 bb       	out	0x18, r24	; 24
  
  /*
  PORTA = bin_to_bcd(3) & 0xff;
  PORTB = portb_digit[count];
  */
  count++;
 380:	21 96       	adiw	r28, 0x01	; 1
  if(count > 4) {
 382:	c5 30       	cpi	r28, 0x05	; 5
 384:	d1 05       	cpc	r29, r1
 386:	0c f4       	brge	.+2      	; 0x38a <main+0x1cc>
 388:	25 cf       	rjmp	.-438    	; 0x1d4 <main+0x16>
	  count = 0;
 38a:	c0 e0       	ldi	r28, 0x00	; 0
 38c:	d0 e0       	ldi	r29, 0x00	; 0
 38e:	22 cf       	rjmp	.-444    	; 0x1d4 <main+0x16>
  */
  //make PORTA an output
  DDRA = 0xff;
  
  if(count == 2) {
	count++;
 390:	c3 e0       	ldi	r28, 0x03	; 3
 392:	d0 e0       	ldi	r29, 0x00	; 0
 394:	97 cf       	rjmp	.-210    	; 0x2c4 <main+0x106>

00000396 <__umulhisi3>:
 396:	a2 9f       	mul	r26, r18
 398:	b0 01       	movw	r22, r0
 39a:	b3 9f       	mul	r27, r19
 39c:	c0 01       	movw	r24, r0
 39e:	a3 9f       	mul	r26, r19
 3a0:	70 0d       	add	r23, r0
 3a2:	81 1d       	adc	r24, r1
 3a4:	11 24       	eor	r1, r1
 3a6:	91 1d       	adc	r25, r1
 3a8:	b2 9f       	mul	r27, r18
 3aa:	70 0d       	add	r23, r0
 3ac:	81 1d       	adc	r24, r1
 3ae:	11 24       	eor	r1, r1
 3b0:	91 1d       	adc	r25, r1
 3b2:	08 95       	ret

000003b4 <_exit>:
 3b4:	f8 94       	cli

000003b6 <__stop_program>:
 3b6:	ff cf       	rjmp	.-2      	; 0x3b6 <__stop_program>
