
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001946  000019da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001946  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000076  00800120  00800120  000019fa  2**0
                  ALLOC
  3 .stab         000033b4  00000000  00000000  000019fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014c1  00000000  00000000  00004db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00006271  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006284  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__ctors_end>
       4:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
       8:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
       c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      10:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      14:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      18:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      1c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      20:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      24:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      28:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      2c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      30:	0c 94 40 05 	jmp	0xa80	; 0xa80 <__vector_12>
      34:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      38:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      3c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      40:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__vector_16>
      44:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      48:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      4c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      50:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      54:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      58:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      5c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      60:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      64:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      68:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      6c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      70:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      74:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      78:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      7c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      80:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      84:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      88:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      8c:	38 01       	movw	r6, r16
      8e:	42 01       	movw	r8, r4
      90:	4c 01       	movw	r8, r24
      92:	56 01       	movw	r10, r12
      94:	61 01       	movw	r12, r2
      96:	6c 01       	movw	r12, r24
      98:	77 01       	movw	r14, r14
      9a:	24 01       	movw	r4, r8
      9c:	2e 01       	movw	r4, r28
      9e:	cd 02       	muls	r28, r29
      a0:	c5 02       	muls	r28, r21
      a2:	c0 02       	muls	r28, r16
      a4:	ea 02       	muls	r30, r26
      a6:	dd 02       	muls	r29, r29
      a8:	e5 02       	muls	r30, r21
      aa:	d5 02       	muls	r29, r21
      ac:	9e 02       	muls	r25, r30
      ae:	96 02       	muls	r25, r22
      b0:	91 02       	muls	r25, r17
      b2:	89 02       	muls	r24, r25
      b4:	f2 02       	muls	r31, r18
      b6:	a6 02       	muls	r26, r22
      b8:	7c 02       	muls	r23, r28
      ba:	64 02       	muls	r22, r20
      bc:	12 03       	mulsu	r17, r18
      be:	bb 02       	muls	r27, r27
      c0:	b3 02       	muls	r27, r19
      c2:	ab 02       	muls	r26, r27
      c4:	32 03       	mulsu	r19, r18
      c6:	6c 02       	muls	r22, r28
      c8:	22 03       	mulsu	r18, r18
      ca:	74 02       	muls	r23, r20
      cc:	3f 03       	fmul	r19, r23
      ce:	0a 03       	fmul	r16, r18
      d0:	2a 03       	fmul	r18, r18
      d2:	84 02       	muls	r24, r20
      d4:	02 03       	mulsu	r16, r18
      d6:	fa 02       	muls	r31, r26
      d8:	1a 03       	fmul	r17, r18
      da:	5f 02       	muls	r21, r31
      dc:	2d 02       	muls	r18, r29
      de:	25 02       	muls	r18, r21
      e0:	35 02       	muls	r19, r21
      e2:	37 03       	mulsu	r19, r23
      e4:	18 02       	muls	r17, r24
      e6:	10 02       	muls	r17, r16
      e8:	3a 02       	muls	r19, r26
      ea:	f3 01       	movw	r30, r6
      ec:	57 02       	muls	r21, r23
      ee:	20 02       	muls	r18, r16
      f0:	03 02       	muls	r16, r19
      f2:	fb 01       	movw	r30, r22
      f4:	47 02       	muls	r20, r23
      f6:	0b 02       	muls	r16, r27
      f8:	3f 02       	muls	r19, r31
      fa:	eb 01       	movw	r28, r22
      fc:	d1 01       	movw	r26, r2
      fe:	4f 02       	muls	r20, r31
     100:	c1 01       	movw	r24, r2
     102:	b9 01       	movw	r22, r18
     104:	de 01       	movw	r26, r28
     106:	d6 01       	movw	r26, r12
     108:	e3 01       	movw	r28, r6
     10a:	b4 01       	movw	r22, r8
     10c:	c9 01       	movw	r24, r18
     10e:	9c 01       	movw	r18, r24
     110:	ac 01       	movw	r20, r24
     112:	97 01       	movw	r18, r14
     114:	8f 01       	movw	r16, r30
     116:	87 01       	movw	r16, r14
     118:	82 01       	movw	r16, r4
     11a:	a4 01       	movw	r20, r8
     11c:	49 04       	cpc	r4, r9
     11e:	67 04       	cpc	r6, r7
     120:	43 04       	cpc	r4, r3
     122:	55 04       	cpc	r5, r5
     124:	37 04       	cpc	r3, r7
     126:	3d 04       	cpc	r3, r13
     128:	37 04       	cpc	r3, r7
     12a:	3d 04       	cpc	r3, r13
     12c:	6d 04       	cpc	r6, r13
     12e:	49 04       	cpc	r4, r9
     130:	67 04       	cpc	r6, r7
     132:	43 04       	cpc	r4, r3
     134:	55 04       	cpc	r5, r5
     136:	4f 04       	cpc	r4, r15
     138:	31 04       	cpc	r3, r1
     13a:	4f 04       	cpc	r4, r15
     13c:	31 04       	cpc	r3, r1
     13e:	97 04       	cpc	r9, r7
     140:	d3 04       	cpc	r13, r3
     142:	8b 04       	cpc	r8, r11
     144:	03 05       	cpc	r16, r3
     146:	8b 04       	cpc	r8, r11
     148:	c7 04       	cpc	r12, r7
     14a:	c1 04       	cpc	r12, r1
     14c:	31 04       	cpc	r3, r1
     14e:	9d 04       	cpc	r9, r13
     150:	31 04       	cpc	r3, r1
     152:	af 04       	cpc	r10, r15
     154:	5b 04       	cpc	r5, r11
     156:	f1 04       	cpc	r15, r1
     158:	37 04       	cpc	r3, r7
     15a:	e5 04       	cpc	r14, r5
     15c:	73 04       	cpc	r7, r3
     15e:	eb 04       	cpc	r14, r11
     160:	79 04       	cpc	r7, r9
     162:	f7 04       	cpc	r15, r7
     164:	bb 04       	cpc	r11, r11
     166:	61 04       	cpc	r6, r1
     168:	5b 04       	cpc	r5, r11
     16a:	a3 04       	cpc	r10, r3
     16c:	7f 04       	cpc	r7, r15
     16e:	49 04       	cpc	r4, r9
     170:	67 04       	cpc	r6, r7
     172:	43 04       	cpc	r4, r3
     174:	55 04       	cpc	r5, r5
     176:	37 04       	cpc	r3, r7
     178:	3d 04       	cpc	r3, r13
     17a:	37 04       	cpc	r3, r7
     17c:	3d 04       	cpc	r3, r13
     17e:	6d 04       	cpc	r6, r13
     180:	49 04       	cpc	r4, r9
     182:	cd 04       	cpc	r12, r13
     184:	61 04       	cpc	r6, r1
     186:	43 04       	cpc	r4, r3
     188:	4f 04       	cpc	r4, r15
     18a:	31 04       	cpc	r3, r1
     18c:	4f 04       	cpc	r4, r15
     18e:	31 04       	cpc	r3, r1
     190:	97 04       	cpc	r9, r7
     192:	d9 04       	cpc	r13, r9
     194:	a9 04       	cpc	r10, r9
     196:	6d 04       	cpc	r6, r13
     198:	df 04       	cpc	r13, r15
     19a:	9d 04       	cpc	r9, r13
     19c:	73 04       	cpc	r7, r3
     19e:	79 04       	cpc	r7, r9
     1a0:	5b 04       	cpc	r5, r11
     1a2:	61 04       	cpc	r6, r1
     1a4:	fd 04       	cpc	r15, r13
     1a6:	7f 04       	cpc	r7, r15
     1a8:	41 0a       	sbc	r4, r17
     1aa:	3b 0a       	sbc	r3, r27
     1ac:	35 0a       	sbc	r3, r21
     1ae:	15 0a       	sbc	r1, r21
     1b0:	0f 0a       	sbc	r0, r31
     1b2:	09 0a       	sbc	r0, r25
     1b4:	4c 0a       	sbc	r4, r28

000001b6 <__ctors_end>:
     1b6:	11 24       	eor	r1, r1
     1b8:	1f be       	out	0x3f, r1	; 63
     1ba:	cf ef       	ldi	r28, 0xFF	; 255
     1bc:	d0 e1       	ldi	r29, 0x10	; 16
     1be:	de bf       	out	0x3e, r29	; 62
     1c0:	cd bf       	out	0x3d, r28	; 61

000001c2 <__do_copy_data>:
     1c2:	11 e0       	ldi	r17, 0x01	; 1
     1c4:	a0 e0       	ldi	r26, 0x00	; 0
     1c6:	b1 e0       	ldi	r27, 0x01	; 1
     1c8:	e6 e4       	ldi	r30, 0x46	; 70
     1ca:	f9 e1       	ldi	r31, 0x19	; 25
     1cc:	00 e0       	ldi	r16, 0x00	; 0
     1ce:	0b bf       	out	0x3b, r16	; 59
     1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <__do_copy_data+0x14>
     1d2:	07 90       	elpm	r0, Z+
     1d4:	0d 92       	st	X+, r0
     1d6:	a0 32       	cpi	r26, 0x20	; 32
     1d8:	b1 07       	cpc	r27, r17
     1da:	d9 f7       	brne	.-10     	; 0x1d2 <__do_copy_data+0x10>

000001dc <__do_clear_bss>:
     1dc:	21 e0       	ldi	r18, 0x01	; 1
     1de:	a0 e2       	ldi	r26, 0x20	; 32
     1e0:	b1 e0       	ldi	r27, 0x01	; 1
     1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <.do_clear_bss_start>

000001e4 <.do_clear_bss_loop>:
     1e4:	1d 92       	st	X+, r1

000001e6 <.do_clear_bss_start>:
     1e6:	a6 39       	cpi	r26, 0x96	; 150
     1e8:	b2 07       	cpc	r27, r18
     1ea:	e1 f7       	brne	.-8      	; 0x1e4 <.do_clear_bss_loop>
     1ec:	0e 94 80 09 	call	0x1300	; 0x1300 <main>
     1f0:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <_exit>

000001f4 <__bad_interrupt>:
     1f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f8 <play_rest>:
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     1f8:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     1fa:	10 92 65 01 	sts	0x0165, r1
     1fe:	10 92 64 01 	sts	0x0164, r1
  max_beat = duration;
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	90 93 63 01 	sts	0x0163, r25
     208:	80 93 62 01 	sts	0x0162, r24
     20c:	08 95       	ret

0000020e <play_note>:
}

void play_note(char note, uint8_t flat, uint8_t octave, uint8_t duration) {
     20e:	58 2f       	mov	r21, r24
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     210:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     212:	10 92 65 01 	sts	0x0165, r1
     216:	10 92 64 01 	sts	0x0164, r1
  max_beat = duration;  //set the max beat
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	30 93 63 01 	sts	0x0163, r19
     220:	20 93 62 01 	sts	0x0162, r18
  switch (octave) {
     224:	84 2f       	mov	r24, r20
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	89 30       	cpi	r24, 0x09	; 9
     22a:	91 05       	cpc	r25, r1
     22c:	18 f0       	brcs	.+6      	; 0x234 <play_note+0x26>
      case 'G': if(flat){OCR1A=Gb8;}
        else {OCR1A=G8;}
	break;
      } 
      break;
    default: OCR1A=0x0000;
     22e:	1b bc       	out	0x2b, r1	; 43
     230:	1a bc       	out	0x2a, r1	; 42
     232:	08 95       	ret
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
     234:	8a 5b       	subi	r24, 0xBA	; 186
     236:	9f 4f       	sbci	r25, 0xFF	; 255
     238:	fc 01       	movw	r30, r24
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
     23a:	85 2f       	mov	r24, r21
     23c:	55 0f       	add	r21, r21
     23e:	99 0b       	sbc	r25, r25
     240:	aa 0b       	sbc	r26, r26
     242:	bb 0b       	sbc	r27, r27
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
     244:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb6;}
        else {OCR1A=G6;}
	break;
      } 
      break;
    case 7: switch (note) {
     248:	fc 01       	movw	r30, r24
     24a:	e1 54       	subi	r30, 0x41	; 65
     24c:	f1 09       	sbc	r31, r1
     24e:	e7 30       	cpi	r30, 0x07	; 7
     250:	f1 05       	cpc	r31, r1
     252:	78 f7       	brcc	.-34     	; 0x232 <play_note+0x24>
     254:	e1 5b       	subi	r30, 0xB1	; 177
     256:	ff 4f       	sbci	r31, 0xFF	; 255
     258:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
     25c:	fc 01       	movw	r30, r24
     25e:	e1 54       	subi	r30, 0x41	; 65
     260:	f1 09       	sbc	r31, r1
     262:	e7 30       	cpi	r30, 0x07	; 7
     264:	f1 05       	cpc	r31, r1
     266:	28 f7       	brcc	.-54     	; 0x232 <play_note+0x24>
     268:	ea 5a       	subi	r30, 0xAA	; 170
     26a:	ff 4f       	sbci	r31, 0xFF	; 255
     26c:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__tablejump2__>
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
     270:	fc 01       	movw	r30, r24
     272:	e1 54       	subi	r30, 0x41	; 65
     274:	f1 09       	sbc	r31, r1
     276:	e7 30       	cpi	r30, 0x07	; 7
     278:	f1 05       	cpc	r31, r1
     27a:	d8 f6       	brcc	.-74     	; 0x232 <play_note+0x24>
     27c:	e3 5a       	subi	r30, 0xA3	; 163
     27e:	ff 4f       	sbci	r31, 0xFF	; 255
     280:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb0;}
        else {OCR1A=G0;}
	break;
      } 
      break;
    case 1: switch (note) {
     284:	fc 01       	movw	r30, r24
     286:	e1 54       	subi	r30, 0x41	; 65
     288:	f1 09       	sbc	r31, r1
     28a:	e7 30       	cpi	r30, 0x07	; 7
     28c:	f1 05       	cpc	r31, r1
     28e:	88 f6       	brcc	.-94     	; 0x232 <play_note+0x24>
     290:	ec 59       	subi	r30, 0x9C	; 156
     292:	ff 4f       	sbci	r31, 0xFF	; 255
     294:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb1;}
        else {OCR1A=G1;}
	break;
      } 
      break;
    case 2: switch (note) {
     298:	fc 01       	movw	r30, r24
     29a:	e1 54       	subi	r30, 0x41	; 65
     29c:	f1 09       	sbc	r31, r1
     29e:	e7 30       	cpi	r30, 0x07	; 7
     2a0:	f1 05       	cpc	r31, r1
     2a2:	38 f6       	brcc	.-114    	; 0x232 <play_note+0x24>
     2a4:	e5 59       	subi	r30, 0x95	; 149
     2a6:	ff 4f       	sbci	r31, 0xFF	; 255
     2a8:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb2;}
        else {OCR1A=G2;}
	break;
      } 
      break;
    case 3: switch (note) {
     2ac:	fc 01       	movw	r30, r24
     2ae:	e1 54       	subi	r30, 0x41	; 65
     2b0:	f1 09       	sbc	r31, r1
     2b2:	e7 30       	cpi	r30, 0x07	; 7
     2b4:	f1 05       	cpc	r31, r1
     2b6:	08 f0       	brcs	.+2      	; 0x2ba <play_note+0xac>
     2b8:	bc cf       	rjmp	.-136    	; 0x232 <play_note+0x24>
     2ba:	ee 58       	subi	r30, 0x8E	; 142
     2bc:	ff 4f       	sbci	r31, 0xFF	; 255
     2be:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb3;}
        else {OCR1A=G3;}
	break;
      } 
      break;
    case 4: switch (note) {
     2c2:	fc 01       	movw	r30, r24
     2c4:	e1 54       	subi	r30, 0x41	; 65
     2c6:	f1 09       	sbc	r31, r1
     2c8:	e7 30       	cpi	r30, 0x07	; 7
     2ca:	f1 05       	cpc	r31, r1
     2cc:	08 f0       	brcs	.+2      	; 0x2d0 <play_note+0xc2>
     2ce:	b1 cf       	rjmp	.-158    	; 0x232 <play_note+0x24>
     2d0:	e7 58       	subi	r30, 0x87	; 135
     2d2:	ff 4f       	sbci	r31, 0xFF	; 255
     2d4:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
	break;
      } 
      break;
    case 5: switch (note) {
     2d8:	fc 01       	movw	r30, r24
     2da:	e1 54       	subi	r30, 0x41	; 65
     2dc:	f1 09       	sbc	r31, r1
     2de:	e7 30       	cpi	r30, 0x07	; 7
     2e0:	f1 05       	cpc	r31, r1
     2e2:	08 f0       	brcs	.+2      	; 0x2e6 <play_note+0xd8>
     2e4:	a6 cf       	rjmp	.-180    	; 0x232 <play_note+0x24>
     2e6:	e0 58       	subi	r30, 0x80	; 128
     2e8:	ff 4f       	sbci	r31, 0xFF	; 255
     2ea:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb5;}
        else {OCR1A=G5;}
	break;
      } 
      break;
    case 6: switch (note) {
     2ee:	fc 01       	movw	r30, r24
     2f0:	e1 54       	subi	r30, 0x41	; 65
     2f2:	f1 09       	sbc	r31, r1
     2f4:	e7 30       	cpi	r30, 0x07	; 7
     2f6:	f1 05       	cpc	r31, r1
     2f8:	08 f0       	brcs	.+2      	; 0x2fc <play_note+0xee>
     2fa:	9b cf       	rjmp	.-202    	; 0x232 <play_note+0x24>
     2fc:	e9 57       	subi	r30, 0x79	; 121
     2fe:	ff 4f       	sbci	r31, 0xFF	; 255
     300:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__tablejump2__>
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
     304:	88 e5       	ldi	r24, 0x58	; 88
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	9b bd       	out	0x2b, r25	; 43
     30a:	8a bd       	out	0x2a, r24	; 42
	break;
     30c:	08 95       	ret
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
     30e:	66 23       	and	r22, r22
     310:	09 f4       	brne	.+2      	; 0x314 <play_note+0x106>
     312:	0f c2       	rjmp	.+1054   	; 0x732 <play_note+0x524>
     314:	83 e6       	ldi	r24, 0x63	; 99
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	9b bd       	out	0x2b, r25	; 43
     31a:	8a bd       	out	0x2a, r24	; 42
     31c:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
     31e:	66 23       	and	r22, r22
     320:	09 f4       	brne	.+2      	; 0x324 <play_note+0x116>
     322:	11 c2       	rjmp	.+1058   	; 0x746 <play_note+0x538>
     324:	8f e6       	ldi	r24, 0x6F	; 111
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	9b bd       	out	0x2b, r25	; 43
     32a:	8a bd       	out	0x2a, r24	; 42
     32c:	08 95       	ret
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
     32e:	86 e7       	ldi	r24, 0x76	; 118
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	9b bd       	out	0x2b, r25	; 43
     334:	8a bd       	out	0x2a, r24	; 42
	break;
     336:	08 95       	ret
        else {OCR1A=G5;}
	break;
      } 
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
     338:	66 23       	and	r22, r22
     33a:	09 f4       	brne	.+2      	; 0x33e <play_note+0x130>
     33c:	ff c1       	rjmp	.+1022   	; 0x73c <play_note+0x52e>
     33e:	8a e4       	ldi	r24, 0x4A	; 74
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	9b bd       	out	0x2b, r25	; 43
     344:	8a bd       	out	0x2a, r24	; 42
     346:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
	break;
      case 'G': if(flat){OCR1A=Gb6;}
     348:	66 23       	and	r22, r22
     34a:	09 f4       	brne	.+2      	; 0x34e <play_note+0x140>
     34c:	01 c2       	rjmp	.+1026   	; 0x750 <play_note+0x542>
     34e:	83 e5       	ldi	r24, 0x53	; 83
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	9b bd       	out	0x2b, r25	; 43
     354:	8a bd       	out	0x2a, r24	; 42
     356:	08 95       	ret
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
     358:	66 23       	and	r22, r22
     35a:	09 f4       	brne	.+2      	; 0x35e <play_note+0x150>
     35c:	b8 c1       	rjmp	.+880    	; 0x6ce <play_note+0x4c0>
     35e:	82 e4       	ldi	r24, 0x42	; 66
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	9b bd       	out	0x2b, r25	; 43
     364:	8a bd       	out	0x2a, r24	; 42
     366:	08 95       	ret
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
     368:	81 eb       	ldi	r24, 0xB1	; 177
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	9b bd       	out	0x2b, r25	; 43
     36e:	8a bd       	out	0x2a, r24	; 42
	break;
     370:	08 95       	ret
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
     372:	66 23       	and	r22, r22
     374:	09 f4       	brne	.+2      	; 0x378 <play_note+0x16a>
     376:	d3 c1       	rjmp	.+934    	; 0x71e <play_note+0x510>
     378:	85 e8       	ldi	r24, 0x85	; 133
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	9b bd       	out	0x2b, r25	; 43
     37e:	8a bd       	out	0x2a, r24	; 42
     380:	08 95       	ret
        else {OCR1A=G4;}
	break;
      } 
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
     382:	66 23       	and	r22, r22
     384:	09 f4       	brne	.+2      	; 0x388 <play_note+0x17a>
     386:	c1 c1       	rjmp	.+898    	; 0x70a <play_note+0x4fc>
     388:	85 e9       	ldi	r24, 0x95	; 149
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	9b bd       	out	0x2b, r25	; 43
     38e:	8a bd       	out	0x2a, r24	; 42
     390:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
	break;
      case 'G': if(flat){OCR1A=Gb5;}
     392:	66 23       	and	r22, r22
     394:	09 f4       	brne	.+2      	; 0x398 <play_note+0x18a>
     396:	be c1       	rjmp	.+892    	; 0x714 <play_note+0x506>
     398:	87 ea       	ldi	r24, 0xA7	; 167
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	9b bd       	out	0x2b, r25	; 43
     39e:	8a bd       	out	0x2a, r24	; 42
     3a0:	08 95       	ret
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
     3a2:	84 e6       	ldi	r24, 0x64	; 100
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	9b bd       	out	0x2b, r25	; 43
     3a8:	8a bd       	out	0x2a, r24	; 42
	break;
     3aa:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
	break;
      case 'D': if(flat){OCR1A=Db5;}
     3ac:	66 23       	and	r22, r22
     3ae:	09 f4       	brne	.+2      	; 0x3b2 <play_note+0x1a4>
     3b0:	bb c1       	rjmp	.+886    	; 0x728 <play_note+0x51a>
     3b2:	80 ee       	ldi	r24, 0xE0	; 224
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	9b bd       	out	0x2b, r25	; 43
     3b8:	8a bd       	out	0x2a, r24	; 42
     3ba:	08 95       	ret
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
     3bc:	8d ee       	ldi	r24, 0xED	; 237
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	9b bd       	out	0x2b, r25	; 43
     3c2:	8a bd       	out	0x2a, r24	; 42
	break;
     3c4:	08 95       	ret
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
     3c6:	66 23       	and	r22, r22
     3c8:	09 f4       	brne	.+2      	; 0x3cc <play_note+0x1be>
     3ca:	8b c1       	rjmp	.+790    	; 0x6e2 <play_note+0x4d4>
     3cc:	87 ec       	ldi	r24, 0xC7	; 199
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	9b bd       	out	0x2b, r25	; 43
     3d2:	8a bd       	out	0x2a, r24	; 42
     3d4:	08 95       	ret
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
     3d6:	66 23       	and	r22, r22
     3d8:	09 f4       	brne	.+2      	; 0x3dc <play_note+0x1ce>
     3da:	74 c1       	rjmp	.+744    	; 0x6c4 <play_note+0x4b6>
     3dc:	80 e9       	ldi	r24, 0x90	; 144
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	9b bd       	out	0x2b, r25	; 43
     3e2:	8a bd       	out	0x2a, r24	; 42
     3e4:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
     3e6:	66 23       	and	r22, r22
     3e8:	09 f4       	brne	.+2      	; 0x3ec <play_note+0x1de>
     3ea:	cb c1       	rjmp	.+918    	; 0x782 <play_note+0x574>
     3ec:	84 e8       	ldi	r24, 0x84	; 132
     3ee:	93 e0       	ldi	r25, 0x03	; 3
     3f0:	9b bd       	out	0x2b, r25	; 43
     3f2:	8a bd       	out	0x2a, r24	; 42
     3f4:	08 95       	ret
        else {OCR1A=G3;}
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
     3f6:	66 23       	and	r22, r22
     3f8:	09 f4       	brne	.+2      	; 0x3fc <play_note+0x1ee>
     3fa:	af c1       	rjmp	.+862    	; 0x75a <play_note+0x54c>
     3fc:	8b e2       	ldi	r24, 0x2B	; 43
     3fe:	91 e0       	ldi	r25, 0x01	; 1
     400:	9b bd       	out	0x2b, r25	; 43
     402:	8a bd       	out	0x2a, r24	; 42
     404:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
	break;
      case 'G': if(flat){OCR1A=Gb3;}
     406:	66 23       	and	r22, r22
     408:	09 f4       	brne	.+2      	; 0x40c <play_note+0x1fe>
     40a:	b1 c1       	rjmp	.+866    	; 0x76e <play_note+0x560>
     40c:	82 ea       	ldi	r24, 0xA2	; 162
     40e:	92 e0       	ldi	r25, 0x02	; 2
     410:	9b bd       	out	0x2b, r25	; 43
     412:	8a bd       	out	0x2a, r24	; 42
     414:	08 95       	ret
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
     416:	8c ed       	ldi	r24, 0xDC	; 220
     418:	91 e0       	ldi	r25, 0x01	; 1
     41a:	9b bd       	out	0x2b, r25	; 43
     41c:	8a bd       	out	0x2a, r24	; 42
	break;
     41e:	08 95       	ret
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
     420:	66 23       	and	r22, r22
     422:	09 f4       	brne	.+2      	; 0x426 <play_note+0x218>
     424:	59 c1       	rjmp	.+690    	; 0x6d8 <play_note+0x4ca>
     426:	87 e1       	ldi	r24, 0x17	; 23
     428:	92 e0       	ldi	r25, 0x02	; 2
     42a:	9b bd       	out	0x2b, r25	; 43
     42c:	8a bd       	out	0x2a, r24	; 42
     42e:	08 95       	ret
        else {OCR1A=G2;}
	break;
      } 
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
     430:	66 23       	and	r22, r22
     432:	09 f4       	brne	.+2      	; 0x436 <play_note+0x228>
     434:	b0 c1       	rjmp	.+864    	; 0x796 <play_note+0x588>
     436:	88 e5       	ldi	r24, 0x58	; 88
     438:	92 e0       	ldi	r25, 0x02	; 2
     43a:	9b bd       	out	0x2b, r25	; 43
     43c:	8a bd       	out	0x2a, r24	; 42
     43e:	08 95       	ret
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
     440:	8a ec       	ldi	r24, 0xCA	; 202
     442:	92 e0       	ldi	r25, 0x02	; 2
     444:	9b bd       	out	0x2b, r25	; 43
     446:	8a bd       	out	0x2a, r24	; 42
	break;
     448:	08 95       	ret
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
     44a:	66 23       	and	r22, r22
     44c:	09 f4       	brne	.+2      	; 0x450 <play_note+0x242>
     44e:	35 c1       	rjmp	.+618    	; 0x6ba <play_note+0x4ac>
     450:	86 e4       	ldi	r24, 0x46	; 70
     452:	96 e0       	ldi	r25, 0x06	; 6
     454:	9b bd       	out	0x2b, r25	; 43
     456:	8a bd       	out	0x2a, r24	; 42
     458:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
     45a:	66 23       	and	r22, r22
     45c:	09 f4       	brne	.+2      	; 0x460 <play_note+0x252>
     45e:	82 c1       	rjmp	.+772    	; 0x764 <play_note+0x556>
     460:	8a e0       	ldi	r24, 0x0A	; 10
     462:	97 e0       	ldi	r25, 0x07	; 7
     464:	9b bd       	out	0x2b, r25	; 43
     466:	8a bd       	out	0x2a, r24	; 42
     468:	08 95       	ret
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
     46a:	86 e9       	ldi	r24, 0x96	; 150
     46c:	95 e0       	ldi	r25, 0x05	; 5
     46e:	9b bd       	out	0x2b, r25	; 43
     470:	8a bd       	out	0x2a, r24	; 42
	break;
     472:	08 95       	ret
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
     474:	8a eb       	ldi	r24, 0xBA	; 186
     476:	93 e0       	ldi	r25, 0x03	; 3
     478:	9b bd       	out	0x2b, r25	; 43
     47a:	8a bd       	out	0x2a, r24	; 42
	break;
     47c:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
     47e:	66 23       	and	r22, r22
     480:	09 f4       	brne	.+2      	; 0x484 <play_note+0x276>
     482:	7a c1       	rjmp	.+756    	; 0x778 <play_note+0x56a>
     484:	81 ec       	ldi	r24, 0xC1	; 193
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	9b bd       	out	0x2b, r25	; 43
     48a:	8a bd       	out	0x2a, r24	; 42
     48c:	08 95       	ret
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
     48e:	66 23       	and	r22, r22
     490:	09 f4       	brne	.+2      	; 0x494 <play_note+0x286>
     492:	7c c1       	rjmp	.+760    	; 0x78c <play_note+0x57e>
     494:	8b e0       	ldi	r24, 0x0B	; 11
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	9b bd       	out	0x2b, r25	; 43
     49a:	8a bd       	out	0x2a, r24	; 42
     49c:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
     49e:	66 23       	and	r22, r22
     4a0:	09 f4       	brne	.+2      	; 0x4a4 <play_note+0x296>
     4a2:	7e c1       	rjmp	.+764    	; 0x7a0 <play_note+0x592>
     4a4:	80 e5       	ldi	r24, 0x50	; 80
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	9b bd       	out	0x2b, r25	; 43
     4aa:	8a bd       	out	0x2a, r24	; 42
     4ac:	08 95       	ret
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
     4ae:	66 23       	and	r22, r22
     4b0:	09 f4       	brne	.+2      	; 0x4b4 <play_note+0x2a6>
     4b2:	ad c1       	rjmp	.+858    	; 0x80e <play_note+0x600>
     4b4:	82 e2       	ldi	r24, 0x22	; 34
     4b6:	93 e0       	ldi	r25, 0x03	; 3
     4b8:	9b bd       	out	0x2b, r25	; 43
     4ba:	8a bd       	out	0x2a, r24	; 42
     4bc:	08 95       	ret
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
     4be:	86 e7       	ldi	r24, 0x76	; 118
     4c0:	97 e0       	ldi	r25, 0x07	; 7
     4c2:	9b bd       	out	0x2b, r25	; 43
     4c4:	8a bd       	out	0x2a, r24	; 42
	break;
     4c6:	08 95       	ret
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
     4c8:	66 23       	and	r22, r22
     4ca:	09 f4       	brne	.+2      	; 0x4ce <play_note+0x2c0>
     4cc:	0f c1       	rjmp	.+542    	; 0x6ec <play_note+0x4de>
     4ce:	8e ec       	ldi	r24, 0xCE	; 206
     4d0:	92 e1       	ldi	r25, 0x12	; 18
     4d2:	9b bd       	out	0x2b, r25	; 43
     4d4:	8a bd       	out	0x2a, r24	; 42
     4d6:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
	break;
      case 'G': if(flat){OCR1A=Gb0;}
     4d8:	66 23       	and	r22, r22
     4da:	09 f4       	brne	.+2      	; 0x4de <play_note+0x2d0>
     4dc:	7a c1       	rjmp	.+756    	; 0x7d2 <play_note+0x5c4>
     4de:	8d e1       	ldi	r24, 0x1D	; 29
     4e0:	95 e1       	ldi	r25, 0x15	; 21
     4e2:	9b bd       	out	0x2b, r25	; 43
     4e4:	8a bd       	out	0x2a, r24	; 42
     4e6:	08 95       	ret
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
     4e8:	66 23       	and	r22, r22
     4ea:	09 f4       	brne	.+2      	; 0x4ee <play_note+0x2e0>
     4ec:	dc c0       	rjmp	.+440    	; 0x6a6 <play_note+0x498>
     4ee:	80 e6       	ldi	r24, 0x60	; 96
     4f0:	98 e0       	ldi	r25, 0x08	; 8
     4f2:	9b bd       	out	0x2b, r25	; 43
     4f4:	8a bd       	out	0x2a, r24	; 42
     4f6:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
	break;
      case 'G': if(flat){OCR1A=Gb8;}
     4f8:	66 23       	and	r22, r22
     4fa:	09 f4       	brne	.+2      	; 0x4fe <play_note+0x2f0>
     4fc:	92 c1       	rjmp	.+804    	; 0x822 <play_note+0x614>
     4fe:	80 e1       	ldi	r24, 0x10	; 16
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	9b bd       	out	0x2b, r25	; 43
     504:	8a bd       	out	0x2a, r24	; 42
     506:	08 95       	ret
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
     508:	8e e2       	ldi	r24, 0x2E	; 46
     50a:	9b e0       	ldi	r25, 0x0B	; 11
     50c:	9b bd       	out	0x2b, r25	; 43
     50e:	8a bd       	out	0x2a, r24	; 42
	break;
     510:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
     512:	66 23       	and	r22, r22
     514:	09 f4       	brne	.+2      	; 0x518 <play_note+0x30a>
     516:	49 c1       	rjmp	.+658    	; 0x7aa <play_note+0x59c>
     518:	8b e1       	ldi	r24, 0x1B	; 27
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	9b bd       	out	0x2b, r25	; 43
     51e:	8a bd       	out	0x2a, r24	; 42
     520:	08 95       	ret
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
     522:	8c e1       	ldi	r24, 0x1C	; 28
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	9b bd       	out	0x2b, r25	; 43
     528:	8a bd       	out	0x2a, r24	; 42
	break;
     52a:	08 95       	ret
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
     52c:	66 23       	and	r22, r22
     52e:	09 f4       	brne	.+2      	; 0x532 <play_note+0x324>
     530:	41 c1       	rjmp	.+642    	; 0x7b4 <play_note+0x5a6>
     532:	87 e0       	ldi	r24, 0x07	; 7
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	9b bd       	out	0x2b, r25	; 43
     538:	8a bd       	out	0x2a, r24	; 42
     53a:	08 95       	ret
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
     53c:	66 23       	and	r22, r22
     53e:	09 f4       	brne	.+2      	; 0x542 <play_note+0x334>
     540:	da c0       	rjmp	.+436    	; 0x6f6 <play_note+0x4e8>
     542:	8b e0       	ldi	r24, 0x0B	; 11
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	9b bd       	out	0x2b, r25	; 43
     548:	8a bd       	out	0x2a, r24	; 42
     54a:	08 95       	ret
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
     54c:	82 e1       	ldi	r24, 0x12	; 18
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	9b bd       	out	0x2b, r25	; 43
     552:	8a bd       	out	0x2a, r24	; 42
	break;
     554:	08 95       	ret
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
     556:	66 23       	and	r22, r22
     558:	09 f4       	brne	.+2      	; 0x55c <play_note+0x34e>
     55a:	9b c0       	rjmp	.+310    	; 0x692 <play_note+0x484>
     55c:	89 e1       	ldi	r24, 0x19	; 25
     55e:	99 e1       	ldi	r25, 0x19	; 25
     560:	9b bd       	out	0x2b, r25	; 43
     562:	8a bd       	out	0x2a, r24	; 42
     564:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
     566:	66 23       	and	r22, r22
     568:	09 f4       	brne	.+2      	; 0x56c <play_note+0x35e>
     56a:	29 c1       	rjmp	.+594    	; 0x7be <play_note+0x5b0>
     56c:	80 e3       	ldi	r24, 0x30	; 48
     56e:	9c e1       	ldi	r25, 0x1C	; 28
     570:	9b bd       	out	0x2b, r25	; 43
     572:	8a bd       	out	0x2a, r24	; 42
     574:	08 95       	ret
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
     576:	8c ed       	ldi	r24, 0xDC	; 220
     578:	9d e1       	ldi	r25, 0x1D	; 29
     57a:	9b bd       	out	0x2b, r25	; 43
     57c:	8a bd       	out	0x2a, r24	; 42
	break;
     57e:	08 95       	ret
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
     580:	8a e3       	ldi	r24, 0x3A	; 58
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	9b bd       	out	0x2b, r25	; 43
     586:	8a bd       	out	0x2a, r24	; 42
	break;
     588:	08 95       	ret
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
     58a:	66 23       	and	r22, r22
     58c:	09 f4       	brne	.+2      	; 0x590 <play_note+0x382>
     58e:	35 c1       	rjmp	.+618    	; 0x7fa <play_note+0x5ec>
     590:	80 e2       	ldi	r24, 0x20	; 32
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	9b bd       	out	0x2b, r25	; 43
     596:	8a bd       	out	0x2a, r24	; 42
     598:	08 95       	ret
        else {OCR1A=G6;}
	break;
      } 
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
     59a:	66 23       	and	r22, r22
     59c:	09 f4       	brne	.+2      	; 0x5a0 <play_note+0x392>
     59e:	32 c1       	rjmp	.+612    	; 0x804 <play_note+0x5f6>
     5a0:	84 e2       	ldi	r24, 0x24	; 36
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	9b bd       	out	0x2b, r25	; 43
     5a6:	8a bd       	out	0x2a, r24	; 42
     5a8:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb7;}
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
	break;
      case 'G': if(flat){OCR1A=Gb7;}
     5aa:	66 23       	and	r22, r22
     5ac:	09 f4       	brne	.+2      	; 0x5b0 <play_note+0x3a2>
     5ae:	76 c0       	rjmp	.+236    	; 0x69c <play_note+0x48e>
     5b0:	89 e2       	ldi	r24, 0x29	; 41
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	9b bd       	out	0x2b, r25	; 43
     5b6:	8a bd       	out	0x2a, r24	; 42
     5b8:	08 95       	ret
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
	break;
      case 'E': if(flat){OCR1A=Eb7;}
     5ba:	66 23       	and	r22, r22
     5bc:	09 f4       	brne	.+2      	; 0x5c0 <play_note+0x3b2>
     5be:	78 c0       	rjmp	.+240    	; 0x6b0 <play_note+0x4a2>
     5c0:	81 e3       	ldi	r24, 0x31	; 49
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	9b bd       	out	0x2b, r25	; 43
     5c6:	8a bd       	out	0x2a, r24	; 42
     5c8:	08 95       	ret
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
     5ca:	8b e2       	ldi	r24, 0x2B	; 43
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	9b bd       	out	0x2b, r25	; 43
     5d0:	8a bd       	out	0x2a, r24	; 42
	break;
     5d2:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
     5d4:	66 23       	and	r22, r22
     5d6:	09 f4       	brne	.+2      	; 0x5da <play_note+0x3cc>
     5d8:	93 c0       	rjmp	.+294    	; 0x700 <play_note+0x4f2>
     5da:	87 e3       	ldi	r24, 0x37	; 55
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	9b bd       	out	0x2b, r25	; 43
     5e0:	8a bd       	out	0x2a, r24	; 42
     5e2:	08 95       	ret
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
     5e4:	66 23       	and	r22, r22
     5e6:	09 f4       	brne	.+2      	; 0x5ea <play_note+0x3dc>
     5e8:	4f c0       	rjmp	.+158    	; 0x688 <play_note+0x47a>
     5ea:	88 e1       	ldi	r24, 0x18	; 24
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	9b bd       	out	0x2b, r25	; 43
     5f0:	8a bd       	out	0x2a, r24	; 42
     5f2:	08 95       	ret
        else {OCR1A=G1;}
	break;
      } 
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
     5f4:	66 23       	and	r22, r22
     5f6:	09 f4       	brne	.+2      	; 0x5fa <play_note+0x3ec>
     5f8:	f6 c0       	rjmp	.+492    	; 0x7e6 <play_note+0x5d8>
     5fa:	82 eb       	ldi	r24, 0xB2	; 178
     5fc:	94 e0       	ldi	r25, 0x04	; 4
     5fe:	9b bd       	out	0x2b, r25	; 43
     600:	8a bd       	out	0x2a, r24	; 42
     602:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
	break;
      case 'G': if(flat){OCR1A=Gb1;}
     604:	66 23       	and	r22, r22
     606:	09 f4       	brne	.+2      	; 0x60a <play_note+0x3fc>
     608:	16 c1       	rjmp	.+556    	; 0x836 <play_note+0x628>
     60a:	8d e8       	ldi	r24, 0x8D	; 141
     60c:	9a e0       	ldi	r25, 0x0A	; 10
     60e:	9b bd       	out	0x2b, r25	; 43
     610:	8a bd       	out	0x2a, r24	; 42
     612:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
     614:	66 23       	and	r22, r22
     616:	09 f4       	brne	.+2      	; 0x61a <play_note+0x40c>
     618:	d7 c0       	rjmp	.+430    	; 0x7c8 <play_note+0x5ba>
     61a:	86 e1       	ldi	r24, 0x16	; 22
     61c:	9e e0       	ldi	r25, 0x0E	; 14
     61e:	9b bd       	out	0x2b, r25	; 43
     620:	8a bd       	out	0x2a, r24	; 42
     622:	08 95       	ret
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
     624:	66 23       	and	r22, r22
     626:	09 f4       	brne	.+2      	; 0x62a <play_note+0x41c>
     628:	f7 c0       	rjmp	.+494    	; 0x818 <play_note+0x60a>
     62a:	80 ec       	ldi	r24, 0xC0	; 192
     62c:	90 e1       	ldi	r25, 0x10	; 16
     62e:	9b bd       	out	0x2b, r25	; 43
     630:	8a bd       	out	0x2a, r24	; 42
     632:	08 95       	ret
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
     634:	66 23       	and	r22, r22
     636:	09 f4       	brne	.+2      	; 0x63a <play_note+0x42c>
     638:	d1 c0       	rjmp	.+418    	; 0x7dc <play_note+0x5ce>
     63a:	8f e2       	ldi	r24, 0x2F	; 47
     63c:	94 e0       	ldi	r25, 0x04	; 4
     63e:	9b bd       	out	0x2b, r25	; 43
     640:	8a bd       	out	0x2a, r24	; 42
     642:	08 95       	ret
        else {OCR1A=G0;}
	break;
      } 
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
     644:	66 23       	and	r22, r22
     646:	09 f4       	brne	.+2      	; 0x64a <play_note+0x43c>
     648:	f1 c0       	rjmp	.+482    	; 0x82c <play_note+0x61e>
     64a:	87 e6       	ldi	r24, 0x67	; 103
     64c:	99 e0       	ldi	r25, 0x09	; 9
     64e:	9b bd       	out	0x2b, r25	; 43
     650:	8a bd       	out	0x2a, r24	; 42
     652:	08 95       	ret
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
     654:	66 23       	and	r22, r22
     656:	09 f4       	brne	.+2      	; 0x65a <play_note+0x44c>
     658:	cb c0       	rjmp	.+406    	; 0x7f0 <play_note+0x5e2>
     65a:	8d e8       	ldi	r24, 0x8D	; 141
     65c:	9c e0       	ldi	r25, 0x0C	; 12
     65e:	9b bd       	out	0x2b, r25	; 43
     660:	8a bd       	out	0x2a, r24	; 42
     662:	08 95       	ret
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
     664:	8d e5       	ldi	r24, 0x5D	; 93
     666:	96 e1       	ldi	r25, 0x16	; 22
     668:	9b bd       	out	0x2b, r25	; 43
     66a:	8a bd       	out	0x2a, r24	; 42
	break;
     66c:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
	break;
      case 'G': if(flat){OCR1A=Gb2;}
     66e:	66 23       	and	r22, r22
     670:	09 f4       	brne	.+2      	; 0x674 <play_note+0x466>
     672:	e6 c0       	rjmp	.+460    	; 0x840 <play_note+0x632>
     674:	86 e4       	ldi	r24, 0x46	; 70
     676:	95 e0       	ldi	r25, 0x05	; 5
     678:	9b bd       	out	0x2b, r25	; 43
     67a:	8a bd       	out	0x2a, r24	; 42
     67c:	08 95       	ret
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
     67e:	8d ee       	ldi	r24, 0xED	; 237
     680:	9e e0       	ldi	r25, 0x0E	; 14
     682:	9b bd       	out	0x2b, r25	; 43
     684:	8a bd       	out	0x2a, r24	; 42
	break;
     686:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
     688:	85 e1       	ldi	r24, 0x15	; 21
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	9b bd       	out	0x2b, r25	; 43
     68e:	8a bd       	out	0x2a, r24	; 42
     690:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
     692:	82 eb       	ldi	r24, 0xB2	; 178
     694:	97 e1       	ldi	r25, 0x17	; 23
     696:	9b bd       	out	0x2b, r25	; 43
     698:	8a bd       	out	0x2a, r24	; 42
     69a:	08 95       	ret
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
	break;
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
     69c:	86 e2       	ldi	r24, 0x26	; 38
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	9b bd       	out	0x2b, r25	; 43
     6a2:	8a bd       	out	0x2a, r24	; 42
     6a4:	08 95       	ret
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
     6a6:	87 ee       	ldi	r24, 0xE7	; 231
     6a8:	97 e0       	ldi	r25, 0x07	; 7
     6aa:	9b bd       	out	0x2b, r25	; 43
     6ac:	8a bd       	out	0x2a, r24	; 42
     6ae:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
	break;
      case 'E': if(flat){OCR1A=Eb7;}
        else {OCR1A=E7;}
     6b0:	8e e2       	ldi	r24, 0x2E	; 46
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	9b bd       	out	0x2b, r25	; 43
     6b6:	8a bd       	out	0x2a, r24	; 42
     6b8:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
     6ba:	8b ee       	ldi	r24, 0xEB	; 235
     6bc:	95 e0       	ldi	r25, 0x05	; 5
     6be:	9b bd       	out	0x2b, r25	; 43
     6c0:	8a bd       	out	0x2a, r24	; 42
     6c2:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
     6c4:	8a e7       	ldi	r24, 0x7A	; 122
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	9b bd       	out	0x2b, r25	; 43
     6ca:	8a bd       	out	0x2a, r24	; 42
     6cc:	08 95       	ret
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
     6ce:	8e e3       	ldi	r24, 0x3E	; 62
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	9b bd       	out	0x2b, r25	; 43
     6d4:	8a bd       	out	0x2a, r24	; 42
     6d6:	08 95       	ret
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
     6d8:	89 ef       	ldi	r24, 0xF9	; 249
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	9b bd       	out	0x2b, r25	; 43
     6de:	8a bd       	out	0x2a, r24	; 42
     6e0:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
     6e2:	8c eb       	ldi	r24, 0xBC	; 188
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	9b bd       	out	0x2b, r25	; 43
     6e8:	8a bd       	out	0x2a, r24	; 42
     6ea:	08 95       	ret
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
     6ec:	80 ec       	ldi	r24, 0xC0	; 192
     6ee:	91 e1       	ldi	r25, 0x11	; 17
     6f0:	9b bd       	out	0x2b, r25	; 43
     6f2:	8a bd       	out	0x2a, r24	; 42
     6f4:	08 95       	ret
	break;
      } 
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
     6f6:	89 e0       	ldi	r24, 0x09	; 9
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	9b bd       	out	0x2b, r25	; 43
     6fc:	8a bd       	out	0x2a, r24	; 42
     6fe:	08 95       	ret
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
     700:	84 e3       	ldi	r24, 0x34	; 52
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	9b bd       	out	0x2b, r25	; 43
     706:	8a bd       	out	0x2a, r24	; 42
     708:	08 95       	ret
	break;
      } 
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
     70a:	8d e8       	ldi	r24, 0x8D	; 141
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	9b bd       	out	0x2b, r25	; 43
     710:	8a bd       	out	0x2a, r24	; 42
     712:	08 95       	ret
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
	break;
      case 'G': if(flat){OCR1A=Gb5;}
        else {OCR1A=G5;}
     714:	8e e9       	ldi	r24, 0x9E	; 158
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	9b bd       	out	0x2b, r25	; 43
     71a:	8a bd       	out	0x2a, r24	; 42
     71c:	08 95       	ret
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
     71e:	8d e7       	ldi	r24, 0x7D	; 125
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	9b bd       	out	0x2b, r25	; 43
     724:	8a bd       	out	0x2a, r24	; 42
     726:	08 95       	ret
	break;
      case 'C': OCR1A=C5;
	break;
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
     728:	83 ed       	ldi	r24, 0xD3	; 211
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	9b bd       	out	0x2b, r25	; 43
     72e:	8a bd       	out	0x2a, r24	; 42
     730:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
     732:	8d e5       	ldi	r24, 0x5D	; 93
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	9b bd       	out	0x2b, r25	; 43
     738:	8a bd       	out	0x2a, r24	; 42
     73a:	08 95       	ret
	break;
      } 
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
     73c:	86 e4       	ldi	r24, 0x46	; 70
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	9b bd       	out	0x2b, r25	; 43
     742:	8a bd       	out	0x2a, r24	; 42
     744:	08 95       	ret
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
     746:	89 e6       	ldi	r24, 0x69	; 105
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	9b bd       	out	0x2b, r25	; 43
     74c:	8a bd       	out	0x2a, r24	; 42
     74e:	08 95       	ret
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
	break;
      case 'G': if(flat){OCR1A=Gb6;}
        else {OCR1A=G6;}
     750:	8e e4       	ldi	r24, 0x4E	; 78
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	9b bd       	out	0x2b, r25	; 43
     756:	8a bd       	out	0x2a, r24	; 42
     758:	08 95       	ret
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
     75a:	8b e1       	ldi	r24, 0x1B	; 27
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	9b bd       	out	0x2b, r25	; 43
     760:	8a bd       	out	0x2a, r24	; 42
     762:	08 95       	ret
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
     764:	85 ea       	ldi	r24, 0xA5	; 165
     766:	96 e0       	ldi	r25, 0x06	; 6
     768:	9b bd       	out	0x2b, r25	; 43
     76a:	8a bd       	out	0x2a, r24	; 42
     76c:	08 95       	ret
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
	break;
      case 'G': if(flat){OCR1A=Gb3;}
        else {OCR1A=G3;}
     76e:	8c e7       	ldi	r24, 0x7C	; 124
     770:	92 e0       	ldi	r25, 0x02	; 2
     772:	9b bd       	out	0x2b, r25	; 43
     774:	8a bd       	out	0x2a, r24	; 42
     776:	08 95       	ret
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
     778:	88 ea       	ldi	r24, 0xA8	; 168
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	9b bd       	out	0x2b, r25	; 43
     77e:	8a bd       	out	0x2a, r24	; 42
     780:	08 95       	ret
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
     782:	82 e5       	ldi	r24, 0x52	; 82
     784:	93 e0       	ldi	r25, 0x03	; 3
     786:	9b bd       	out	0x2b, r25	; 43
     788:	8a bd       	out	0x2a, r24	; 42
     78a:	08 95       	ret
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
     78c:	8c ef       	ldi	r24, 0xFC	; 252
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	9b bd       	out	0x2b, r25	; 43
     792:	8a bd       	out	0x2a, r24	; 42
     794:	08 95       	ret
	break;
      } 
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
     796:	87 e3       	ldi	r24, 0x37	; 55
     798:	92 e0       	ldi	r25, 0x02	; 2
     79a:	9b bd       	out	0x2b, r25	; 43
     79c:	8a bd       	out	0x2a, r24	; 42
     79e:	08 95       	ret
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
     7a0:	8d e3       	ldi	r24, 0x3D	; 61
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	9b bd       	out	0x2b, r25	; 43
     7a6:	8a bd       	out	0x2a, r24	; 42
     7a8:	08 95       	ret
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
     7aa:	89 e1       	ldi	r24, 0x19	; 25
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	9b bd       	out	0x2b, r25	; 43
     7b0:	8a bd       	out	0x2a, r24	; 42
     7b2:	08 95       	ret
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
     7b4:	85 e0       	ldi	r24, 0x05	; 5
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	9b bd       	out	0x2b, r25	; 43
     7ba:	8a bd       	out	0x2a, r24	; 42
     7bc:	08 95       	ret
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
     7be:	8a e9       	ldi	r24, 0x9A	; 154
     7c0:	9a e1       	ldi	r25, 0x1A	; 26
     7c2:	9b bd       	out	0x2b, r25	; 43
     7c4:	8a bd       	out	0x2a, r24	; 42
     7c6:	08 95       	ret
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
     7c8:	8c e4       	ldi	r24, 0x4C	; 76
     7ca:	9d e0       	ldi	r25, 0x0D	; 13
     7cc:	9b bd       	out	0x2b, r25	; 43
     7ce:	8a bd       	out	0x2a, r24	; 42
     7d0:	08 95       	ret
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
	break;
      case 'G': if(flat){OCR1A=Gb0;}
        else {OCR1A=G0;}
     7d2:	8d ee       	ldi	r24, 0xED	; 237
     7d4:	93 e1       	ldi	r25, 0x13	; 19
     7d6:	9b bd       	out	0x2b, r25	; 43
     7d8:	8a bd       	out	0x2a, r24	; 42
     7da:	08 95       	ret
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
     7dc:	83 ef       	ldi	r24, 0xF3	; 243
     7de:	93 e0       	ldi	r25, 0x03	; 3
     7e0:	9b bd       	out	0x2b, r25	; 43
     7e2:	8a bd       	out	0x2a, r24	; 42
     7e4:	08 95       	ret
	break;
      } 
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
     7e6:	8f e6       	ldi	r24, 0x6F	; 111
     7e8:	94 e0       	ldi	r25, 0x04	; 4
     7ea:	9b bd       	out	0x2b, r25	; 43
     7ec:	8a bd       	out	0x2a, r24	; 42
     7ee:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
     7f0:	88 ed       	ldi	r24, 0xD8	; 216
     7f2:	9b e0       	ldi	r25, 0x0B	; 11
     7f4:	9b bd       	out	0x2b, r25	; 43
     7f6:	8a bd       	out	0x2a, r24	; 42
     7f8:	08 95       	ret
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
     7fa:	8e e1       	ldi	r24, 0x1E	; 30
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	9b bd       	out	0x2b, r25	; 43
     800:	8a bd       	out	0x2a, r24	; 42
     802:	08 95       	ret
	break;
      } 
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
     804:	82 e2       	ldi	r24, 0x22	; 34
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	9b bd       	out	0x2b, r25	; 43
     80a:	8a bd       	out	0x2a, r24	; 42
     80c:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
     80e:	85 ef       	ldi	r24, 0xF5	; 245
     810:	92 e0       	ldi	r25, 0x02	; 2
     812:	9b bd       	out	0x2b, r25	; 43
     814:	8a bd       	out	0x2a, r24	; 42
     816:	08 95       	ret
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
     818:	80 ed       	ldi	r24, 0xD0	; 208
     81a:	9f e0       	ldi	r25, 0x0F	; 15
     81c:	9b bd       	out	0x2b, r25	; 43
     81e:	8a bd       	out	0x2a, r24	; 42
     820:	08 95       	ret
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
	break;
      case 'G': if(flat){OCR1A=Gb8;}
        else {OCR1A=G8;}
     822:	8d e0       	ldi	r24, 0x0D	; 13
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	9b bd       	out	0x2b, r25	; 43
     828:	8a bd       	out	0x2a, r24	; 42
     82a:	08 95       	ret
	break;
      } 
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
     82c:	8f ed       	ldi	r24, 0xDF	; 223
     82e:	98 e0       	ldi	r25, 0x08	; 8
     830:	9b bd       	out	0x2b, r25	; 43
     832:	8a bd       	out	0x2a, r24	; 42
     834:	08 95       	ret
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
	break;
      case 'G': if(flat){OCR1A=Gb1;}
        else {OCR1A=G1;}
     836:	86 ef       	ldi	r24, 0xF6	; 246
     838:	99 e0       	ldi	r25, 0x09	; 9
     83a:	9b bd       	out	0x2b, r25	; 43
     83c:	8a bd       	out	0x2a, r24	; 42
     83e:	08 95       	ret
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
	break;
      case 'G': if(flat){OCR1A=Gb2;}
        else {OCR1A=G2;}
     840:	8a ef       	ldi	r24, 0xFA	; 250
     842:	94 e0       	ldi	r25, 0x04	; 4
     844:	9b bd       	out	0x2b, r25	; 43
     846:	8a bd       	out	0x2a, r24	; 42
     848:	08 95       	ret

0000084a <song0>:
volatile uint16_t beat;
volatile uint16_t max_beat;
volatile uint8_t  notes;

void song0(uint16_t note) { //beaver fight song (Max and Kellen)
  switch (note) {
     84a:	86 34       	cpi	r24, 0x46	; 70
     84c:	91 05       	cpc	r25, r1
     84e:	20 f0       	brcs	.+8      	; 0x858 <song0+0xe>
       break;
    case 68: play_note('F', 0, 4, 24);
       break;
    case 69: play_rest(8);
       break;
    default: notes=-1;
     850:	8f ef       	ldi	r24, 0xFF	; 255
     852:	80 93 40 01 	sts	0x0140, r24
     856:	08 95       	ret
volatile uint16_t beat;
volatile uint16_t max_beat;
volatile uint8_t  notes;

void song0(uint16_t note) { //beaver fight song (Max and Kellen)
  switch (note) {
     858:	fc 01       	movw	r30, r24
     85a:	e2 57       	subi	r30, 0x72	; 114
     85c:	ff 4f       	sbci	r31, 0xFF	; 255
     85e:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__tablejump2__>
       break;
    case 55: play_note('A', 0, 4, 2);
       break;
    case 56: play_note('B', 1, 4, 6);
       break;
    case 57: play_note('A', 0, 4, 2);
     862:	22 e0       	ldi	r18, 0x02	; 2
     864:	44 e0       	ldi	r20, 0x04	; 4
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	81 e4       	ldi	r24, 0x41	; 65
     86a:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
       break;
    case 45: play_note('A', 0, 4, 6);
       break;
    case 46: play_note('A', 1, 4, 2);
       break;
    case 47: play_note('A', 0, 4, 6);
     86e:	26 e0       	ldi	r18, 0x06	; 6
     870:	44 e0       	ldi	r20, 0x04	; 4
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	81 e4       	ldi	r24, 0x41	; 65
     876:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
       break;
    case 48: play_note('A', 1, 4, 2);
     87a:	22 e0       	ldi	r18, 0x02	; 2
     87c:	44 e0       	ldi	r20, 0x04	; 4
     87e:	61 e0       	ldi	r22, 0x01	; 1
     880:	81 e4       	ldi	r24, 0x41	; 65
     882:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
       break;
    case 51: play_note('G', 1, 4, 8);
       break;
    case 52: play_note('G', 0, 4, 8);
       break;
    case 53: play_note('D', 0, 4, 8);
     886:	28 e0       	ldi	r18, 0x08	; 8
     888:	44 e0       	ldi	r20, 0x04	; 4
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	84 e4       	ldi	r24, 0x44	; 68
     88e:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
       break;
    case 48: play_note('A', 1, 4, 2);
       break;
    case 49: play_note('A', 0, 4, 16);
       break;
    case 50: play_note('F', 0, 4, 8);
     892:	28 e0       	ldi	r18, 0x08	; 8
     894:	44 e0       	ldi	r20, 0x04	; 4
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	86 e4       	ldi	r24, 0x46	; 70
     89a:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
       break;
    case 54: play_note('B', 1, 4, 6);
       break;
    case 55: play_note('A', 0, 4, 2);
       break;
    case 56: play_note('B', 1, 4, 6);
     89e:	26 e0       	ldi	r18, 0x06	; 6
     8a0:	44 e0       	ldi	r20, 0x04	; 4
     8a2:	61 e0       	ldi	r22, 0x01	; 1
     8a4:	82 e4       	ldi	r24, 0x42	; 66
     8a6:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
       break;
    case 42: play_note('E', 0, 4, 8);
       break;
    case 43: play_note('D', 0, 4, 8);
       break;
    case 44: play_note('C', 0, 4, 8);
     8aa:	28 e0       	ldi	r18, 0x08	; 8
     8ac:	44 e0       	ldi	r20, 0x04	; 4
     8ae:	60 e0       	ldi	r22, 0x00	; 0
     8b0:	83 e4       	ldi	r24, 0x43	; 67
     8b2:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
       break;
    case 64: play_note('C', 0, 5, 4);
       break;
    case 65: play_note('D', 0, 5, 4);
       break;
    case 66: play_note('A', 0, 4, 8);
     8b6:	28 e0       	ldi	r18, 0x08	; 8
     8b8:	44 e0       	ldi	r20, 0x04	; 4
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	81 e4       	ldi	r24, 0x41	; 65
     8be:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
       break;
    case 67: play_note('G', 0, 4, 8);
     8c2:	28 e0       	ldi	r18, 0x08	; 8
     8c4:	44 e0       	ldi	r20, 0x04	; 4
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	87 e4       	ldi	r24, 0x47	; 71
     8ca:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
       break;
    case 40: play_rest(8);
       break;
    case 41: play_note('F', 0, 4, 8);
       break;
    case 42: play_note('E', 0, 4, 8);
     8ce:	28 e0       	ldi	r18, 0x08	; 8
     8d0:	44 e0       	ldi	r20, 0x04	; 4
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	85 e4       	ldi	r24, 0x45	; 69
     8d6:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
      break;//phrase
    case 59: play_note('D', 0, 4, 16);
       break;
    case 60: play_note('D', 0, 5, 16);
       break;
    case 61: play_note('A', 0, 4, 16);
     8da:	20 e1       	ldi	r18, 0x10	; 16
     8dc:	44 e0       	ldi	r20, 0x04	; 4
     8de:	60 e0       	ldi	r22, 0x00	; 0
     8e0:	81 e4       	ldi	r24, 0x41	; 65
     8e2:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
       break;
    case 62: play_note('C', 0, 5, 16);
       break;
    case 63: play_note('B', 1, 4, 8);
       break;
    case 64: play_note('C', 0, 5, 4);
     8e6:	24 e0       	ldi	r18, 0x04	; 4
     8e8:	45 e0       	ldi	r20, 0x05	; 5
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	83 e4       	ldi	r24, 0x43	; 67
     8ee:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
       break;
    case 65: play_note('D', 0, 5, 4);
     8f2:	24 e0       	ldi	r18, 0x04	; 4
     8f4:	45 e0       	ldi	r20, 0x05	; 5
     8f6:	60 e0       	ldi	r22, 0x00	; 0
     8f8:	84 e4       	ldi	r24, 0x44	; 68
     8fa:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     8fe:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     900:	10 92 65 01 	sts	0x0165, r1
     904:	10 92 64 01 	sts	0x0164, r1
  max_beat = duration;
     908:	88 e0       	ldi	r24, 0x08	; 8
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	90 93 63 01 	sts	0x0163, r25
     910:	80 93 62 01 	sts	0x0162, r24
     914:	08 95       	ret
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     916:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     918:	10 92 65 01 	sts	0x0165, r1
     91c:	10 92 64 01 	sts	0x0164, r1
  max_beat = duration;
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	90 93 63 01 	sts	0x0163, r25
     928:	80 93 62 01 	sts	0x0162, r24
     92c:	08 95       	ret
       break;
    case 56: play_note('B', 1, 4, 6);
       break;
    case 57: play_note('A', 0, 4, 2);
       break;
    case 58: play_note('B', 1, 4, 16);
     92e:	20 e1       	ldi	r18, 0x10	; 16
     930:	44 e0       	ldi	r20, 0x04	; 4
     932:	61 e0       	ldi	r22, 0x01	; 1
     934:	82 e4       	ldi	r24, 0x42	; 66
     936:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
       break;
    case 61: play_note('A', 0, 4, 16);
       break;
    case 62: play_note('C', 0, 5, 16);
       break;
    case 63: play_note('B', 1, 4, 8);
     93a:	28 e0       	ldi	r18, 0x08	; 8
     93c:	44 e0       	ldi	r20, 0x04	; 4
     93e:	61 e0       	ldi	r22, 0x01	; 1
     940:	82 e4       	ldi	r24, 0x42	; 66
     942:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
       break;
    case 37: play_note('G', 0, 4, 8);
       break;
    case 38: play_note('A', 0, 4, 8);
       break;
    case 39: play_note('G', 0, 4, 24);
     946:	28 e1       	ldi	r18, 0x18	; 24
     948:	44 e0       	ldi	r20, 0x04	; 4
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	87 e4       	ldi	r24, 0x47	; 71
     94e:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
       break;
    case 58: play_note('B', 1, 4, 16);
      break;//phrase
    case 59: play_note('D', 0, 4, 16);
       break;
    case 60: play_note('D', 0, 5, 16);
     952:	20 e1       	ldi	r18, 0x10	; 16
     954:	45 e0       	ldi	r20, 0x05	; 5
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	84 e4       	ldi	r24, 0x44	; 68
     95a:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     95e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     960:	10 92 65 01 	sts	0x0165, r1
     964:	10 92 64 01 	sts	0x0164, r1
  max_beat = duration;
     968:	82 e0       	ldi	r24, 0x02	; 2
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	90 93 63 01 	sts	0x0163, r25
     970:	80 93 62 01 	sts	0x0162, r24
     974:	08 95       	ret
       break;
    case 34: play_note('D', 0, 5, 4);
       break;
    case 35: play_note('B', 0, 4, 8);
       break;
    case 36: play_note('A', 0, 4, 4);
     976:	24 e0       	ldi	r18, 0x04	; 4
     978:	44 e0       	ldi	r20, 0x04	; 4
     97a:	60 e0       	ldi	r22, 0x00	; 0
     97c:	81 e4       	ldi	r24, 0x41	; 65
     97e:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
       break;
    case 21: play_rest(1); //rest
       break;
    case 22: play_note('G', 1, 4, 4);
       break;
    case 23: play_note('G', 0, 4, 6);
     982:	26 e0       	ldi	r18, 0x06	; 6
     984:	44 e0       	ldi	r20, 0x04	; 4
     986:	60 e0       	ldi	r22, 0x00	; 0
     988:	87 e4       	ldi	r24, 0x47	; 71
     98a:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
       break;
    case 20: play_note('G', 0, 4, 7);
       break;
    case 21: play_rest(1); //rest
       break;
    case 22: play_note('G', 1, 4, 4);
     98e:	24 e0       	ldi	r18, 0x04	; 4
     990:	44 e0       	ldi	r20, 0x04	; 4
     992:	61 e0       	ldi	r22, 0x01	; 1
     994:	87 e4       	ldi	r24, 0x47	; 71
     996:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
       break;
    case 49: play_note('A', 0, 4, 16);
       break;
    case 50: play_note('F', 0, 4, 8);
       break;
    case 51: play_note('G', 1, 4, 8);
     99a:	28 e0       	ldi	r18, 0x08	; 8
     99c:	44 e0       	ldi	r20, 0x04	; 4
     99e:	61 e0       	ldi	r22, 0x01	; 1
     9a0:	87 e4       	ldi	r24, 0x47	; 71
     9a2:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
       break;
    case 16: play_note('A', 0, 4, 2);
       break;
    case 17: play_note('B', 1, 4, 16);
       break;
    case 18: play_note('G', 0, 4, 3);
     9a6:	23 e0       	ldi	r18, 0x03	; 3
     9a8:	44 e0       	ldi	r20, 0x04	; 4
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	87 e4       	ldi	r24, 0x47	; 71
     9ae:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
       break;
    case 57: play_note('A', 0, 4, 2);
       break;
    case 58: play_note('B', 1, 4, 16);
      break;//phrase
    case 59: play_note('D', 0, 4, 16);
     9b2:	20 e1       	ldi	r18, 0x10	; 16
     9b4:	44 e0       	ldi	r20, 0x04	; 4
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	84 e4       	ldi	r24, 0x44	; 68
     9ba:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
       break;
    case 60: play_note('D', 0, 5, 16);
       break;
    case 61: play_note('A', 0, 4, 16);
       break;
    case 62: play_note('C', 0, 5, 16);
     9be:	20 e1       	ldi	r18, 0x10	; 16
     9c0:	45 e0       	ldi	r20, 0x05	; 5
     9c2:	60 e0       	ldi	r22, 0x00	; 0
     9c4:	83 e4       	ldi	r24, 0x43	; 67
     9c6:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
       break;
    case 29: play_note('A', 1, 4, 4);
       break;
    case 30: play_note('A', 0, 4, 6);
       break;
    case 31: play_note('B', 1, 4, 2);
     9ca:	22 e0       	ldi	r18, 0x02	; 2
     9cc:	44 e0       	ldi	r20, 0x04	; 4
     9ce:	61 e0       	ldi	r22, 0x01	; 1
     9d0:	82 e4       	ldi	r24, 0x42	; 66
     9d2:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
       break;
    case 32: play_note('C', 0, 5, 4);
       break;
    case 33: play_note('D', 1, 5, 4);
     9d6:	24 e0       	ldi	r18, 0x04	; 4
     9d8:	45 e0       	ldi	r20, 0x05	; 5
     9da:	61 e0       	ldi	r22, 0x01	; 1
     9dc:	84 e4       	ldi	r24, 0x44	; 68
     9de:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
       break;
    case 27: play_rest(2); 
       break;
    case 28: play_note('A', 0, 4, 8);
       break;
    case 29: play_note('A', 1, 4, 4);
     9e2:	24 e0       	ldi	r18, 0x04	; 4
     9e4:	44 e0       	ldi	r20, 0x04	; 4
     9e6:	61 e0       	ldi	r22, 0x01	; 1
     9e8:	81 e4       	ldi	r24, 0x41	; 65
     9ea:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
       break;
    case 33: play_note('D', 1, 5, 4);
       break;
    case 34: play_note('D', 0, 5, 4);
       break;
    case 35: play_note('B', 0, 4, 8);
     9ee:	28 e0       	ldi	r18, 0x08	; 8
     9f0:	44 e0       	ldi	r20, 0x04	; 4
     9f2:	60 e0       	ldi	r22, 0x00	; 0
     9f4:	82 e4       	ldi	r24, 0x42	; 66
     9f6:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
       break;
    case 66: play_note('A', 0, 4, 8);
       break;
    case 67: play_note('G', 0, 4, 8);
       break;
    case 68: play_note('F', 0, 4, 24);
     9fa:	28 e1       	ldi	r18, 0x18	; 24
     9fc:	44 e0       	ldi	r20, 0x04	; 4
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	86 e4       	ldi	r24, 0x46	; 70
     a02:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>
       break;
    case 18: play_note('G', 0, 4, 3);
       break;
    case 19: play_rest(1); //rest
       break;
    case 20: play_note('G', 0, 4, 7);
     a06:	27 e0       	ldi	r18, 0x07	; 7
     a08:	44 e0       	ldi	r20, 0x04	; 4
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	87 e4       	ldi	r24, 0x47	; 71
     a0e:	0c 94 07 01 	jmp	0x20e	; 0x20e <play_note>

00000a12 <play_song>:
  //if you add a song, you'll have to add it to this
  //switch statement.
  switch (song) {
  case 0: song0(note); //beaver fight song
    break;
  default: song0(note); //defaults to beaver fight song
     a12:	86 2f       	mov	r24, r22
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	0c 94 25 04 	jmp	0x84a	; 0x84a <song0>

00000a1a <music_off>:
  }
}

void music_off(void) {
  //this turns the alarm timer off
  notes=0;
     a1a:	10 92 40 01 	sts	0x0140, r1
  TCCR1B &= ~((1<<CS11)|(1<<CS10));
     a1e:	8e b5       	in	r24, 0x2e	; 46
     a20:	8c 7f       	andi	r24, 0xFC	; 252
     a22:	8e bd       	out	0x2e, r24	; 46
  //and mutes the output
  PORTD |= mute;
     a24:	92 9a       	sbi	0x12, 2	; 18
     a26:	08 95       	ret

00000a28 <music_on>:
}

void music_on(void) {
  //this starts the alarm timer running
  notes=0;
     a28:	10 92 40 01 	sts	0x0140, r1
  TCCR1B |= (1<<CS11)|(1<<CS10);
     a2c:	8e b5       	in	r24, 0x2e	; 46
     a2e:	83 60       	ori	r24, 0x03	; 3
     a30:	8e bd       	out	0x2e, r24	; 46
  //unmutes the output
  PORTD &= unmute;
     a32:	92 98       	cbi	0x12, 2	; 18
  //and starts the selected song
  play_song(song, notes);
     a34:	60 91 40 01 	lds	r22, 0x0140
     a38:	80 91 41 01 	lds	r24, 0x0141
     a3c:	0c 94 09 05 	jmp	0xa12	; 0xa12 <play_song>

00000a40 <music_init>:
}

void music_init(void) {
  //initially turned off (use music_on() to turn on)
  TIMSK |= (1<<OCIE1A);  //enable timer interrupt 1 on compare
     a40:	87 b7       	in	r24, 0x37	; 55
     a42:	80 61       	ori	r24, 0x10	; 16
     a44:	87 bf       	out	0x37, r24	; 55
  TCCR1A = 0x00;         //TCNT1, normal port operation
     a46:	1f bc       	out	0x2f, r1	; 47
  TCCR1B |= (1<<WGM12);  //CTC, OCR1A = top, clk/64 (250kHz)
     a48:	8e b5       	in	r24, 0x2e	; 46
     a4a:	88 60       	ori	r24, 0x08	; 8
     a4c:	8e bd       	out	0x2e, r24	; 46
  TCCR1C = 0x00;         //no forced compare
     a4e:	10 92 7a 00 	sts	0x007A, r1
  OCR1A = 0x0031;        //(use to vary alarm frequency)
     a52:	81 e3       	ldi	r24, 0x31	; 49
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	9b bd       	out	0x2b, r25	; 43
     a58:	8a bd       	out	0x2a, r24	; 42
  }
}

void music_off(void) {
  //this turns the alarm timer off
  notes=0;
     a5a:	10 92 40 01 	sts	0x0140, r1
  TCCR1B &= ~((1<<CS11)|(1<<CS10));
     a5e:	8e b5       	in	r24, 0x2e	; 46
     a60:	8c 7f       	andi	r24, 0xFC	; 252
     a62:	8e bd       	out	0x2e, r24	; 46
  //and mutes the output
  PORTD |= mute;
     a64:	92 9a       	sbi	0x12, 2	; 18
  TCCR1A = 0x00;         //TCNT1, normal port operation
  TCCR1B |= (1<<WGM12);  //CTC, OCR1A = top, clk/64 (250kHz)
  TCCR1C = 0x00;         //no forced compare
  OCR1A = 0x0031;        //(use to vary alarm frequency)
  music_off();
  beat = 0;
     a66:	10 92 65 01 	sts	0x0165, r1
     a6a:	10 92 64 01 	sts	0x0164, r1
  max_beat = 0;
     a6e:	10 92 63 01 	sts	0x0163, r1
     a72:	10 92 62 01 	sts	0x0162, r1
  notes = 0;
     a76:	10 92 40 01 	sts	0x0140, r1
  song = 0;              //beaver fight song
     a7a:	10 92 41 01 	sts	0x0141, r1
     a7e:	08 95       	ret

00000a80 <__vector_12>:
/*********************************************************************/
/*                             TIMER1_COMPA                          */
/*Oscillates pin7, PORTD for alarm tone output                       */
/*********************************************************************/

ISR(TIMER1_COMPA_vect) {
     a80:	1f 92       	push	r1
     a82:	0f 92       	push	r0
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	0f 92       	push	r0
     a88:	11 24       	eor	r1, r1
     a8a:	0b b6       	in	r0, 0x3b	; 59
     a8c:	0f 92       	push	r0
     a8e:	2f 93       	push	r18
     a90:	3f 93       	push	r19
     a92:	4f 93       	push	r20
     a94:	5f 93       	push	r21
     a96:	6f 93       	push	r22
     a98:	7f 93       	push	r23
     a9a:	8f 93       	push	r24
     a9c:	9f 93       	push	r25
     a9e:	af 93       	push	r26
     aa0:	bf 93       	push	r27
     aa2:	ef 93       	push	r30
     aa4:	ff 93       	push	r31
  PORTD ^= ALARM_PIN;      //flips the bit, creating a tone
     aa6:	82 b3       	in	r24, 0x12	; 18
     aa8:	80 58       	subi	r24, 0x80	; 128
     aaa:	82 bb       	out	0x12, r24	; 18
  if(beat >= max_beat) {   //if we've played the note long enough
     aac:	20 91 64 01 	lds	r18, 0x0164
     ab0:	30 91 65 01 	lds	r19, 0x0165
     ab4:	80 91 62 01 	lds	r24, 0x0162
     ab8:	90 91 63 01 	lds	r25, 0x0163
     abc:	28 17       	cp	r18, r24
     abe:	39 07       	cpc	r19, r25
     ac0:	58 f0       	brcs	.+22     	; 0xad8 <__vector_12+0x58>
    notes++;               //move on to the next note
     ac2:	80 91 40 01 	lds	r24, 0x0140
     ac6:	8f 5f       	subi	r24, 0xFF	; 255
     ac8:	80 93 40 01 	sts	0x0140, r24
    play_song(song, notes);//and play it
     acc:	60 91 40 01 	lds	r22, 0x0140
     ad0:	80 91 41 01 	lds	r24, 0x0141
     ad4:	0e 94 09 05 	call	0xa12	; 0xa12 <play_song>
  }
}
     ad8:	ff 91       	pop	r31
     ada:	ef 91       	pop	r30
     adc:	bf 91       	pop	r27
     ade:	af 91       	pop	r26
     ae0:	9f 91       	pop	r25
     ae2:	8f 91       	pop	r24
     ae4:	7f 91       	pop	r23
     ae6:	6f 91       	pop	r22
     ae8:	5f 91       	pop	r21
     aea:	4f 91       	pop	r20
     aec:	3f 91       	pop	r19
     aee:	2f 91       	pop	r18
     af0:	0f 90       	pop	r0
     af2:	0b be       	out	0x3b, r0	; 59
     af4:	0f 90       	pop	r0
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	0f 90       	pop	r0
     afa:	1f 90       	pop	r1
     afc:	18 95       	reti

00000afe <bin_to_bcd>:

//*****************************************************************************
//							bin_to_bcd
//Converts binary number to bdc by modding by 10 and shifting by 4 bits per digit.

uint16_t bin_to_bcd(uint16_t i) {
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	ac 01       	movw	r20, r24
    uint16_t binaryShift = 0;
    uint16_t digit;
    uint16_t bcd = 0;
    while (i > 0) {
     b04:	c0 e0       	ldi	r28, 0x00	; 0
     b06:	d0 e0       	ldi	r29, 0x00	; 0
     b08:	89 2b       	or	r24, r25
     b0a:	39 f1       	breq	.+78     	; 0xb5a <bin_to_bcd+0x5c>
     b0c:	e0 e0       	ldi	r30, 0x00	; 0
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
        //mod by 10 each time to move from 1s to 10s, so on
        digit = i % 10;
     b10:	9a 01       	movw	r18, r20
     b12:	ad ec       	ldi	r26, 0xCD	; 205
     b14:	bc ec       	ldi	r27, 0xCC	; 204
     b16:	0e 94 15 0c 	call	0x182a	; 0x182a <__umulhisi3>
     b1a:	96 95       	lsr	r25
     b1c:	87 95       	ror	r24
     b1e:	96 95       	lsr	r25
     b20:	87 95       	ror	r24
     b22:	96 95       	lsr	r25
     b24:	87 95       	ror	r24
     b26:	bc 01       	movw	r22, r24
     b28:	66 0f       	add	r22, r22
     b2a:	77 1f       	adc	r23, r23
     b2c:	9c 01       	movw	r18, r24
     b2e:	22 0f       	add	r18, r18
     b30:	33 1f       	adc	r19, r19
     b32:	22 0f       	add	r18, r18
     b34:	33 1f       	adc	r19, r19
     b36:	22 0f       	add	r18, r18
     b38:	33 1f       	adc	r19, r19
     b3a:	26 0f       	add	r18, r22
     b3c:	37 1f       	adc	r19, r23
     b3e:	42 1b       	sub	r20, r18
     b40:	53 0b       	sbc	r21, r19
        //extract each decimal digit encoded with 4 bits
        bcd += (digit << binaryShift);
     b42:	0e 2e       	mov	r0, r30
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <bin_to_bcd+0x4c>
     b46:	44 0f       	add	r20, r20
     b48:	55 1f       	adc	r21, r21
     b4a:	0a 94       	dec	r0
     b4c:	e2 f7       	brpl	.-8      	; 0xb46 <bin_to_bcd+0x48>
     b4e:	c4 0f       	add	r28, r20
     b50:	d5 1f       	adc	r29, r21
        //shift another 4 bits to get the next digit
        binaryShift += 4;
     b52:	34 96       	adiw	r30, 0x04	; 4
        i /= 10;
     b54:	ac 01       	movw	r20, r24

uint16_t bin_to_bcd(uint16_t i) {
    uint16_t binaryShift = 0;
    uint16_t digit;
    uint16_t bcd = 0;
    while (i > 0) {
     b56:	89 2b       	or	r24, r25
     b58:	d9 f6       	brne	.-74     	; 0xb10 <bin_to_bcd+0x12>
        //shift another 4 bits to get the next digit
        binaryShift += 4;
        i /= 10;
    }
    return bcd;
}
     b5a:	ce 01       	movw	r24, r28
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	08 95       	ret

00000b62 <chk_buttons>:
//push so a debounce and toggle function can be implemented at the same time.  
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"            
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) {
     b62:	48 2f       	mov	r20, r24
	static uint16_t state[8]; //holds present state
	state[button] = (state[button] << 1) | (!bit_is_clear(PINA, button)) | 0xFE00; //update state
     b64:	e8 2f       	mov	r30, r24
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	99 b3       	in	r25, 0x19	; 25
     b6a:	ee 0f       	add	r30, r30
     b6c:	ff 1f       	adc	r31, r31
     b6e:	e1 5d       	subi	r30, 0xD1	; 209
     b70:	fe 4f       	sbci	r31, 0xFE	; 254
     b72:	20 81       	ld	r18, Z
     b74:	31 81       	ldd	r19, Z+1	; 0x01
     b76:	22 0f       	add	r18, r18
     b78:	33 1f       	adc	r19, r19
     b7a:	3e 6f       	ori	r19, 0xFE	; 254
     b7c:	89 2f       	mov	r24, r25
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <chk_buttons+0x24>
     b82:	95 95       	asr	r25
     b84:	87 95       	ror	r24
     b86:	4a 95       	dec	r20
     b88:	e2 f7       	brpl	.-8      	; 0xb82 <chk_buttons+0x20>
     b8a:	81 70       	andi	r24, 0x01	; 1
     b8c:	99 27       	eor	r25, r25
     b8e:	28 2b       	or	r18, r24
     b90:	39 2b       	or	r19, r25
     b92:	31 83       	std	Z+1, r19	; 0x01
     b94:	20 83       	st	Z, r18
	if(state[button] == 0xFF00) {
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	21 15       	cp	r18, r1
     b9a:	3f 4f       	sbci	r19, 0xFF	; 255
     b9c:	09 f0       	breq	.+2      	; 0xba0 <chk_buttons+0x3e>
     b9e:	80 e0       	ldi	r24, 0x00	; 0
		return TRUE;  //return true after 8 clears
	}
	return FALSE;
}
     ba0:	08 95       	ret

00000ba2 <segsum>:
//***********************************************************************************
//                                   segment_sum                                    
//takes a 16-bit binary input value and places the appropriate equivalent 4 digit 
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  digit3|digit2||colon|digit1|digit0|
void segsum(uint16_t bcd) {
     ba2:	9c 01       	movw	r18, r24
    uint8_t digit;
    uint8_t i = 0;
	for(i = 0; i < 5; i++) {
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	10 c0       	rjmp	.+32     	; 0xbc8 <segsum+0x26>
			i++;
		}
		//extract the rightmost 4 bits
		digit = bcd & 0xF;
		//put the extracted digit into segment_data array
		segment_data[i] = digit;
     ba8:	e9 2f       	mov	r30, r25
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	ec 5e       	subi	r30, 0xEC	; 236
     bae:	fe 4f       	sbci	r31, 0xFE	; 254
		//ignore colon on display
		if(i == 2) {
			i++;
		}
		//extract the rightmost 4 bits
		digit = bcd & 0xF;
     bb0:	82 2f       	mov	r24, r18
     bb2:	8f 70       	andi	r24, 0x0F	; 15
		//put the extracted digit into segment_data array
		segment_data[i] = digit;
     bb4:	80 83       	st	Z, r24
		//shift the bcd value to move to the next digit
		bcd >>= 4;
     bb6:	32 95       	swap	r19
     bb8:	22 95       	swap	r18
     bba:	2f 70       	andi	r18, 0x0F	; 15
     bbc:	23 27       	eor	r18, r19
     bbe:	3f 70       	andi	r19, 0x0F	; 15
     bc0:	23 27       	eor	r18, r19
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  digit3|digit2||colon|digit1|digit0|
void segsum(uint16_t bcd) {
    uint8_t digit;
    uint8_t i = 0;
	for(i = 0; i < 5; i++) {
     bc2:	9f 5f       	subi	r25, 0xFF	; 255
     bc4:	95 30       	cpi	r25, 0x05	; 5
     bc6:	70 f4       	brcc	.+28     	; 0xbe4 <segsum+0x42>
		//ignore colon on display
		if(i == 2) {
     bc8:	92 30       	cpi	r25, 0x02	; 2
     bca:	71 f7       	brne	.-36     	; 0xba8 <segsum+0x6>
			i++;
		}
		//extract the rightmost 4 bits
		digit = bcd & 0xF;
     bcc:	82 2f       	mov	r24, r18
     bce:	8f 70       	andi	r24, 0x0F	; 15
		//put the extracted digit into segment_data array
		segment_data[i] = digit;
     bd0:	80 93 17 01 	sts	0x0117, r24
		//shift the bcd value to move to the next digit
		bcd >>= 4;
     bd4:	32 95       	swap	r19
     bd6:	22 95       	swap	r18
     bd8:	2f 70       	andi	r18, 0x0F	; 15
     bda:	23 27       	eor	r18, r19
     bdc:	3f 70       	andi	r19, 0x0F	; 15
     bde:	23 27       	eor	r18, r19
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  digit3|digit2||colon|digit1|digit0|
void segsum(uint16_t bcd) {
    uint8_t digit;
    uint8_t i = 0;
	for(i = 0; i < 5; i++) {
     be0:	94 e0       	ldi	r25, 0x04	; 4
     be2:	e2 cf       	rjmp	.-60     	; 0xba8 <segsum+0x6>
     be4:	08 95       	ret

00000be6 <spi_init>:

//***********************************************************************
//                            spi_init                               
//**********************************************************************
void spi_init(void){
  DDRB  |= 0x07; //output mode for SS, MOSI, SCLK
     be6:	87 b3       	in	r24, 0x17	; 23
     be8:	87 60       	ori	r24, 0x07	; 7
     bea:	87 bb       	out	0x17, r24	; 23
  PORTB |= _BV(PB1);  //port B initalization for SPI, SS_n off
     bec:	c1 9a       	sbi	0x18, 1	; 24
  //set ss low
  //PORTB &= ~(1<<PB0);

  SPCR   = (1<<MSTR) | (1<<SPE); //master mode, clk low on idle, leading edge sample
     bee:	80 e5       	ldi	r24, 0x50	; 80
     bf0:	8d b9       	out	0x0d, r24	; 13

  SPSR   = (1<<SPI2X); //choose double speed operation
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	8e b9       	out	0x0e, r24	; 14
  
  /* Run this code before attempting to write to the LCD.*/
  DDRF  |= 0x08;  //port F bit 3 is enable for LCD
     bf6:	e1 e6       	ldi	r30, 0x61	; 97
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	88 60       	ori	r24, 0x08	; 8
     bfe:	80 83       	st	Z, r24
  PORTF &= 0xF7;  //port F bit 3 is initially low
     c00:	e2 e6       	ldi	r30, 0x62	; 98
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	87 7f       	andi	r24, 0xF7	; 247
     c08:	80 83       	st	Z, r24
     c0a:	08 95       	ret

00000c0c <tcnt0_init>:
//***********************************************************************
//                              tcnt0_init                             
//
//
void tcnt0_init(void){
 TIMSK |= (1<<TOIE0);	//enable overflow interrupt
     c0c:	87 b7       	in	r24, 0x37	; 55
     c0e:	81 60       	ori	r24, 0x01	; 1
     c10:	87 bf       	out	0x37, r24	; 55
 ASSR |= (1<<AS0);		//use external 32kHz clock
     c12:	80 b7       	in	r24, 0x30	; 48
     c14:	88 60       	ori	r24, 0x08	; 8
     c16:	80 bf       	out	0x30, r24	; 48
 TCCR0 |= (1<<CS00);	//no prescale
     c18:	83 b7       	in	r24, 0x33	; 51
     c1a:	81 60       	ori	r24, 0x01	; 1
     c1c:	83 bf       	out	0x33, r24	; 51
     c1e:	08 95       	ret

00000c20 <tcnt2_init>:
//                              tcnt0_init                             
//
//
void tcnt2_init(void){
 //fast PWM mode, non-inverting, clck/8 prescale
 TCCR2 |= (1<<CS21) | (1<<COM21) | (1<<COM20) | (1<<WGM20) | (1<<WGM21);
     c20:	85 b5       	in	r24, 0x25	; 37
     c22:	8a 67       	ori	r24, 0x7A	; 122
     c24:	85 bd       	out	0x25, r24	; 37
 //start on brightests
 OCR2 = 1;
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	83 bd       	out	0x23, r24	; 35
     c2a:	08 95       	ret

00000c2c <tcnt3_init>:
//*************************************************************************

void tcnt3_init(void) {
  //PORTE bit 3
  //fast PWM, non-inverting, prescale clk/64
  TCCR3A |= (1<<COM3A1) | (1<<WGM31) | (1<<WGM30);
     c2c:	eb e8       	ldi	r30, 0x8B	; 139
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	83 68       	ori	r24, 0x83	; 131
     c34:	80 83       	st	Z, r24
  TCCR3B |= (1<<CS30) | (1<<WGM33) | (1<<WGM32);
     c36:	ea e8       	ldi	r30, 0x8A	; 138
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	89 61       	ori	r24, 0x19	; 25
     c3e:	80 83       	st	Z, r24
  TCCR3C = 0x00;
     c40:	10 92 8c 00 	sts	0x008C, r1
  //controls volume, set initially high for quiet output
  OCR3A = 0xffff;
     c44:	8f ef       	ldi	r24, 0xFF	; 255
     c46:	9f ef       	ldi	r25, 0xFF	; 255
     c48:	90 93 87 00 	sts	0x0087, r25
     c4c:	80 93 86 00 	sts	0x0086, r24
     c50:	08 95       	ret

00000c52 <spi_write_read>:
//Writes to the SPI port and reads from spi port.
//Taken from lecture slides
//**********************************************************************
uint8_t spi_write_read(uint8_t send_byte) {
	//write data to slave
	SPDR = send_byte;
     c52:	8f b9       	out	0x0f, r24	; 15
	//read data from slave
	while (bit_is_clear(SPSR, SPIF)) {}
     c54:	77 9b       	sbis	0x0e, 7	; 14
     c56:	fe cf       	rjmp	.-4      	; 0xc54 <spi_write_read+0x2>
	//return the read data
	return ~(SPDR);
     c58:	8f b1       	in	r24, 0x0f	; 15
}//read_spi
     c5a:	80 95       	com	r24
     c5c:	08 95       	ret

00000c5e <__vector_16>:
//When the TCNT0 overflow interrupt occurs, the sec variable is    
//incremented.
//TCNT0 interrupts come at 1s internals.
// 32768 / (2^8 * 128)
//*************************************************************************
ISR(TIMER0_OVF_vect){
     c5e:	1f 92       	push	r1
     c60:	0f 92       	push	r0
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	0f 92       	push	r0
     c66:	11 24       	eor	r1, r1
     c68:	8f 93       	push	r24
     c6a:	9f 93       	push	r25
  to_ovf_count++;			//extend counter
     c6c:	80 91 2c 01 	lds	r24, 0x012C
     c70:	8f 5f       	subi	r24, 0xFF	; 255
     c72:	80 93 2c 01 	sts	0x012C, r24
  if((to_ovf_count % 128) == 0) {
     c76:	8f 77       	andi	r24, 0x7F	; 127
     c78:	79 f4       	brne	.+30     	; 0xc98 <__vector_16+0x3a>
    sec++;				//track seconds
     c7a:	80 91 2b 01 	lds	r24, 0x012B
     c7e:	8f 5f       	subi	r24, 0xFF	; 255
     c80:	80 93 2b 01 	sts	0x012B, r24
    //toggle colon
    segment_data[2] = ~(segment_data[2] ^ 0x02);
     c84:	90 91 16 01 	lds	r25, 0x0116
     c88:	8d ef       	ldi	r24, 0xFD	; 253
     c8a:	89 27       	eor	r24, r25
     c8c:	80 93 16 01 	sts	0x0116, r24
    //update snooze
    if(snooze_flag) {
     c90:	80 91 22 01 	lds	r24, 0x0122
     c94:	81 11       	cpse	r24, r1
     c96:	17 c0       	rjmp	.+46     	; 0xcc6 <__vector_16+0x68>
	  snooze_counter++;
    }
  }
  beat_counter++;
     c98:	80 91 24 01 	lds	r24, 0x0124
     c9c:	8f 5f       	subi	r24, 0xFF	; 255
     c9e:	80 93 24 01 	sts	0x0124, r24
  if(beat_counter % 8 == 0) {
     ca2:	87 70       	andi	r24, 0x07	; 7
     ca4:	49 f4       	brne	.+18     	; 0xcb8 <__vector_16+0x5a>
    //for note duration (64th notes)
    beat++;
     ca6:	80 91 64 01 	lds	r24, 0x0164
     caa:	90 91 65 01 	lds	r25, 0x0165
     cae:	01 96       	adiw	r24, 0x01	; 1
     cb0:	90 93 65 01 	sts	0x0165, r25
     cb4:	80 93 64 01 	sts	0x0164, r24
  }
}
     cb8:	9f 91       	pop	r25
     cba:	8f 91       	pop	r24
     cbc:	0f 90       	pop	r0
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	0f 90       	pop	r0
     cc2:	1f 90       	pop	r1
     cc4:	18 95       	reti
    sec++;				//track seconds
    //toggle colon
    segment_data[2] = ~(segment_data[2] ^ 0x02);
    //update snooze
    if(snooze_flag) {
	  snooze_counter++;
     cc6:	80 91 23 01 	lds	r24, 0x0123
     cca:	8f 5f       	subi	r24, 0xFF	; 255
     ccc:	80 93 23 01 	sts	0x0123, r24
     cd0:	e3 cf       	rjmp	.-58     	; 0xc98 <__vector_16+0x3a>

00000cd2 <clear_lcd_array>:
  }
}
//*******************************************************************************

//clears the lcd_string_array
void clear_lcd_array(void) {
     cd2:	e2 e4       	ldi	r30, 0x42	; 66
     cd4:	f1 e0       	ldi	r31, 0x01	; 1
	int i = 0;
	for(i = 0; i < 32; i++) {
		lcd_string_array[i] = ' ';
     cd6:	80 e2       	ldi	r24, 0x20	; 32
     cd8:	81 93       	st	Z+, r24
//*******************************************************************************

//clears the lcd_string_array
void clear_lcd_array(void) {
	int i = 0;
	for(i = 0; i < 32; i++) {
     cda:	91 e0       	ldi	r25, 0x01	; 1
     cdc:	e2 36       	cpi	r30, 0x62	; 98
     cde:	f9 07       	cpc	r31, r25
     ce0:	d9 f7       	brne	.-10     	; 0xcd8 <clear_lcd_array+0x6>
		lcd_string_array[i] = ' ';
	}
}
     ce2:	08 95       	ret

00000ce4 <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	81 11       	cpse	r24, r1
     ce8:	01 c0       	rjmp	.+2      	; 0xcec <send_lcd+0x8>
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cee:	77 9b       	sbis	0x0e, 7	; 14
     cf0:	fe cf       	rjmp	.-4      	; 0xcee <send_lcd+0xa>
  SPDR = byte;                        //send payload
     cf2:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cf4:	77 9b       	sbis	0x0e, 7	; 14
     cf6:	fe cf       	rjmp	.-4      	; 0xcf4 <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     cf8:	80 91 62 00 	lds	r24, 0x0062
     cfc:	88 60       	ori	r24, 0x08	; 8
     cfe:	80 93 62 00 	sts	0x0062, r24
     d02:	80 91 62 00 	lds	r24, 0x0062
     d06:	87 7f       	andi	r24, 0xF7	; 247
     d08:	80 93 62 00 	sts	0x0062, r24
     d0c:	08 95       	ret

00000d0e <refresh_lcd>:
//  |  0|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12| 13| 14| 15| 
//  -----------------------------------------------------------------
//  | 16| 17| 18| 19| 20| 21| 22| 23| 24| 25| 26| 27| 28| 29| 30| 31|  
//  -----------------------------------------------------------------
//
void refresh_lcd(char lcd_string_array[]) {
     d0e:	cf 93       	push	r28

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
     d10:	c0 91 3f 01 	lds	r28, 0x013F
     d14:	8c 0f       	add	r24, r28
     d16:	91 1d       	adc	r25, r1
     d18:	fc 01       	movw	r30, r24
     d1a:	60 81       	ld	r22, Z
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	0e 94 72 06 	call	0xce4	; 0xce4 <send_lcd>
 i++;   //increment to next character
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	8c 0f       	add	r24, r28
     d26:	80 93 3f 01 	sts	0x013F, r24
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
     d2a:	80 31       	cpi	r24, 0x10	; 16
     d2c:	81 f0       	breq	.+32     	; 0xd4e <refresh_lcd+0x40>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     d2e:	80 32       	cpi	r24, 0x20	; 32
     d30:	11 f0       	breq	.+4      	; 0xd36 <refresh_lcd+0x28>
}//refresh_lcd
     d32:	cf 91       	pop	r28
     d34:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d36:	85 ed       	ldi	r24, 0xD5	; 213
     d38:	8a 95       	dec	r24
     d3a:	f1 f7       	brne	.-4      	; 0xd38 <refresh_lcd+0x2a>
     d3c:	00 00       	nop
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
     d3e:	60 e8       	ldi	r22, 0x80	; 128
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	0e 94 72 06 	call	0xce4	; 0xce4 <send_lcd>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     d46:	10 92 3f 01 	sts	0x013F, r1
}//refresh_lcd
     d4a:	cf 91       	pop	r28
     d4c:	08 95       	ret
     d4e:	f5 ed       	ldi	r31, 0xD5	; 213
     d50:	fa 95       	dec	r31
     d52:	f1 f7       	brne	.-4      	; 0xd50 <refresh_lcd+0x42>
     d54:	00 00       	nop
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
     d56:	60 ec       	ldi	r22, 0xC0	; 192
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	0e 94 72 06 	call	0xce4	; 0xce4 <send_lcd>
     d5e:	80 91 3f 01 	lds	r24, 0x013F
     d62:	e5 cf       	rjmp	.-54     	; 0xd2e <refresh_lcd+0x20>

00000d64 <set_custom_character>:
//addresses are 0x00 - 0x07 for a total of 8 custom characters (0x08 - 0x0F 
//map to 0x00 - 0x07) to display a custom character just refer to it's 
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
     d64:	ef 92       	push	r14
     d66:	ff 92       	push	r15
     d68:	0f 93       	push	r16
     d6a:	1f 93       	push	r17
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	1f 92       	push	r1
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
     d76:	18 2f       	mov	r17, r24
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     d78:	66 0f       	add	r22, r22
     d7a:	66 0f       	add	r22, r22
     d7c:	66 0f       	add	r22, r22
     d7e:	60 5c       	subi	r22, 0xC0	; 192
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	99 83       	std	Y+1, r25	; 0x01
     d84:	0e 94 72 06 	call	0xce4	; 0xce4 <send_lcd>
     d88:	85 ed       	ldi	r24, 0xD5	; 213
     d8a:	8a 95       	dec	r24
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <set_custom_character+0x26>
     d8e:	00 00       	nop
     d90:	e1 2e       	mov	r14, r17
     d92:	99 81       	ldd	r25, Y+1	; 0x01
     d94:	f9 2e       	mov	r15, r25
     d96:	87 01       	movw	r16, r14
     d98:	08 5f       	subi	r16, 0xF8	; 248
     d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     d9c:	f7 01       	movw	r30, r14
     d9e:	61 91       	ld	r22, Z+
     da0:	7f 01       	movw	r14, r30
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	0e 94 72 06 	call	0xce4	; 0xce4 <send_lcd>
     da8:	f5 ed       	ldi	r31, 0xD5	; 213
     daa:	fa 95       	dec	r31
     dac:	f1 f7       	brne	.-4      	; 0xdaa <set_custom_character+0x46>
     dae:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
     db0:	e0 16       	cp	r14, r16
     db2:	f1 06       	cpc	r15, r17
     db4:	99 f7       	brne	.-26     	; 0xd9c <set_custom_character+0x38>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
     db6:	0f 90       	pop	r0
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	1f 91       	pop	r17
     dbe:	0f 91       	pop	r16
     dc0:	ff 90       	pop	r15
     dc2:	ef 90       	pop	r14
     dc4:	08 95       	ret

00000dc6 <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
     dc6:	90 e4       	ldi	r25, 0x40	; 64
     dc8:	89 9f       	mul	r24, r25
     dca:	60 0d       	add	r22, r0
     dcc:	11 24       	eor	r1, r1
     dce:	60 5c       	subi	r22, 0xC0	; 192
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	0c 94 72 06 	jmp	0xce4	; 0xce4 <send_lcd>

00000dd6 <uint2lcd>:
//Takes a 8bit unsigned and displays it in base ten on the LCD. Leading 0's are 
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
     dd6:	cf 93       	push	r28
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     dd8:	88 23       	and	r24, r24
     dda:	b9 f1       	breq	.+110    	; 0xe4a <uint2lcd+0x74>
     ddc:	c8 2f       	mov	r28, r24
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     dde:	84 36       	cpi	r24, 0x64	; 100
     de0:	98 f4       	brcc	.+38     	; 0xe08 <uint2lcd+0x32>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     de2:	8a 30       	cpi	r24, 0x0A	; 10
     de4:	d8 f4       	brcc	.+54     	; 0xe1c <uint2lcd+0x46>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     de6:	8d ec       	ldi	r24, 0xCD	; 205
     de8:	c8 9f       	mul	r28, r24
     dea:	81 2d       	mov	r24, r1
     dec:	11 24       	eor	r1, r1
     dee:	86 95       	lsr	r24
     df0:	86 95       	lsr	r24
     df2:	86 95       	lsr	r24
     df4:	6c 2f       	mov	r22, r28
     df6:	2a e0       	ldi	r18, 0x0A	; 10
     df8:	82 9f       	mul	r24, r18
     dfa:	60 19       	sub	r22, r0
     dfc:	11 24       	eor	r1, r1
     dfe:	60 5d       	subi	r22, 0xD0	; 208
     e00:	81 e0       	ldi	r24, 0x01	; 1
    }
}
     e02:	cf 91       	pop	r28
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     e04:	0c 94 72 06 	jmp	0xce4	; 0xce4 <send_lcd>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     e08:	69 e2       	ldi	r22, 0x29	; 41
     e0a:	86 9f       	mul	r24, r22
     e0c:	61 2d       	mov	r22, r1
     e0e:	11 24       	eor	r1, r1
     e10:	62 95       	swap	r22
     e12:	6f 70       	andi	r22, 0x0F	; 15
     e14:	60 5d       	subi	r22, 0xD0	; 208
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	0e 94 72 06 	call	0xce4	; 0xce4 <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     e1c:	89 e2       	ldi	r24, 0x29	; 41
     e1e:	c8 9f       	mul	r28, r24
     e20:	81 2d       	mov	r24, r1
     e22:	11 24       	eor	r1, r1
     e24:	82 95       	swap	r24
     e26:	8f 70       	andi	r24, 0x0F	; 15
     e28:	9c 2f       	mov	r25, r28
     e2a:	24 e6       	ldi	r18, 0x64	; 100
     e2c:	82 9f       	mul	r24, r18
     e2e:	90 19       	sub	r25, r0
     e30:	11 24       	eor	r1, r1
     e32:	6d ec       	ldi	r22, 0xCD	; 205
     e34:	96 9f       	mul	r25, r22
     e36:	61 2d       	mov	r22, r1
     e38:	11 24       	eor	r1, r1
     e3a:	66 95       	lsr	r22
     e3c:	66 95       	lsr	r22
     e3e:	66 95       	lsr	r22
     e40:	60 5d       	subi	r22, 0xD0	; 208
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	0e 94 72 06 	call	0xce4	; 0xce4 <send_lcd>
     e48:	ce cf       	rjmp	.-100    	; 0xde6 <uint2lcd+0x10>
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     e4a:	60 e3       	ldi	r22, 0x30	; 48
     e4c:	81 e0       	ldi	r24, 0x01	; 1
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    }
}
     e4e:	cf 91       	pop	r28
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     e50:	0c 94 72 06 	jmp	0xce4	; 0xce4 <send_lcd>

00000e54 <int2lcd>:
//                          int2lcd  
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
     e54:	cf 93       	push	r28
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     e56:	87 fd       	sbrc	r24, 7
     e58:	03 c0       	rjmp	.+6      	; 0xe60 <int2lcd+0xc>
    else          {uint2lcd(number);                                            }
}
     e5a:	cf 91       	pop	r28
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    else          {uint2lcd(number);                                            }
     e5c:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <uint2lcd>
     e60:	c8 2f       	mov	r28, r24
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     e62:	6d e2       	ldi	r22, 0x2D	; 45
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	0e 94 72 06 	call	0xce4	; 0xce4 <send_lcd>
     e6a:	85 ed       	ldi	r24, 0xD5	; 213
     e6c:	8a 95       	dec	r24
     e6e:	f1 f7       	brne	.-4      	; 0xe6c <int2lcd+0x18>
     e70:	00 00       	nop
     e72:	8c 2f       	mov	r24, r28
     e74:	81 95       	neg	r24
    else          {uint2lcd(number);                                            }
}
     e76:	cf 91       	pop	r28
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     e78:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <uint2lcd>

00000e7c <cursor_on>:

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E);}
     e7c:	6e e0       	ldi	r22, 0x0E	; 14
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	0c 94 72 06 	jmp	0xce4	; 0xce4 <send_lcd>

00000e84 <cursor_off>:

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C);}
     e84:	6c e0       	ldi	r22, 0x0C	; 12
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	0c 94 72 06 	jmp	0xce4	; 0xce4 <send_lcd>

00000e8c <shift_right>:

//-----------------------------------------------------------------------------
//                          shift_right 
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E);}
     e8c:	6e e1       	ldi	r22, 0x1E	; 30
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	0c 94 72 06 	jmp	0xce4	; 0xce4 <send_lcd>

00000e94 <shift_left>:

//-----------------------------------------------------------------------------
//                          shift_left  
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18);}
     e94:	68 e1       	ldi	r22, 0x18	; 24
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	0c 94 72 06 	jmp	0xce4	; 0xce4 <send_lcd>

00000e9c <strobe_lcd>:
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e9c:	e2 e6       	ldi	r30, 0x62	; 98
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	88 60       	ori	r24, 0x08	; 8
     ea4:	80 83       	st	Z, r24
     ea6:	80 81       	ld	r24, Z
     ea8:	87 7f       	andi	r24, 0xF7	; 247
     eaa:	80 83       	st	Z, r24
     eac:	08 95       	ret

00000eae <clear_display>:
//
//Clears entire display and sets DDRAM address 0 in address counter. Requires
//1.8ms for execution. Use only if you can withstand the big delay.
//
void clear_display(void){
  send_lcd(CMD_BYTE, CLEAR_DISPLAY);
     eae:	61 e0       	ldi	r22, 0x01	; 1
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	0e 94 72 06 	call	0xce4	; 0xce4 <send_lcd>
     eb6:	8f e1       	ldi	r24, 0x1F	; 31
     eb8:	9c e1       	ldi	r25, 0x1C	; 28
     eba:	01 97       	sbiw	r24, 0x01	; 1
     ebc:	f1 f7       	brne	.-4      	; 0xeba <clear_display+0xc>
     ebe:	00 c0       	rjmp	.+0      	; 0xec0 <clear_display+0x12>
     ec0:	00 00       	nop
     ec2:	08 95       	ret

00000ec4 <cursor_home>:
//shifted to original position.  DDRAM contents remain unchanged. Requires
//1.5ms to execute. Use only if you can withstand the big delay. Consider
//using line1_col1().
//
void cursor_home(void){
  send_lcd(CMD_BYTE, RETURN_HOME);
     ec4:	62 e0       	ldi	r22, 0x02	; 2
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	0e 94 72 06 	call	0xce4	; 0xce4 <send_lcd>
     ecc:	8f e6       	ldi	r24, 0x6F	; 111
     ece:	97 e1       	ldi	r25, 0x17	; 23
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	f1 f7       	brne	.-4      	; 0xed0 <cursor_home+0xc>
     ed4:	00 c0       	rjmp	.+0      	; 0xed6 <cursor_home+0x12>
     ed6:	00 00       	nop
     ed8:	08 95       	ret

00000eda <line2_col1>:
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
     eda:	60 ec       	ldi	r22, 0xC0	; 192
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	0c 94 72 06 	jmp	0xce4	; 0xce4 <send_lcd>

00000ee2 <line1_col1>:
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
     ee2:	60 e8       	ldi	r22, 0x80	; 128
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	0c 94 72 06 	jmp	0xce4	; 0xce4 <send_lcd>

00000eea <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
     eea:	cf 93       	push	r28
     eec:	c0 e1       	ldi	r28, 0x10	; 16
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
		send_lcd(CHAR_BYTE, ' '); 
     eee:	60 e2       	ldi	r22, 0x20	; 32
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	0e 94 72 06 	call	0xce4	; 0xce4 <send_lcd>
     ef6:	85 ed       	ldi	r24, 0xD5	; 213
     ef8:	8a 95       	dec	r24
     efa:	f1 f7       	brne	.-4      	; 0xef8 <fill_spaces+0xe>
     efc:	00 00       	nop
     efe:	c1 50       	subi	r28, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
     f00:	b1 f7       	brne	.-20     	; 0xeee <fill_spaces+0x4>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
     f02:	cf 91       	pop	r28
     f04:	08 95       	ret

00000f06 <char2lcd>:
//                            char2lcd
//                            
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
//
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char);} 
     f06:	68 2f       	mov	r22, r24
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	0c 94 72 06 	jmp	0xce4	; 0xce4 <send_lcd>

00000f0e <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
     f12:	cf 93       	push	r28
     f14:	8c 01       	movw	r16, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     f16:	40 e0       	ldi	r20, 0x00	; 0
     f18:	50 e0       	ldi	r21, 0x00	; 0
     f1a:	c0 e0       	ldi	r28, 0x00	; 0
     f1c:	f8 01       	movw	r30, r16
     f1e:	e4 0f       	add	r30, r20
     f20:	f5 1f       	adc	r31, r21
     f22:	60 81       	ld	r22, Z
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	0e 94 72 06 	call	0xce4	; 0xce4 <send_lcd>
     f2a:	85 ed       	ldi	r24, 0xD5	; 213
     f2c:	8a 95       	dec	r24
     f2e:	f1 f7       	brne	.-4      	; 0xf2c <string2lcd+0x1e>
     f30:	00 00       	nop
     f32:	cf 5f       	subi	r28, 0xFF	; 255
     f34:	4c 2f       	mov	r20, r28
     f36:	50 e0       	ldi	r21, 0x00	; 0
     f38:	f8 01       	movw	r30, r16
     f3a:	01 90       	ld	r0, Z+
     f3c:	00 20       	and	r0, r0
     f3e:	e9 f7       	brne	.-6      	; 0xf3a <string2lcd+0x2c>
     f40:	9f 01       	movw	r18, r30
     f42:	20 1b       	sub	r18, r16
     f44:	31 0b       	sbc	r19, r17
     f46:	22 50       	subi	r18, 0x02	; 2
     f48:	31 09       	sbc	r19, r1
     f4a:	24 17       	cp	r18, r20
     f4c:	35 07       	cpc	r19, r21
     f4e:	30 f7       	brcc	.-52     	; 0xf1c <string2lcd+0xe>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
     f50:	cf 91       	pop	r28
     f52:	1f 91       	pop	r17
     f54:	0f 91       	pop	r16
     f56:	08 95       	ret

00000f58 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f58:	8f ef       	ldi	r24, 0xFF	; 255
     f5a:	99 ef       	ldi	r25, 0xF9	; 249
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	f1 f7       	brne	.-4      	; 0xf5c <lcd_init+0x4>
     f60:	00 c0       	rjmp	.+0      	; 0xf62 <lcd_init+0xa>
     f62:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
     f64:	88 e0       	ldi	r24, 0x08	; 8
     f66:	80 93 61 00 	sts	0x0061, r24
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7); //send cmd sequence 3 times 
     f6a:	60 e3       	ldi	r22, 0x30	; 48
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	0e 94 72 06 	call	0xce4	; 0xce4 <send_lcd>
     f72:	8f e5       	ldi	r24, 0x5F	; 95
     f74:	9d e6       	ldi	r25, 0x6D	; 109
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	f1 f7       	brne	.-4      	; 0xf76 <lcd_init+0x1e>
     f7a:	00 c0       	rjmp	.+0      	; 0xf7c <lcd_init+0x24>
     f7c:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
     f7e:	60 e3       	ldi	r22, 0x30	; 48
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	0e 94 72 06 	call	0xce4	; 0xce4 <send_lcd>
     f86:	8f e5       	ldi	r24, 0x5F	; 95
     f88:	9d e6       	ldi	r25, 0x6D	; 109
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	f1 f7       	brne	.-4      	; 0xf8a <lcd_init+0x32>
     f8e:	00 c0       	rjmp	.+0      	; 0xf90 <lcd_init+0x38>
     f90:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
     f92:	60 e3       	ldi	r22, 0x30	; 48
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	0e 94 72 06 	call	0xce4	; 0xce4 <send_lcd>
     f9a:	8f e5       	ldi	r24, 0x5F	; 95
     f9c:	9d e6       	ldi	r25, 0x6D	; 109
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	f1 f7       	brne	.-4      	; 0xf9e <lcd_init+0x46>
     fa2:	00 c0       	rjmp	.+0      	; 0xfa4 <lcd_init+0x4c>
     fa4:	00 00       	nop
  send_lcd(CMD_BYTE, 0x38); _delay_ms(5);
     fa6:	68 e3       	ldi	r22, 0x38	; 56
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	0e 94 72 06 	call	0xce4	; 0xce4 <send_lcd>
     fae:	8f e1       	ldi	r24, 0x1F	; 31
     fb0:	9e e4       	ldi	r25, 0x4E	; 78
     fb2:	01 97       	sbiw	r24, 0x01	; 1
     fb4:	f1 f7       	brne	.-4      	; 0xfb2 <lcd_init+0x5a>
     fb6:	00 c0       	rjmp	.+0      	; 0xfb8 <lcd_init+0x60>
     fb8:	00 00       	nop
  send_lcd(CMD_BYTE, 0x08); _delay_ms(5);
     fba:	68 e0       	ldi	r22, 0x08	; 8
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	0e 94 72 06 	call	0xce4	; 0xce4 <send_lcd>
     fc2:	8f e1       	ldi	r24, 0x1F	; 31
     fc4:	9e e4       	ldi	r25, 0x4E	; 78
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	f1 f7       	brne	.-4      	; 0xfc6 <lcd_init+0x6e>
     fca:	00 c0       	rjmp	.+0      	; 0xfcc <lcd_init+0x74>
     fcc:	00 00       	nop
  send_lcd(CMD_BYTE, 0x01); _delay_ms(5);
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	0e 94 72 06 	call	0xce4	; 0xce4 <send_lcd>
     fd6:	8f e1       	ldi	r24, 0x1F	; 31
     fd8:	9e e4       	ldi	r25, 0x4E	; 78
     fda:	01 97       	sbiw	r24, 0x01	; 1
     fdc:	f1 f7       	brne	.-4      	; 0xfda <lcd_init+0x82>
     fde:	00 c0       	rjmp	.+0      	; 0xfe0 <lcd_init+0x88>
     fe0:	00 00       	nop
  send_lcd(CMD_BYTE, 0x06); _delay_ms(5);
     fe2:	66 e0       	ldi	r22, 0x06	; 6
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	0e 94 72 06 	call	0xce4	; 0xce4 <send_lcd>
     fea:	8f e1       	ldi	r24, 0x1F	; 31
     fec:	9e e4       	ldi	r25, 0x4E	; 78
     fee:	01 97       	sbiw	r24, 0x01	; 1
     ff0:	f1 f7       	brne	.-4      	; 0xfee <lcd_init+0x96>
     ff2:	00 c0       	rjmp	.+0      	; 0xff4 <lcd_init+0x9c>
     ff4:	00 00       	nop
  send_lcd(CMD_BYTE, 0x0C + (CURSOR_VISIBLE<<1) + CURSOR_BLINK); _delay_ms(5);
     ff6:	6c e0       	ldi	r22, 0x0C	; 12
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	0e 94 72 06 	call	0xce4	; 0xce4 <send_lcd>
     ffe:	8f e1       	ldi	r24, 0x1F	; 31
    1000:	9e e4       	ldi	r25, 0x4E	; 78
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	f1 f7       	brne	.-4      	; 0x1002 <lcd_init+0xaa>
    1006:	00 c0       	rjmp	.+0      	; 0x1008 <lcd_init+0xb0>
    1008:	00 00       	nop
    100a:	08 95       	ret

0000100c <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
    100c:	8f 92       	push	r8
    100e:	9f 92       	push	r9
    1010:	af 92       	push	r10
    1012:	bf 92       	push	r11
    1014:	cf 92       	push	r12
    1016:	df 92       	push	r13
    1018:	ef 92       	push	r14
    101a:	ff 92       	push	r15
    101c:	0f 93       	push	r16
    101e:	1f 93       	push	r17
    1020:	cf 93       	push	r28
    1022:	df 93       	push	r29
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	69 97       	sbiw	r28, 0x19	; 25
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	f4 2e       	mov	r15, r20
    1036:	12 2f       	mov	r17, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
    1038:	00 23       	and	r16, r16
    103a:	59 f0       	breq	.+22     	; 0x1052 <lcd_int32+0x46>
        bSigned = (qr.quot<0);
    103c:	4b 01       	movw	r8, r22
    103e:	5c 01       	movw	r10, r24
    1040:	88 24       	eor	r8, r8
    1042:	b7 fc       	sbrc	r11, 7
    1044:	83 94       	inc	r8
    1046:	99 24       	eor	r9, r9
    1048:	aa 24       	eor	r10, r10
    104a:	bb 24       	eor	r11, r11
    104c:	08 2d       	mov	r16, r8
        qr.quot = labs(qr.quot);
    104e:	97 fd       	sbrc	r25, 7
    1050:	8f c0       	rjmp	.+286    	; 0x1170 <__stack+0x71>
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
    1052:	11 23       	and	r17, r17
    1054:	09 f4       	brne	.+2      	; 0x1058 <lcd_int32+0x4c>
    1056:	84 c0       	rjmp	.+264    	; 0x1160 <__stack+0x61>
    1058:	9e 01       	movw	r18, r28
    105a:	2f 5f       	subi	r18, 0xFF	; 255
    105c:	3f 4f       	sbci	r19, 0xFF	; 255
    105e:	69 01       	movw	r12, r18
    1060:	59 01       	movw	r10, r18
    1062:	88 24       	eor	r8, r8
    1064:	8a 94       	dec	r8
    1066:	81 0e       	add	r8, r17
    1068:	91 2c       	mov	r9, r1
    106a:	3f ef       	ldi	r19, 0xFF	; 255
    106c:	83 1a       	sub	r8, r19
    106e:	93 0a       	sbc	r9, r19
    1070:	8c 0c       	add	r8, r12
    1072:	9d 1c       	adc	r9, r13
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
    1074:	2a e0       	ldi	r18, 0x0A	; 10
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	40 e0       	ldi	r20, 0x00	; 0
    107a:	50 e0       	ldi	r21, 0x00	; 0
    107c:	0e 94 ed 0b 	call	0x17da	; 0x17da <__divmodsi4>
    1080:	e6 2f       	mov	r30, r22
    1082:	2a 8b       	std	Y+18, r18	; 0x12
    1084:	3b 8b       	std	Y+19, r19	; 0x13
    1086:	4c 8b       	std	Y+20, r20	; 0x14
    1088:	5d 8b       	std	Y+21, r21	; 0x15
    108a:	6a 89       	ldd	r22, Y+18	; 0x12
    108c:	7b 89       	ldd	r23, Y+19	; 0x13
    108e:	8c 89       	ldd	r24, Y+20	; 0x14
    1090:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    1092:	20 e3       	ldi	r18, 0x30	; 48
    1094:	2e 0f       	add	r18, r30
    1096:	f5 01       	movw	r30, r10
    1098:	21 93       	st	Z+, r18
    109a:	5f 01       	movw	r10, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
    109c:	e8 15       	cp	r30, r8
    109e:	f9 05       	cpc	r31, r9
    10a0:	49 f7       	brne	.-46     	; 0x1074 <lcd_int32+0x68>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
    10a2:	bb 24       	eor	r11, r11
    10a4:	b3 94       	inc	r11
    10a6:	b1 0e       	add	r11, r17
    10a8:	f6 01       	movw	r30, r12
    10aa:	e1 0f       	add	r30, r17
    10ac:	f1 1d       	adc	r31, r1
    10ae:	2e e2       	ldi	r18, 0x2E	; 46
    10b0:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
    10b2:	2a e0       	ldi	r18, 0x0A	; 10
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e0       	ldi	r20, 0x00	; 0
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	0e 94 ed 0b 	call	0x17da	; 0x17da <__divmodsi4>
    10be:	e6 2f       	mov	r30, r22
    10c0:	2a 8b       	std	Y+18, r18	; 0x12
    10c2:	3b 8b       	std	Y+19, r19	; 0x13
    10c4:	4c 8b       	std	Y+20, r20	; 0x14
    10c6:	5d 8b       	std	Y+21, r21	; 0x15
    10c8:	6e 8b       	std	Y+22, r22	; 0x16
    10ca:	7f 8b       	std	Y+23, r23	; 0x17
    10cc:	88 8f       	std	Y+24, r24	; 0x18
    10ce:	99 8f       	std	Y+25, r25	; 0x19
    10d0:	6a 89       	ldd	r22, Y+18	; 0x12
    10d2:	7b 89       	ldd	r23, Y+19	; 0x13
    10d4:	8c 89       	ldd	r24, Y+20	; 0x14
    10d6:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    10d8:	11 e0       	ldi	r17, 0x01	; 1
    10da:	1b 0d       	add	r17, r11
    10dc:	d6 01       	movw	r26, r12
    10de:	ab 0d       	add	r26, r11
    10e0:	b1 1d       	adc	r27, r1
    10e2:	e0 5d       	subi	r30, 0xD0	; 208
    10e4:	ec 93       	st	X, r30
    10e6:	b1 2e       	mov	r11, r17
        }while(qr.quot);
    10e8:	61 15       	cp	r22, r1
    10ea:	71 05       	cpc	r23, r1
    10ec:	81 05       	cpc	r24, r1
    10ee:	91 05       	cpc	r25, r1
    10f0:	01 f7       	brne	.-64     	; 0x10b2 <lcd_int32+0xa6>

      // fill the whole field if a width was specified
      if (fieldwidth){
    10f2:	ff 20       	and	r15, r15
    10f4:	61 f0       	breq	.+24     	; 0x110e <__stack+0xf>
        fillch = bZeroFill? '0': ' '; // determine the fill character
    10f6:	e1 10       	cpse	r14, r1
    10f8:	39 c0       	rjmp	.+114    	; 0x116c <__stack+0x6d>
    10fa:	80 e2       	ldi	r24, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
    10fc:	1f 15       	cp	r17, r15
    10fe:	38 f4       	brcc	.+14     	; 0x110e <__stack+0xf>
    1100:	f6 01       	movw	r30, r12
    1102:	e1 0f       	add	r30, r17
    1104:	f1 1d       	adc	r31, r1
    1106:	80 83       	st	Z, r24
    1108:	1f 5f       	subi	r17, 0xFF	; 255
    110a:	1f 11       	cpse	r17, r15
    110c:	f9 cf       	rjmp	.-14     	; 0x1100 <__stack+0x1>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
    110e:	00 23       	and	r16, r16
    1110:	31 f0       	breq	.+12     	; 0x111e <__stack+0x1f>
    1112:	f6 01       	movw	r30, r12
    1114:	e1 0f       	add	r30, r17
    1116:	f1 1d       	adc	r31, r1
    1118:	8d e2       	ldi	r24, 0x2D	; 45
    111a:	80 83       	st	Z, r24
    111c:	1f 5f       	subi	r17, 0xFF	; 255

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    111e:	11 50       	subi	r17, 0x01	; 1
    1120:	f6 01       	movw	r30, r12
    1122:	e1 0f       	add	r30, r17
    1124:	f1 1d       	adc	r31, r1
    1126:	60 81       	ld	r22, Z
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	0e 94 72 06 	call	0xce4	; 0xce4 <send_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    112e:	35 ed       	ldi	r19, 0xD5	; 213
    1130:	3a 95       	dec	r19
    1132:	f1 f7       	brne	.-4      	; 0x1130 <__stack+0x31>
    1134:	00 00       	nop
    1136:	11 11       	cpse	r17, r1
    1138:	f2 cf       	rjmp	.-28     	; 0x111e <__stack+0x1f>

}
    113a:	69 96       	adiw	r28, 0x19	; 25
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	1f 91       	pop	r17
    114c:	0f 91       	pop	r16
    114e:	ff 90       	pop	r15
    1150:	ef 90       	pop	r14
    1152:	df 90       	pop	r13
    1154:	cf 90       	pop	r12
    1156:	bf 90       	pop	r11
    1158:	af 90       	pop	r10
    115a:	9f 90       	pop	r9
    115c:	8f 90       	pop	r8
    115e:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    1160:	b1 2c       	mov	r11, r1
    1162:	9e 01       	movw	r18, r28
    1164:	2f 5f       	subi	r18, 0xFF	; 255
    1166:	3f 4f       	sbci	r19, 0xFF	; 255
    1168:	69 01       	movw	r12, r18
    116a:	a3 cf       	rjmp	.-186    	; 0x10b2 <lcd_int32+0xa6>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    116c:	80 e3       	ldi	r24, 0x30	; 48
    116e:	c6 cf       	rjmp	.-116    	; 0x10fc <lcd_int32+0xf0>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    1170:	90 95       	com	r25
    1172:	80 95       	com	r24
    1174:	70 95       	com	r23
    1176:	61 95       	neg	r22
    1178:	7f 4f       	sbci	r23, 0xFF	; 255
    117a:	8f 4f       	sbci	r24, 0xFF	; 255
    117c:	9f 4f       	sbci	r25, 0xFF	; 255
    117e:	69 cf       	rjmp	.-302    	; 0x1052 <lcd_int32+0x46>

00001180 <lcd_int16>:
    1180:	5f 92       	push	r5
    1182:	6f 92       	push	r6
    1184:	7f 92       	push	r7
    1186:	8f 92       	push	r8
    1188:	9f 92       	push	r9
    118a:	af 92       	push	r10
    118c:	bf 92       	push	r11
    118e:	cf 92       	push	r12
    1190:	df 92       	push	r13
    1192:	ef 92       	push	r14
    1194:	ff 92       	push	r15
    1196:	0f 93       	push	r16
    1198:	1f 93       	push	r17
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	61 97       	sbiw	r28, 0x11	; 17
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	a6 2e       	mov	r10, r22
    11b0:	54 2e       	mov	r5, r20
    11b2:	62 2e       	mov	r6, r18
    11b4:	79 2e       	mov	r7, r25
    11b6:	77 1c       	adc	r7, r7
    11b8:	77 24       	eor	r7, r7
    11ba:	77 1c       	adc	r7, r7
    11bc:	b7 2c       	mov	r11, r7
    11be:	c7 2c       	mov	r12, r7
    11c0:	d1 2c       	mov	r13, r1
    11c2:	ee 27       	eor	r30, r30
    11c4:	ff 27       	eor	r31, r31
    11c6:	ec 19       	sub	r30, r12
    11c8:	fd 09       	sbc	r31, r13
    11ca:	8e 27       	eor	r24, r30
    11cc:	9f 27       	eor	r25, r31
    11ce:	fc 01       	movw	r30, r24
    11d0:	ec 0d       	add	r30, r12
    11d2:	fd 1d       	adc	r31, r13
    11d4:	44 23       	and	r20, r20
    11d6:	09 f4       	brne	.+2      	; 0x11da <lcd_int16+0x5a>
    11d8:	8e c0       	rjmp	.+284    	; 0x12f6 <lcd_int16+0x176>
    11da:	ce 01       	movw	r24, r28
    11dc:	01 96       	adiw	r24, 0x01	; 1
    11de:	7c 01       	movw	r14, r24
    11e0:	8c 01       	movw	r16, r24
    11e2:	88 24       	eor	r8, r8
    11e4:	8a 94       	dec	r8
    11e6:	84 0e       	add	r8, r20
    11e8:	91 2c       	mov	r9, r1
    11ea:	9f ef       	ldi	r25, 0xFF	; 255
    11ec:	89 1a       	sub	r8, r25
    11ee:	99 0a       	sbc	r9, r25
    11f0:	8e 0c       	add	r8, r14
    11f2:	9f 1c       	adc	r9, r15
    11f4:	6a e0       	ldi	r22, 0x0A	; 10
    11f6:	70 e0       	ldi	r23, 0x00	; 0
    11f8:	cf 01       	movw	r24, r30
    11fa:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__divmodhi4>
    11fe:	26 2f       	mov	r18, r22
    1200:	e2 2f       	mov	r30, r18
    1202:	f7 2f       	mov	r31, r23
    1204:	80 5d       	subi	r24, 0xD0	; 208
    1206:	d8 01       	movw	r26, r16
    1208:	8d 93       	st	X+, r24
    120a:	8d 01       	movw	r16, r26
    120c:	a8 15       	cp	r26, r8
    120e:	b9 05       	cpc	r27, r9
    1210:	89 f7       	brne	.-30     	; 0x11f4 <lcd_int16+0x74>
    1212:	01 e0       	ldi	r16, 0x01	; 1
    1214:	05 0d       	add	r16, r5
    1216:	d7 01       	movw	r26, r14
    1218:	a5 0d       	add	r26, r5
    121a:	b1 1d       	adc	r27, r1
    121c:	8e e2       	ldi	r24, 0x2E	; 46
    121e:	8c 93       	st	X, r24
    1220:	6a e0       	ldi	r22, 0x0A	; 10
    1222:	70 e0       	ldi	r23, 0x00	; 0
    1224:	cf 01       	movw	r24, r30
    1226:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__divmodhi4>
    122a:	26 2f       	mov	r18, r22
    122c:	e2 2f       	mov	r30, r18
    122e:	f7 2f       	mov	r31, r23
    1230:	11 e0       	ldi	r17, 0x01	; 1
    1232:	10 0f       	add	r17, r16
    1234:	d7 01       	movw	r26, r14
    1236:	a0 0f       	add	r26, r16
    1238:	b1 1d       	adc	r27, r1
    123a:	80 5d       	subi	r24, 0xD0	; 208
    123c:	8c 93       	st	X, r24
    123e:	01 2f       	mov	r16, r17
    1240:	30 97       	sbiw	r30, 0x00	; 0
    1242:	71 f7       	brne	.-36     	; 0x1220 <lcd_int16+0xa0>
    1244:	61 10       	cpse	r6, r1
    1246:	15 c0       	rjmp	.+42     	; 0x1272 <lcd_int16+0xf2>
    1248:	77 20       	and	r7, r7
    124a:	39 f0       	breq	.+14     	; 0x125a <lcd_int16+0xda>
    124c:	11 e0       	ldi	r17, 0x01	; 1
    124e:	10 0f       	add	r17, r16
    1250:	f7 01       	movw	r30, r14
    1252:	e0 0f       	add	r30, r16
    1254:	f1 1d       	adc	r31, r1
    1256:	8d e2       	ldi	r24, 0x2D	; 45
    1258:	80 83       	st	Z, r24
    125a:	aa 20       	and	r10, r10
    125c:	41 f1       	breq	.+80     	; 0x12ae <lcd_int16+0x12e>
    125e:	81 2f       	mov	r24, r17
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	2a 2d       	mov	r18, r10
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	82 17       	cp	r24, r18
    1268:	93 07       	cpc	r25, r19
    126a:	0c f5       	brge	.+66     	; 0x12ae <lcd_int16+0x12e>
    126c:	b1 2c       	mov	r11, r1
    126e:	40 e2       	ldi	r20, 0x20	; 32
    1270:	0c c0       	rjmp	.+24     	; 0x128a <lcd_int16+0x10a>
    1272:	aa 20       	and	r10, r10
    1274:	a1 f0       	breq	.+40     	; 0x129e <lcd_int16+0x11e>
    1276:	81 2f       	mov	r24, r17
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	2a 2d       	mov	r18, r10
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	2c 19       	sub	r18, r12
    1280:	3d 09       	sbc	r19, r13
    1282:	82 17       	cp	r24, r18
    1284:	93 07       	cpc	r25, r19
    1286:	5c f4       	brge	.+22     	; 0x129e <lcd_int16+0x11e>
    1288:	40 e3       	ldi	r20, 0x30	; 48
    128a:	1f 5f       	subi	r17, 0xFF	; 255
    128c:	f7 01       	movw	r30, r14
    128e:	e8 0f       	add	r30, r24
    1290:	f9 1f       	adc	r31, r25
    1292:	40 83       	st	Z, r20
    1294:	81 2f       	mov	r24, r17
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	82 17       	cp	r24, r18
    129a:	93 07       	cpc	r25, r19
    129c:	b4 f3       	brlt	.-20     	; 0x128a <lcd_int16+0x10a>
    129e:	bb 20       	and	r11, r11
    12a0:	31 f0       	breq	.+12     	; 0x12ae <lcd_int16+0x12e>
    12a2:	f7 01       	movw	r30, r14
    12a4:	e1 0f       	add	r30, r17
    12a6:	f1 1d       	adc	r31, r1
    12a8:	8d e2       	ldi	r24, 0x2D	; 45
    12aa:	80 83       	st	Z, r24
    12ac:	1f 5f       	subi	r17, 0xFF	; 255
    12ae:	11 50       	subi	r17, 0x01	; 1
    12b0:	f7 01       	movw	r30, r14
    12b2:	e1 0f       	add	r30, r17
    12b4:	f1 1d       	adc	r31, r1
    12b6:	60 81       	ld	r22, Z
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	0e 94 72 06 	call	0xce4	; 0xce4 <send_lcd>
    12be:	95 ed       	ldi	r25, 0xD5	; 213
    12c0:	9a 95       	dec	r25
    12c2:	f1 f7       	brne	.-4      	; 0x12c0 <lcd_int16+0x140>
    12c4:	00 00       	nop
    12c6:	11 11       	cpse	r17, r1
    12c8:	f2 cf       	rjmp	.-28     	; 0x12ae <lcd_int16+0x12e>
    12ca:	61 96       	adiw	r28, 0x11	; 17
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	de bf       	out	0x3e, r29	; 62
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	cd bf       	out	0x3d, r28	; 61
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	1f 91       	pop	r17
    12dc:	0f 91       	pop	r16
    12de:	ff 90       	pop	r15
    12e0:	ef 90       	pop	r14
    12e2:	df 90       	pop	r13
    12e4:	cf 90       	pop	r12
    12e6:	bf 90       	pop	r11
    12e8:	af 90       	pop	r10
    12ea:	9f 90       	pop	r9
    12ec:	8f 90       	pop	r8
    12ee:	7f 90       	pop	r7
    12f0:	6f 90       	pop	r6
    12f2:	5f 90       	pop	r5
    12f4:	08 95       	ret
    12f6:	00 e0       	ldi	r16, 0x00	; 0
    12f8:	ce 01       	movw	r24, r28
    12fa:	01 96       	adiw	r24, 0x01	; 1
    12fc:	7c 01       	movw	r14, r24
    12fe:	90 cf       	rjmp	.-224    	; 0x1220 <lcd_int16+0xa0>

00001300 <main>:

uint8_t main()
{
//set port B bits 4-7 as outputs
DDRB |= (1<<DDB4) | (1<<DDB5) | (1<<DDB6) | (1<<DDB7);
    1300:	87 b3       	in	r24, 0x17	; 23
    1302:	80 6f       	ori	r24, 0xF0	; 240
    1304:	87 bb       	out	0x17, r24	; 23
//drive PWM low
PORTB &= ~(1<<PB7);
    1306:	c7 98       	cbi	0x18, 7	; 24
//set portC to output SH!LD
//DDRC = (1<<DDC0) | (1<<DDC1);
//PORTC = 0;

//setup alarm output
DDRD |= (ALARM_PIN) | (mute); //see kellen_music.c for pin assignment
    1308:	81 b3       	in	r24, 0x11	; 17
    130a:	84 68       	ori	r24, 0x84	; 132
    130c:	81 bb       	out	0x11, r24	; 17
PORTD &= ~(ALARM_PIN) & ~(mute); //remove "mute" setup if using TCNT3 for volume
    130e:	82 b3       	in	r24, 0x12	; 18
    1310:	8b 77       	andi	r24, 0x7B	; 123
    1312:	82 bb       	out	0x12, r24	; 18
//setup alarm volume control
DDRE |= (1<<DDE3);
    1314:	13 9a       	sbi	0x02, 3	; 2
PORTE &= ~(1<<PE3);
    1316:	1b 98       	cbi	0x03, 3	; 3
//***********************************************************************
//                              tcnt0_init                             
//
//
void tcnt0_init(void){
 TIMSK |= (1<<TOIE0);	//enable overflow interrupt
    1318:	87 b7       	in	r24, 0x37	; 55
    131a:	81 60       	ori	r24, 0x01	; 1
    131c:	87 bf       	out	0x37, r24	; 55
 ASSR |= (1<<AS0);		//use external 32kHz clock
    131e:	80 b7       	in	r24, 0x30	; 48
    1320:	88 60       	ori	r24, 0x08	; 8
    1322:	80 bf       	out	0x30, r24	; 48
 TCCR0 |= (1<<CS00);	//no prescale
    1324:	83 b7       	in	r24, 0x33	; 51
    1326:	81 60       	ori	r24, 0x01	; 1
    1328:	83 bf       	out	0x33, r24	; 51
//                              tcnt0_init                             
//
//
void tcnt2_init(void){
 //fast PWM mode, non-inverting, clck/8 prescale
 TCCR2 |= (1<<CS21) | (1<<COM21) | (1<<COM20) | (1<<WGM20) | (1<<WGM21);
    132a:	85 b5       	in	r24, 0x25	; 37
    132c:	8a 67       	ori	r24, 0x7A	; 122
    132e:	85 bd       	out	0x25, r24	; 37
 //start on brightests
 OCR2 = 1;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	83 bd       	out	0x23, r24	; 35
//*************************************************************************

void tcnt3_init(void) {
  //PORTE bit 3
  //fast PWM, non-inverting, prescale clk/64
  TCCR3A |= (1<<COM3A1) | (1<<WGM31) | (1<<WGM30);
    1334:	80 91 8b 00 	lds	r24, 0x008B
    1338:	83 68       	ori	r24, 0x83	; 131
    133a:	80 93 8b 00 	sts	0x008B, r24
  TCCR3B |= (1<<CS30) | (1<<WGM33) | (1<<WGM32);
    133e:	80 91 8a 00 	lds	r24, 0x008A
    1342:	89 61       	ori	r24, 0x19	; 25
    1344:	80 93 8a 00 	sts	0x008A, r24
  TCCR3C = 0x00;
    1348:	10 92 8c 00 	sts	0x008C, r1
  //controls volume, set initially high for quiet output
  OCR3A = 0xffff;
    134c:	8f ef       	ldi	r24, 0xFF	; 255
    134e:	9f ef       	ldi	r25, 0xFF	; 255
    1350:	90 93 87 00 	sts	0x0087, r25
    1354:	80 93 86 00 	sts	0x0086, r24
PORTE &= ~(1<<PE3);

tcnt0_init();  //initalize counter timer zero
tcnt2_init();  //initalize counter timer two
tcnt3_init();
spi_init();    //initalize SPI port
    1358:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <spi_init>
lcd_init();    //initalize LCD (lcd_functions.h)
    135c:	0e 94 ac 07 	call	0xf58	; 0xf58 <lcd_init>
clear_display();
    1360:	0e 94 57 07 	call	0xeae	; 0xeae <clear_display>
sei();         //enable interrupts before entering loop
    1364:	78 94       	sei

music_init();
    1366:	0e 94 20 05 	call	0xa40	; 0xa40 <music_init>

int digit_count = 0;
int i = 0;

//make port F bit 7 is ADC input  
PORTF &= ~(_BV(PF7));  //port F bit 7 pullups must be off
    136a:	80 91 62 00 	lds	r24, 0x0062
    136e:	8f 77       	andi	r24, 0x7F	; 127
    1370:	80 93 62 00 	sts	0x0062, r24
                       
ADMUX = (1<<REFS0) | (1<<MUX2) | (1<<MUX1) | (1<<MUX0); //single-ended, input PORTF bit 7, right adjusted, 10 bits
    1374:	87 e4       	ldi	r24, 0x47	; 71
    1376:	87 b9       	out	0x07, r24	; 7
ADCSRA = (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2); //ADC enabled, don't start et, single shot mode
    1378:	87 e8       	ldi	r24, 0x87	; 135
    137a:	86 b9       	out	0x06, r24	; 6
clear_display();
sei();         //enable interrupts before entering loop

music_init();

int digit_count = 0;
    137c:	00 e0       	ldi	r16, 0x00	; 0
    137e:	10 e0       	ldi	r17, 0x00	; 0
    1380:	22 e4       	ldi	r18, 0x42	; 66
    1382:	a2 2e       	mov	r10, r18
    1384:	21 e0       	ldi	r18, 0x01	; 1
    1386:	b2 2e       	mov	r11, r18
			case 5:
				alarm_hours++;
				break;
			case 6:
				//reset snooze
				snooze_flag ^= 0x01;
    1388:	d1 e0       	ldi	r29, 0x01	; 1
				snooze_counter = 0;
				//turn off the alarm
				music_off();
				OCR3A = 0xffff;
    138a:	cc 24       	eor	r12, r12
    138c:	ca 94       	dec	r12
    138e:	dc 2c       	mov	r13, r12
			case 5:
				alarm_hours++;
				break;
			case 6:
				//reset snooze
				snooze_flag ^= 0x01;
    1390:	55 24       	eor	r5, r5
    1392:	53 94       	inc	r5

//clears the lcd_string_array
void clear_lcd_array(void) {
	int i = 0;
	for(i = 0; i < 32; i++) {
		lcd_string_array[i] = ' ';
    1394:	c0 e2       	ldi	r28, 0x20	; 32
  itoa(alarm_minutes, lcd_str_minutes, 10);
  //convert hours from int to string
  itoa(alarm_hours, lcd_str_hour, 10);
  //copy string minutes and hours strings into master string
  strcpy(lcd_string_array, lcd_str_hour);
  strcat(lcd_string_array, ":");
    1396:	4a e3       	ldi	r20, 0x3A	; 58
    1398:	e4 2e       	mov	r14, r20
    139a:	f1 2c       	mov	r15, r1
  //add a leading 0 if minutes < 10
  if(alarm_minutes < 10) {
	  strcat(lcd_string_array, "0");
    139c:	50 e3       	ldi	r21, 0x30	; 48
    139e:	65 2e       	mov	r6, r21
    13a0:	71 2c       	mov	r7, r1
ADCSRA = (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2); //ADC enabled, don't start et, single shot mode
															//division factor is 128 (125khz)
while(1){
	
//ADC--------------------------------------------------------------------------------
	ADCSRA |= (1<<ADSC);    // poke ADSC and start conversion
    13a2:	36 9a       	sbi	0x06, 6	; 6
	while (bit_is_clear(ADCSRA,ADIF)){}; // spin while interrupt flag not set
    13a4:	34 9b       	sbis	0x06, 4	; 6
    13a6:	fe cf       	rjmp	.-4      	; 0x13a4 <main+0xa4>

	ADCSRA |= (1<<ADIF); //its done, clear flag by writing a one
    13a8:	34 9a       	sbi	0x06, 4	; 6

	OCR2 = (ADC & 0xff);                      //read the ADC output as 16 bits
    13aa:	84 b1       	in	r24, 0x04	; 4
    13ac:	95 b1       	in	r25, 0x05	; 5
    13ae:	83 bd       	out	0x23, r24	; 35
//END ADC---------------------------------------------------------------------------

//Buttons---------------------------------------------------------------------------
	//make PORTA an input port with pullups 
	DDRA = 0;
    13b0:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xff;
    13b2:	8f ef       	ldi	r24, 0xFF	; 255
    13b4:	8b bb       	out	0x1b, r24	; 27
	//enable tristate buffer for pushbutton switches
	PORTB |= (1<<PB4) | (1<<PB5) | (1<<PB6);
    13b6:	88 b3       	in	r24, 0x18	; 24
    13b8:	80 67       	ori	r24, 0x70	; 112
    13ba:	88 bb       	out	0x18, r24	; 24
    13bc:	af e2       	ldi	r26, 0x2F	; 47
    13be:	b1 e0       	ldi	r27, 0x01	; 1
    13c0:	41 e0       	ldi	r20, 0x01	; 1
    13c2:	50 e0       	ldi	r21, 0x00	; 0
    13c4:	06 c0       	rjmp	.+12     	; 0x13d2 <main+0xd2>
	//now check each button and increment the count as needed
	//uint8_t button_press = 0;
	for(i = 0; i < 8; i++) {
    13c6:	48 30       	cpi	r20, 0x08	; 8
    13c8:	51 05       	cpc	r21, r1
    13ca:	09 f4       	brne	.+2      	; 0x13ce <main+0xce>
    13cc:	77 c0       	rjmp	.+238    	; 0x14bc <main+0x1bc>
    13ce:	4f 5f       	subi	r20, 0xFF	; 255
    13d0:	5f 4f       	sbci	r21, 0xFF	; 255
    13d2:	fa 01       	movw	r30, r20
    13d4:	31 97       	sbiw	r30, 0x01	; 1
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) {
	static uint16_t state[8]; //holds present state
	state[button] = (state[button] << 1) | (!bit_is_clear(PINA, button)) | 0xFE00; //update state
    13d6:	89 b3       	in	r24, 0x19	; 25
    13d8:	2d 91       	ld	r18, X+
    13da:	3c 91       	ld	r19, X
    13dc:	11 97       	sbiw	r26, 0x01	; 1
    13de:	22 0f       	add	r18, r18
    13e0:	33 1f       	adc	r19, r19
    13e2:	3e 6f       	ori	r19, 0xFE	; 254
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	0e 2e       	mov	r0, r30
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <main+0xee>
    13ea:	95 95       	asr	r25
    13ec:	87 95       	ror	r24
    13ee:	0a 94       	dec	r0
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <main+0xea>
    13f2:	81 70       	andi	r24, 0x01	; 1
    13f4:	99 27       	eor	r25, r25
    13f6:	82 2b       	or	r24, r18
    13f8:	93 2b       	or	r25, r19
    13fa:	8d 93       	st	X+, r24
    13fc:	9d 93       	st	X+, r25
	if(state[button] == 0xFF00) {
    13fe:	81 15       	cp	r24, r1
    1400:	9f 4f       	sbci	r25, 0xFF	; 255
    1402:	09 f7       	brne	.-62     	; 0x13c6 <main+0xc6>
	//uint8_t button_press = 0;
	for(i = 0; i < 8; i++) {
	  if(chk_buttons(i)) {
		  //turn the mode on at button if its off
		  //turn mode off at button if its on
		switch(i) {
    1404:	e7 30       	cpi	r30, 0x07	; 7
    1406:	f1 05       	cpc	r31, r1
    1408:	f0 f6       	brcc	.-68     	; 0x13c6 <main+0xc6>
    140a:	ec 52       	subi	r30, 0x2C	; 44
    140c:	ff 4f       	sbci	r31, 0xFF	; 255
    140e:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__tablejump2__>
				break;
			case 4:
				alarm_minutes++;
				break;
			case 5:
				alarm_hours++;
    1412:	80 91 26 01 	lds	r24, 0x0126
    1416:	8f 5f       	subi	r24, 0xFF	; 255
    1418:	80 93 26 01 	sts	0x0126, r24
				break;
    141c:	d8 cf       	rjmp	.-80     	; 0x13ce <main+0xce>
					OCR3A = 0xffff;
					alarm_on = 0;
				}
				break;
			case 4:
				alarm_minutes++;
    141e:	80 91 25 01 	lds	r24, 0x0125
    1422:	8f 5f       	subi	r24, 0xFF	; 255
    1424:	80 93 25 01 	sts	0x0125, r24
				break;
    1428:	d2 cf       	rjmp	.-92     	; 0x13ce <main+0xce>
			case 2:
				hours++;
				break;
			case 3:
				//toggle alarm_set flag to turn alarm on/off
				alarm_set ^= 0x01;
    142a:	80 91 27 01 	lds	r24, 0x0127
    142e:	8d 27       	eor	r24, r29
    1430:	80 93 27 01 	sts	0x0127, r24
				//mute the alarm when I turn it off
				if((alarm_set == 0) & alarm_on) {
    1434:	21 e0       	ldi	r18, 0x01	; 1
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	88 23       	and	r24, r24
    143a:	11 f0       	breq	.+4      	; 0x1440 <main+0x140>
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	80 91 20 01 	lds	r24, 0x0120
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	82 23       	and	r24, r18
    1448:	93 23       	and	r25, r19
    144a:	89 2b       	or	r24, r25
    144c:	09 f4       	brne	.+2      	; 0x1450 <main+0x150>
    144e:	bf cf       	rjmp	.-130    	; 0x13ce <main+0xce>
  }
}

void music_off(void) {
  //this turns the alarm timer off
  notes=0;
    1450:	10 92 40 01 	sts	0x0140, r1
  TCCR1B &= ~((1<<CS11)|(1<<CS10));
    1454:	8e b5       	in	r24, 0x2e	; 46
    1456:	8c 7f       	andi	r24, 0xFC	; 252
    1458:	8e bd       	out	0x2e, r24	; 46
  //and mutes the output
  PORTD |= mute;
    145a:	92 9a       	sbi	0x12, 2	; 18
					music_off();
					OCR3A = 0xffff;
    145c:	d0 92 87 00 	sts	0x0087, r13
    1460:	c0 92 86 00 	sts	0x0086, r12
					alarm_on = 0;
    1464:	10 92 20 01 	sts	0x0120, r1
    1468:	b2 cf       	rjmp	.-156    	; 0x13ce <main+0xce>
				break;
			case 1:
				minutes++;
				break;
			case 2:
				hours++;
    146a:	80 91 28 01 	lds	r24, 0x0128
    146e:	8f 5f       	subi	r24, 0xFF	; 255
    1470:	80 93 28 01 	sts	0x0128, r24
				break;
    1474:	ac cf       	rjmp	.-168    	; 0x13ce <main+0xce>
				alarm_minutes = 0;
				alarm_hours = 0;
				alarm_set = 0;
				break;
			case 1:
				minutes++;
    1476:	80 91 29 01 	lds	r24, 0x0129
    147a:	8f 5f       	subi	r24, 0xFF	; 255
    147c:	80 93 29 01 	sts	0x0129, r24
				break;
    1480:	a6 cf       	rjmp	.-180    	; 0x13ce <main+0xce>
	  if(chk_buttons(i)) {
		  //turn the mode on at button if its off
		  //turn mode off at button if its on
		switch(i) {
			case 0:
				minutes = 0;
    1482:	10 92 29 01 	sts	0x0129, r1
				hours = 0;
    1486:	10 92 28 01 	sts	0x0128, r1
				alarm_minutes = 0;
    148a:	10 92 25 01 	sts	0x0125, r1
				alarm_hours = 0;
    148e:	10 92 26 01 	sts	0x0126, r1
				alarm_set = 0;
    1492:	10 92 27 01 	sts	0x0127, r1
				break;
    1496:	9b cf       	rjmp	.-202    	; 0x13ce <main+0xce>
			case 5:
				alarm_hours++;
				break;
			case 6:
				//reset snooze
				snooze_flag ^= 0x01;
    1498:	80 91 22 01 	lds	r24, 0x0122
    149c:	8d 27       	eor	r24, r29
    149e:	80 93 22 01 	sts	0x0122, r24
				snooze_counter = 0;
    14a2:	10 92 23 01 	sts	0x0123, r1
  }
}

void music_off(void) {
  //this turns the alarm timer off
  notes=0;
    14a6:	10 92 40 01 	sts	0x0140, r1
  TCCR1B &= ~((1<<CS11)|(1<<CS10));
    14aa:	8e b5       	in	r24, 0x2e	; 46
    14ac:	8c 7f       	andi	r24, 0xFC	; 252
    14ae:	8e bd       	out	0x2e, r24	; 46
  //and mutes the output
  PORTD |= mute;
    14b0:	92 9a       	sbi	0x12, 2	; 18
				//turn off the alarm
				music_off();
				OCR3A = 0xffff;
    14b2:	d0 92 87 00 	sts	0x0087, r13
    14b6:	c0 92 86 00 	sts	0x0086, r12
				break;
    14ba:	89 cf       	rjmp	.-238    	; 0x13ce <main+0xce>
		}
	  }

	}
	//disable tristate buffer for pushbutton switches
	PORTB |= (1<<PB5) | (1<<PB6);  //enables unused Y6 output
    14bc:	88 b3       	in	r24, 0x18	; 24
    14be:	80 66       	ori	r24, 0x60	; 96
    14c0:	88 bb       	out	0x18, r24	; 24
	PORTB &= ~(1<<PB4);
    14c2:	c4 98       	cbi	0x18, 4	; 24
//END BUTTONS-----------------------------------------------------------------------------

//LED DISPLAY-----------------------------------------------------------------------------
  //adjust time for overflow
  if(sec > 59) {
    14c4:	80 91 2b 01 	lds	r24, 0x012B
	  minutes++;
    14c8:	40 91 29 01 	lds	r20, 0x0129
	PORTB &= ~(1<<PB4);
//END BUTTONS-----------------------------------------------------------------------------

//LED DISPLAY-----------------------------------------------------------------------------
  //adjust time for overflow
  if(sec > 59) {
    14cc:	8c 33       	cpi	r24, 0x3C	; 60
    14ce:	28 f0       	brcs	.+10     	; 0x14da <main+0x1da>
	  minutes++;
    14d0:	4f 5f       	subi	r20, 0xFF	; 255
    14d2:	40 93 29 01 	sts	0x0129, r20
	  sec = 0;
    14d6:	10 92 2b 01 	sts	0x012B, r1
  }
  if(minutes > 59) {
	  hours++;
    14da:	80 91 28 01 	lds	r24, 0x0128
  //adjust time for overflow
  if(sec > 59) {
	  minutes++;
	  sec = 0;
  }
  if(minutes > 59) {
    14de:	4c 33       	cpi	r20, 0x3C	; 60
    14e0:	08 f0       	brcs	.+2      	; 0x14e4 <main+0x1e4>
    14e2:	1e c1       	rjmp	.+572    	; 0x1720 <main+0x420>
    14e4:	50 e0       	ldi	r21, 0x00	; 0
	  hours++;
	  minutes = 0;
  }
  if(hours > 24) {
    14e6:	89 31       	cpi	r24, 0x19	; 25
    14e8:	08 f0       	brcs	.+2      	; 0x14ec <main+0x1ec>
    14ea:	15 c1       	rjmp	.+554    	; 0x1716 <main+0x416>
    14ec:	24 e6       	ldi	r18, 0x64	; 100
    14ee:	82 9f       	mul	r24, r18
    14f0:	c0 01       	movw	r24, r0
    14f2:	11 24       	eor	r1, r1
	  hours = 0;
  }
  
  //update the time to display on the LED
  disp_num = (hours * 100) + minutes;
    14f4:	48 0f       	add	r20, r24
    14f6:	59 1f       	adc	r21, r25
    14f8:	50 93 2e 01 	sts	0x012E, r21
    14fc:	40 93 2d 01 	sts	0x012D, r20

uint16_t bin_to_bcd(uint16_t i) {
    uint16_t binaryShift = 0;
    uint16_t digit;
    uint16_t bcd = 0;
    while (i > 0) {
    1500:	e0 e0       	ldi	r30, 0x00	; 0
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	41 15       	cp	r20, r1
    1506:	51 05       	cpc	r21, r1
    1508:	49 f1       	breq	.+82     	; 0x155c <main+0x25c>
    150a:	81 2c       	mov	r8, r1
    150c:	91 2c       	mov	r9, r1
        //mod by 10 each time to move from 1s to 10s, so on
        digit = i % 10;
    150e:	9a 01       	movw	r18, r20
    1510:	ad ec       	ldi	r26, 0xCD	; 205
    1512:	bc ec       	ldi	r27, 0xCC	; 204
    1514:	0e 94 15 0c 	call	0x182a	; 0x182a <__umulhisi3>
    1518:	96 95       	lsr	r25
    151a:	87 95       	ror	r24
    151c:	96 95       	lsr	r25
    151e:	87 95       	ror	r24
    1520:	96 95       	lsr	r25
    1522:	87 95       	ror	r24
    1524:	bc 01       	movw	r22, r24
    1526:	66 0f       	add	r22, r22
    1528:	77 1f       	adc	r23, r23
    152a:	9c 01       	movw	r18, r24
    152c:	22 0f       	add	r18, r18
    152e:	33 1f       	adc	r19, r19
    1530:	22 0f       	add	r18, r18
    1532:	33 1f       	adc	r19, r19
    1534:	22 0f       	add	r18, r18
    1536:	33 1f       	adc	r19, r19
    1538:	26 0f       	add	r18, r22
    153a:	37 1f       	adc	r19, r23
    153c:	42 1b       	sub	r20, r18
    153e:	53 0b       	sbc	r21, r19
        //extract each decimal digit encoded with 4 bits
        bcd += (digit << binaryShift);
    1540:	08 2c       	mov	r0, r8
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <main+0x248>
    1544:	44 0f       	add	r20, r20
    1546:	55 1f       	adc	r21, r21
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <main+0x244>
    154c:	e4 0f       	add	r30, r20
    154e:	f5 1f       	adc	r31, r21
        //shift another 4 bits to get the next digit
        binaryShift += 4;
    1550:	24 e0       	ldi	r18, 0x04	; 4
    1552:	82 0e       	add	r8, r18
    1554:	91 1c       	adc	r9, r1
        i /= 10;
    1556:	ac 01       	movw	r20, r24

uint16_t bin_to_bcd(uint16_t i) {
    uint16_t binaryShift = 0;
    uint16_t digit;
    uint16_t bcd = 0;
    while (i > 0) {
    1558:	89 2b       	or	r24, r25
    155a:	c9 f6       	brne	.-78     	; 0x150e <main+0x20e>
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  digit3|digit2||colon|digit1|digit0|
void segsum(uint16_t bcd) {
    uint8_t digit;
    uint8_t i = 0;
	for(i = 0; i < 5; i++) {
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	10 c0       	rjmp	.+32     	; 0x1580 <main+0x280>
			i++;
		}
		//extract the rightmost 4 bits
		digit = bcd & 0xF;
		//put the extracted digit into segment_data array
		segment_data[i] = digit;
    1560:	a8 2f       	mov	r26, r24
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	ac 5e       	subi	r26, 0xEC	; 236
    1566:	be 4f       	sbci	r27, 0xFE	; 254
		//ignore colon on display
		if(i == 2) {
			i++;
		}
		//extract the rightmost 4 bits
		digit = bcd & 0xF;
    1568:	9e 2f       	mov	r25, r30
    156a:	9f 70       	andi	r25, 0x0F	; 15
		//put the extracted digit into segment_data array
		segment_data[i] = digit;
    156c:	9c 93       	st	X, r25
		//shift the bcd value to move to the next digit
		bcd >>= 4;
    156e:	f2 95       	swap	r31
    1570:	e2 95       	swap	r30
    1572:	ef 70       	andi	r30, 0x0F	; 15
    1574:	ef 27       	eor	r30, r31
    1576:	ff 70       	andi	r31, 0x0F	; 15
    1578:	ef 27       	eor	r30, r31
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  digit3|digit2||colon|digit1|digit0|
void segsum(uint16_t bcd) {
    uint8_t digit;
    uint8_t i = 0;
	for(i = 0; i < 5; i++) {
    157a:	8f 5f       	subi	r24, 0xFF	; 255
    157c:	85 30       	cpi	r24, 0x05	; 5
    157e:	70 f4       	brcc	.+28     	; 0x159c <main+0x29c>
		//ignore colon on display
		if(i == 2) {
    1580:	82 30       	cpi	r24, 0x02	; 2
    1582:	71 f7       	brne	.-36     	; 0x1560 <main+0x260>
			i++;
		}
		//extract the rightmost 4 bits
		digit = bcd & 0xF;
    1584:	8e 2f       	mov	r24, r30
    1586:	8f 70       	andi	r24, 0x0F	; 15
		//put the extracted digit into segment_data array
		segment_data[i] = digit;
    1588:	80 93 17 01 	sts	0x0117, r24
		//shift the bcd value to move to the next digit
		bcd >>= 4;
    158c:	f2 95       	swap	r31
    158e:	e2 95       	swap	r30
    1590:	ef 70       	andi	r30, 0x0F	; 15
    1592:	ef 27       	eor	r30, r31
    1594:	ff 70       	andi	r31, 0x0F	; 15
    1596:	ef 27       	eor	r30, r31
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  digit3|digit2||colon|digit1|digit0|
void segsum(uint16_t bcd) {
    uint8_t digit;
    uint8_t i = 0;
	for(i = 0; i < 5; i++) {
    1598:	84 e0       	ldi	r24, 0x04	; 4
    159a:	e2 cf       	rjmp	.-60     	; 0x1560 <main+0x260>
  //update the time to display on the LED
  disp_num = (hours * 100) + minutes;
  //break up the number to display into 4 separate bcd digits
  segsum(bin_to_bcd(disp_num));
  //make PORTA an output
  DDRA = 0xff;
    159c:	8f ef       	ldi	r24, 0xFF	; 255
    159e:	8a bb       	out	0x1a, r24	; 26
  //write the digits to the 7-seg display
  PORTA = dec_to_7seg[segment_data[digit_count]];
    15a0:	f8 01       	movw	r30, r16
    15a2:	ec 5e       	subi	r30, 0xEC	; 236
    15a4:	fe 4f       	sbci	r31, 0xFE	; 254
    15a6:	e0 81       	ld	r30, Z
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	e6 5f       	subi	r30, 0xF6	; 246
    15ac:	fe 4f       	sbci	r31, 0xFE	; 254
    15ae:	80 81       	ld	r24, Z
    15b0:	8b bb       	out	0x1b, r24	; 27
  //select the correct digit
  PORTB |= portb_digit_or[digit_count];
    15b2:	98 b3       	in	r25, 0x18	; 24
    15b4:	f8 01       	movw	r30, r16
    15b6:	eb 5f       	subi	r30, 0xFB	; 251
    15b8:	fe 4f       	sbci	r31, 0xFE	; 254
    15ba:	80 81       	ld	r24, Z
    15bc:	89 2b       	or	r24, r25
    15be:	88 bb       	out	0x18, r24	; 24
  PORTB &= portb_digit_and[digit_count];
    15c0:	98 b3       	in	r25, 0x18	; 24
    15c2:	f8 01       	movw	r30, r16
    15c4:	e0 50       	subi	r30, 0x00	; 0
    15c6:	ff 4f       	sbci	r31, 0xFF	; 255
    15c8:	80 81       	ld	r24, Z
    15ca:	89 23       	and	r24, r25
    15cc:	88 bb       	out	0x18, r24	; 24
  //update digit to display
  digit_count++;
    15ce:	48 01       	movw	r8, r16
    15d0:	8f ef       	ldi	r24, 0xFF	; 255
    15d2:	88 1a       	sub	r8, r24
    15d4:	98 0a       	sbc	r9, r24
  //remove leading zero from clock
  if((digit_count == 4) & (hours < 10)) {
    15d6:	94 e0       	ldi	r25, 0x04	; 4
    15d8:	89 16       	cp	r8, r25
    15da:	91 04       	cpc	r9, r1
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <main+0x2e0>
    15de:	91 c0       	rjmp	.+290    	; 0x1702 <main+0x402>
	  digit_count++;
  }
  //loop back to first digit when needed
  if(digit_count > 4) {
    15e0:	85 e0       	ldi	r24, 0x05	; 5
    15e2:	88 16       	cp	r8, r24
    15e4:	91 04       	cpc	r9, r1
    15e6:	14 f0       	brlt	.+4      	; 0x15ec <main+0x2ec>
	  digit_count = 0;
    15e8:	81 2c       	mov	r8, r1
    15ea:	91 2c       	mov	r9, r1
  }
//END LED DISPLAY-----------------------------------------------------------------------------

//LCD DISPLAY---------------------------------------------------------------------------------
  //check for minutes or hour overflow
  if(alarm_minutes > 59) {
    15ec:	80 91 25 01 	lds	r24, 0x0125
    15f0:	8c 33       	cpi	r24, 0x3C	; 60
    15f2:	08 f0       	brcs	.+2      	; 0x15f6 <main+0x2f6>
    15f4:	9d c0       	rjmp	.+314    	; 0x1730 <main+0x430>
    15f6:	90 e0       	ldi	r25, 0x00	; 0
	  alarm_minutes = 0;
  }
  if(alarm_hours > 24) {
    15f8:	20 91 26 01 	lds	r18, 0x0126
    15fc:	29 31       	cpi	r18, 0x19	; 25
    15fe:	10 f0       	brcs	.+4      	; 0x1604 <main+0x304>
	  alarm_hours = 0;
    1600:	10 92 26 01 	sts	0x0126, r1
    1604:	e2 e4       	ldi	r30, 0x42	; 66
    1606:	f1 e0       	ldi	r31, 0x01	; 1

//clears the lcd_string_array
void clear_lcd_array(void) {
	int i = 0;
	for(i = 0; i < 32; i++) {
		lcd_string_array[i] = ' ';
    1608:	c1 93       	st	Z+, r28
//*******************************************************************************

//clears the lcd_string_array
void clear_lcd_array(void) {
	int i = 0;
	for(i = 0; i < 32; i++) {
    160a:	21 e0       	ldi	r18, 0x01	; 1
    160c:	e2 36       	cpi	r30, 0x62	; 98
    160e:	f2 07       	cpc	r31, r18
    1610:	d9 f7       	brne	.-10     	; 0x1608 <main+0x308>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1612:	4a e0       	ldi	r20, 0x0A	; 10
    1614:	66 e7       	ldi	r22, 0x76	; 118
    1616:	71 e0       	ldi	r23, 0x01	; 1
    1618:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__itoa_ncheck>
  //clean out the lcd_string_array
  clear_lcd_array();
  //convert minutes from int to string
  itoa(alarm_minutes, lcd_str_minutes, 10);
  //convert hours from int to string
  itoa(alarm_hours, lcd_str_hour, 10);
    161c:	80 91 26 01 	lds	r24, 0x0126
    1620:	4a e0       	ldi	r20, 0x0A	; 10
    1622:	66 e6       	ldi	r22, 0x66	; 102
    1624:	71 e0       	ldi	r23, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__itoa_ncheck>
  //copy string minutes and hours strings into master string
  strcpy(lcd_string_array, lcd_str_hour);
    162c:	66 e6       	ldi	r22, 0x66	; 102
    162e:	71 e0       	ldi	r23, 0x01	; 1
    1630:	82 e4       	ldi	r24, 0x42	; 66
    1632:	91 e0       	ldi	r25, 0x01	; 1
    1634:	0e 94 65 0c 	call	0x18ca	; 0x18ca <strcpy>
  strcat(lcd_string_array, ":");
    1638:	f5 01       	movw	r30, r10
    163a:	01 90       	ld	r0, Z+
    163c:	00 20       	and	r0, r0
    163e:	e9 f7       	brne	.-6      	; 0x163a <main+0x33a>
    1640:	31 97       	sbiw	r30, 0x01	; 1
    1642:	9f 01       	movw	r18, r30
    1644:	22 54       	subi	r18, 0x42	; 66
    1646:	31 40       	sbci	r19, 0x01	; 1
    1648:	f1 82       	std	Z+1, r15	; 0x01
    164a:	e0 82       	st	Z, r14
  //add a leading 0 if minutes < 10
  if(alarm_minutes < 10) {
    164c:	80 91 25 01 	lds	r24, 0x0125
    1650:	8a 30       	cpi	r24, 0x0A	; 10
    1652:	08 f4       	brcc	.+2      	; 0x1656 <main+0x356>
    1654:	a8 c0       	rjmp	.+336    	; 0x17a6 <main+0x4a6>
	  strcat(lcd_string_array, "0");
  }
  strcat(lcd_string_array, lcd_str_minutes);
    1656:	66 e7       	ldi	r22, 0x76	; 118
    1658:	71 e0       	ldi	r23, 0x01	; 1
    165a:	82 e4       	ldi	r24, 0x42	; 66
    165c:	91 e0       	ldi	r25, 0x01	; 1
    165e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <strcat>
  //indicate whether the alarm is set
  if(alarm_set) {
    1662:	80 91 27 01 	lds	r24, 0x0127
    1666:	81 11       	cpse	r24, r1
    1668:	91 c0       	rjmp	.+290    	; 0x178c <main+0x48c>
	  strcat(lcd_string_array, " ALARM");
  }
  
  //delete null terminator from string functions
  lcd_string_array[strlen(lcd_string_array)] = ' ';
    166a:	f5 01       	movw	r30, r10
    166c:	01 90       	ld	r0, Z+
    166e:	00 20       	and	r0, r0
    1670:	e9 f7       	brne	.-6      	; 0x166c <main+0x36c>
    1672:	31 97       	sbiw	r30, 0x01	; 1
    1674:	c0 83       	st	Z, r28
  //write the master string to the lcd
  refresh_lcd(lcd_string_array);
    1676:	82 e4       	ldi	r24, 0x42	; 66
    1678:	91 e0       	ldi	r25, 0x01	; 1
    167a:	0e 94 87 06 	call	0xd0e	; 0xd0e <refresh_lcd>
//END LCD DISPLAY---------------------------------------------------------------------------------  

//SNOOZE CHECK------------------------------------------------------------------------------------
  if(snooze_counter > 10) {
    167e:	80 91 23 01 	lds	r24, 0x0123
    1682:	8b 30       	cpi	r24, 0x0B	; 11
    1684:	08 f0       	brcs	.+2      	; 0x1688 <main+0x388>
    1686:	59 c0       	rjmp	.+178    	; 0x173a <main+0x43a>
    1688:	91 e0       	ldi	r25, 0x01	; 1
    168a:	80 91 21 01 	lds	r24, 0x0121
    168e:	81 11       	cpse	r24, r1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	20 91 22 01 	lds	r18, 0x0122
    1698:	21 11       	cpse	r18, r1
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	89 23       	and	r24, r25
    169e:	90 e0       	ldi	r25, 0x00	; 0
    snooze_counter = 0;
    snooze_flag = 0;
    snooze_check = 0;
  }
  if(alarm_on & (snooze_flag == 0) & (snooze_check == 0)) {
    16a0:	40 91 20 01 	lds	r20, 0x0120
    16a4:	24 2f       	mov	r18, r20
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	82 23       	and	r24, r18
    16aa:	93 23       	and	r25, r19
    16ac:	89 2b       	or	r24, r25
    16ae:	09 f0       	breq	.+2      	; 0x16b2 <main+0x3b2>
    16b0:	55 c0       	rjmp	.+170    	; 0x175c <main+0x45c>
    snooze_check = 1;
  }
//END SNOOZE CHECK--------------------------------------------------------------------------------

//ALARM SOUND------------------------------------------------------------------------------------
  if(alarm_set & (alarm_hours == hours) & (alarm_minutes == minutes) & (alarm_on == 0)) {
    16b2:	91 e0       	ldi	r25, 0x01	; 1
    16b4:	20 91 25 01 	lds	r18, 0x0125
    16b8:	80 91 29 01 	lds	r24, 0x0129
    16bc:	28 13       	cpse	r18, r24
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	30 91 26 01 	lds	r19, 0x0126
    16c6:	20 91 28 01 	lds	r18, 0x0128
    16ca:	32 13       	cpse	r19, r18
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	89 23       	and	r24, r25
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	20 91 27 01 	lds	r18, 0x0127
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	82 23       	and	r24, r18
    16da:	93 23       	and	r25, r19
    16dc:	21 e0       	ldi	r18, 0x01	; 1
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	44 23       	and	r20, r20
    16e2:	11 f0       	breq	.+4      	; 0x16e8 <main+0x3e8>
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	82 23       	and	r24, r18
    16ea:	93 23       	and	r25, r19
    16ec:	89 2b       	or	r24, r25
    16ee:	09 f0       	breq	.+2      	; 0x16f2 <main+0x3f2>
    16f0:	42 c0       	rjmp	.+132    	; 0x1776 <main+0x476>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16f2:	8f e9       	ldi	r24, 0x9F	; 159
    16f4:	9f e0       	ldi	r25, 0x0F	; 15
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	f1 f7       	brne	.-4      	; 0x16f6 <main+0x3f6>
    16fa:	00 c0       	rjmp	.+0      	; 0x16fc <main+0x3fc>
    16fc:	00 00       	nop
    16fe:	84 01       	movw	r16, r8
    1700:	50 ce       	rjmp	.-864    	; 0x13a2 <main+0xa2>
  PORTB |= portb_digit_or[digit_count];
  PORTB &= portb_digit_and[digit_count];
  //update digit to display
  digit_count++;
  //remove leading zero from clock
  if((digit_count == 4) & (hours < 10)) {
    1702:	80 91 28 01 	lds	r24, 0x0128
    1706:	8a 30       	cpi	r24, 0x0A	; 10
    1708:	08 f0       	brcs	.+2      	; 0x170c <main+0x40c>
    170a:	6a cf       	rjmp	.-300    	; 0x15e0 <main+0x2e0>
	  digit_count++;
    170c:	48 01       	movw	r8, r16
    170e:	22 e0       	ldi	r18, 0x02	; 2
    1710:	82 0e       	add	r8, r18
    1712:	91 1c       	adc	r9, r1
    1714:	65 cf       	rjmp	.-310    	; 0x15e0 <main+0x2e0>
  if(minutes > 59) {
	  hours++;
	  minutes = 0;
  }
  if(hours > 24) {
	  hours = 0;
    1716:	10 92 28 01 	sts	0x0128, r1
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	ea ce       	rjmp	.-556    	; 0x14f4 <main+0x1f4>
  if(sec > 59) {
	  minutes++;
	  sec = 0;
  }
  if(minutes > 59) {
	  hours++;
    1720:	8f 5f       	subi	r24, 0xFF	; 255
    1722:	80 93 28 01 	sts	0x0128, r24
	  minutes = 0;
    1726:	10 92 29 01 	sts	0x0129, r1
    172a:	40 e0       	ldi	r20, 0x00	; 0
    172c:	50 e0       	ldi	r21, 0x00	; 0
    172e:	db ce       	rjmp	.-586    	; 0x14e6 <main+0x1e6>
//END LED DISPLAY-----------------------------------------------------------------------------

//LCD DISPLAY---------------------------------------------------------------------------------
  //check for minutes or hour overflow
  if(alarm_minutes > 59) {
	  alarm_minutes = 0;
    1730:	10 92 25 01 	sts	0x0125, r1
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	5f cf       	rjmp	.-322    	; 0x15f8 <main+0x2f8>
  refresh_lcd(lcd_string_array);
//END LCD DISPLAY---------------------------------------------------------------------------------  

//SNOOZE CHECK------------------------------------------------------------------------------------
  if(snooze_counter > 10) {
    snooze_counter = 0;
    173a:	10 92 23 01 	sts	0x0123, r1
    snooze_flag = 0;
    173e:	10 92 22 01 	sts	0x0122, r1
    snooze_check = 0;
    1742:	10 92 21 01 	sts	0x0121, r1
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
  }
  if(alarm_on & (snooze_flag == 0) & (snooze_check == 0)) {
    174a:	40 91 20 01 	lds	r20, 0x0120
    174e:	24 2f       	mov	r18, r20
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	82 23       	and	r24, r18
    1754:	93 23       	and	r25, r19
    1756:	89 2b       	or	r24, r25
    1758:	09 f4       	brne	.+2      	; 0x175c <main+0x45c>
    175a:	ab cf       	rjmp	.-170    	; 0x16b2 <main+0x3b2>
	OCR3A = 0x000f;
    175c:	8f e0       	ldi	r24, 0x0F	; 15
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	90 93 87 00 	sts	0x0087, r25
    1764:	80 93 86 00 	sts	0x0086, r24
    music_on();
    1768:	0e 94 14 05 	call	0xa28	; 0xa28 <music_on>
    snooze_check = 1;
    176c:	50 92 21 01 	sts	0x0121, r5
    1770:	40 91 20 01 	lds	r20, 0x0120
    1774:	9e cf       	rjmp	.-196    	; 0x16b2 <main+0x3b2>
  }
//END SNOOZE CHECK--------------------------------------------------------------------------------

//ALARM SOUND------------------------------------------------------------------------------------
  if(alarm_set & (alarm_hours == hours) & (alarm_minutes == minutes) & (alarm_on == 0)) {
    OCR3A = 0x000f;
    1776:	8f e0       	ldi	r24, 0x0F	; 15
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	90 93 87 00 	sts	0x0087, r25
    177e:	80 93 86 00 	sts	0x0086, r24
    alarm_on = 1;
    1782:	50 92 20 01 	sts	0x0120, r5
    music_on();
    1786:	0e 94 14 05 	call	0xa28	; 0xa28 <music_on>
    178a:	b3 cf       	rjmp	.-154    	; 0x16f2 <main+0x3f2>
	  strcat(lcd_string_array, "0");
  }
  strcat(lcd_string_array, lcd_str_minutes);
  //indicate whether the alarm is set
  if(alarm_set) {
	  strcat(lcd_string_array, " ALARM");
    178c:	d5 01       	movw	r26, r10
    178e:	0d 90       	ld	r0, X+
    1790:	00 20       	and	r0, r0
    1792:	e9 f7       	brne	.-6      	; 0x178e <main+0x48e>
    1794:	11 97       	sbiw	r26, 0x01	; 1
    1796:	87 e0       	ldi	r24, 0x07	; 7
    1798:	e9 e1       	ldi	r30, 0x19	; 25
    179a:	f1 e0       	ldi	r31, 0x01	; 1
    179c:	01 90       	ld	r0, Z+
    179e:	0d 92       	st	X+, r0
    17a0:	8a 95       	dec	r24
    17a2:	e1 f7       	brne	.-8      	; 0x179c <main+0x49c>
    17a4:	62 cf       	rjmp	.-316    	; 0x166a <main+0x36a>
  //copy string minutes and hours strings into master string
  strcpy(lcd_string_array, lcd_str_hour);
  strcat(lcd_string_array, ":");
  //add a leading 0 if minutes < 10
  if(alarm_minutes < 10) {
	  strcat(lcd_string_array, "0");
    17a6:	f9 01       	movw	r30, r18
    17a8:	ed 5b       	subi	r30, 0xBD	; 189
    17aa:	fe 4f       	sbci	r31, 0xFE	; 254
    17ac:	71 82       	std	Z+1, r7	; 0x01
    17ae:	60 82       	st	Z, r6
    17b0:	52 cf       	rjmp	.-348    	; 0x1656 <main+0x356>

000017b2 <__divmodhi4>:
    17b2:	97 fb       	bst	r25, 7
    17b4:	07 2e       	mov	r0, r23
    17b6:	16 f4       	brtc	.+4      	; 0x17bc <__divmodhi4+0xa>
    17b8:	00 94       	com	r0
    17ba:	07 d0       	rcall	.+14     	; 0x17ca <__divmodhi4_neg1>
    17bc:	77 fd       	sbrc	r23, 7
    17be:	09 d0       	rcall	.+18     	; 0x17d2 <__divmodhi4_neg2>
    17c0:	0e 94 24 0c 	call	0x1848	; 0x1848 <__udivmodhi4>
    17c4:	07 fc       	sbrc	r0, 7
    17c6:	05 d0       	rcall	.+10     	; 0x17d2 <__divmodhi4_neg2>
    17c8:	3e f4       	brtc	.+14     	; 0x17d8 <__divmodhi4_exit>

000017ca <__divmodhi4_neg1>:
    17ca:	90 95       	com	r25
    17cc:	81 95       	neg	r24
    17ce:	9f 4f       	sbci	r25, 0xFF	; 255
    17d0:	08 95       	ret

000017d2 <__divmodhi4_neg2>:
    17d2:	70 95       	com	r23
    17d4:	61 95       	neg	r22
    17d6:	7f 4f       	sbci	r23, 0xFF	; 255

000017d8 <__divmodhi4_exit>:
    17d8:	08 95       	ret

000017da <__divmodsi4>:
    17da:	05 2e       	mov	r0, r21
    17dc:	97 fb       	bst	r25, 7
    17de:	1e f4       	brtc	.+6      	; 0x17e6 <__divmodsi4+0xc>
    17e0:	00 94       	com	r0
    17e2:	0e 94 04 0c 	call	0x1808	; 0x1808 <__negsi2>
    17e6:	57 fd       	sbrc	r21, 7
    17e8:	07 d0       	rcall	.+14     	; 0x17f8 <__divmodsi4_neg2>
    17ea:	0e 94 38 0c 	call	0x1870	; 0x1870 <__udivmodsi4>
    17ee:	07 fc       	sbrc	r0, 7
    17f0:	03 d0       	rcall	.+6      	; 0x17f8 <__divmodsi4_neg2>
    17f2:	4e f4       	brtc	.+18     	; 0x1806 <__divmodsi4_exit>
    17f4:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__negsi2>

000017f8 <__divmodsi4_neg2>:
    17f8:	50 95       	com	r21
    17fa:	40 95       	com	r20
    17fc:	30 95       	com	r19
    17fe:	21 95       	neg	r18
    1800:	3f 4f       	sbci	r19, 0xFF	; 255
    1802:	4f 4f       	sbci	r20, 0xFF	; 255
    1804:	5f 4f       	sbci	r21, 0xFF	; 255

00001806 <__divmodsi4_exit>:
    1806:	08 95       	ret

00001808 <__negsi2>:
    1808:	90 95       	com	r25
    180a:	80 95       	com	r24
    180c:	70 95       	com	r23
    180e:	61 95       	neg	r22
    1810:	7f 4f       	sbci	r23, 0xFF	; 255
    1812:	8f 4f       	sbci	r24, 0xFF	; 255
    1814:	9f 4f       	sbci	r25, 0xFF	; 255
    1816:	08 95       	ret

00001818 <__tablejump2__>:
    1818:	ee 0f       	add	r30, r30
    181a:	ff 1f       	adc	r31, r31
    181c:	00 24       	eor	r0, r0
    181e:	00 1c       	adc	r0, r0
    1820:	0b be       	out	0x3b, r0	; 59
    1822:	07 90       	elpm	r0, Z+
    1824:	f6 91       	elpm	r31, Z
    1826:	e0 2d       	mov	r30, r0
    1828:	09 94       	ijmp

0000182a <__umulhisi3>:
    182a:	a2 9f       	mul	r26, r18
    182c:	b0 01       	movw	r22, r0
    182e:	b3 9f       	mul	r27, r19
    1830:	c0 01       	movw	r24, r0
    1832:	a3 9f       	mul	r26, r19
    1834:	70 0d       	add	r23, r0
    1836:	81 1d       	adc	r24, r1
    1838:	11 24       	eor	r1, r1
    183a:	91 1d       	adc	r25, r1
    183c:	b2 9f       	mul	r27, r18
    183e:	70 0d       	add	r23, r0
    1840:	81 1d       	adc	r24, r1
    1842:	11 24       	eor	r1, r1
    1844:	91 1d       	adc	r25, r1
    1846:	08 95       	ret

00001848 <__udivmodhi4>:
    1848:	aa 1b       	sub	r26, r26
    184a:	bb 1b       	sub	r27, r27
    184c:	51 e1       	ldi	r21, 0x11	; 17
    184e:	07 c0       	rjmp	.+14     	; 0x185e <__udivmodhi4_ep>

00001850 <__udivmodhi4_loop>:
    1850:	aa 1f       	adc	r26, r26
    1852:	bb 1f       	adc	r27, r27
    1854:	a6 17       	cp	r26, r22
    1856:	b7 07       	cpc	r27, r23
    1858:	10 f0       	brcs	.+4      	; 0x185e <__udivmodhi4_ep>
    185a:	a6 1b       	sub	r26, r22
    185c:	b7 0b       	sbc	r27, r23

0000185e <__udivmodhi4_ep>:
    185e:	88 1f       	adc	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	5a 95       	dec	r21
    1864:	a9 f7       	brne	.-22     	; 0x1850 <__udivmodhi4_loop>
    1866:	80 95       	com	r24
    1868:	90 95       	com	r25
    186a:	bc 01       	movw	r22, r24
    186c:	cd 01       	movw	r24, r26
    186e:	08 95       	ret

00001870 <__udivmodsi4>:
    1870:	a1 e2       	ldi	r26, 0x21	; 33
    1872:	1a 2e       	mov	r1, r26
    1874:	aa 1b       	sub	r26, r26
    1876:	bb 1b       	sub	r27, r27
    1878:	fd 01       	movw	r30, r26
    187a:	0d c0       	rjmp	.+26     	; 0x1896 <__udivmodsi4_ep>

0000187c <__udivmodsi4_loop>:
    187c:	aa 1f       	adc	r26, r26
    187e:	bb 1f       	adc	r27, r27
    1880:	ee 1f       	adc	r30, r30
    1882:	ff 1f       	adc	r31, r31
    1884:	a2 17       	cp	r26, r18
    1886:	b3 07       	cpc	r27, r19
    1888:	e4 07       	cpc	r30, r20
    188a:	f5 07       	cpc	r31, r21
    188c:	20 f0       	brcs	.+8      	; 0x1896 <__udivmodsi4_ep>
    188e:	a2 1b       	sub	r26, r18
    1890:	b3 0b       	sbc	r27, r19
    1892:	e4 0b       	sbc	r30, r20
    1894:	f5 0b       	sbc	r31, r21

00001896 <__udivmodsi4_ep>:
    1896:	66 1f       	adc	r22, r22
    1898:	77 1f       	adc	r23, r23
    189a:	88 1f       	adc	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	1a 94       	dec	r1
    18a0:	69 f7       	brne	.-38     	; 0x187c <__udivmodsi4_loop>
    18a2:	60 95       	com	r22
    18a4:	70 95       	com	r23
    18a6:	80 95       	com	r24
    18a8:	90 95       	com	r25
    18aa:	9b 01       	movw	r18, r22
    18ac:	ac 01       	movw	r20, r24
    18ae:	bd 01       	movw	r22, r26
    18b0:	cf 01       	movw	r24, r30
    18b2:	08 95       	ret

000018b4 <strcat>:
    18b4:	fb 01       	movw	r30, r22
    18b6:	dc 01       	movw	r26, r24
    18b8:	0d 90       	ld	r0, X+
    18ba:	00 20       	and	r0, r0
    18bc:	e9 f7       	brne	.-6      	; 0x18b8 <strcat+0x4>
    18be:	11 97       	sbiw	r26, 0x01	; 1
    18c0:	01 90       	ld	r0, Z+
    18c2:	0d 92       	st	X+, r0
    18c4:	00 20       	and	r0, r0
    18c6:	e1 f7       	brne	.-8      	; 0x18c0 <strcat+0xc>
    18c8:	08 95       	ret

000018ca <strcpy>:
    18ca:	fb 01       	movw	r30, r22
    18cc:	dc 01       	movw	r26, r24
    18ce:	01 90       	ld	r0, Z+
    18d0:	0d 92       	st	X+, r0
    18d2:	00 20       	and	r0, r0
    18d4:	e1 f7       	brne	.-8      	; 0x18ce <strcpy+0x4>
    18d6:	08 95       	ret

000018d8 <__itoa_ncheck>:
    18d8:	bb 27       	eor	r27, r27
    18da:	4a 30       	cpi	r20, 0x0A	; 10
    18dc:	31 f4       	brne	.+12     	; 0x18ea <__itoa_ncheck+0x12>
    18de:	99 23       	and	r25, r25
    18e0:	22 f4       	brpl	.+8      	; 0x18ea <__itoa_ncheck+0x12>
    18e2:	bd e2       	ldi	r27, 0x2D	; 45
    18e4:	90 95       	com	r25
    18e6:	81 95       	neg	r24
    18e8:	9f 4f       	sbci	r25, 0xFF	; 255
    18ea:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__utoa_common>

000018ee <__utoa_ncheck>:
    18ee:	bb 27       	eor	r27, r27

000018f0 <__utoa_common>:
    18f0:	fb 01       	movw	r30, r22
    18f2:	55 27       	eor	r21, r21
    18f4:	aa 27       	eor	r26, r26
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	aa 1f       	adc	r26, r26
    18fc:	a4 17       	cp	r26, r20
    18fe:	10 f0       	brcs	.+4      	; 0x1904 <__utoa_common+0x14>
    1900:	a4 1b       	sub	r26, r20
    1902:	83 95       	inc	r24
    1904:	50 51       	subi	r21, 0x10	; 16
    1906:	b9 f7       	brne	.-18     	; 0x18f6 <__utoa_common+0x6>
    1908:	a0 5d       	subi	r26, 0xD0	; 208
    190a:	aa 33       	cpi	r26, 0x3A	; 58
    190c:	08 f0       	brcs	.+2      	; 0x1910 <__utoa_common+0x20>
    190e:	a9 5d       	subi	r26, 0xD9	; 217
    1910:	a1 93       	st	Z+, r26
    1912:	00 97       	sbiw	r24, 0x00	; 0
    1914:	79 f7       	brne	.-34     	; 0x18f4 <__utoa_common+0x4>
    1916:	b1 11       	cpse	r27, r1
    1918:	b1 93       	st	Z+, r27
    191a:	11 92       	st	Z+, r1
    191c:	cb 01       	movw	r24, r22
    191e:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <strrev>

00001922 <strrev>:
    1922:	dc 01       	movw	r26, r24
    1924:	fc 01       	movw	r30, r24
    1926:	67 2f       	mov	r22, r23
    1928:	71 91       	ld	r23, Z+
    192a:	77 23       	and	r23, r23
    192c:	e1 f7       	brne	.-8      	; 0x1926 <strrev+0x4>
    192e:	32 97       	sbiw	r30, 0x02	; 2
    1930:	04 c0       	rjmp	.+8      	; 0x193a <strrev+0x18>
    1932:	7c 91       	ld	r23, X
    1934:	6d 93       	st	X+, r22
    1936:	70 83       	st	Z, r23
    1938:	62 91       	ld	r22, -Z
    193a:	ae 17       	cp	r26, r30
    193c:	bf 07       	cpc	r27, r31
    193e:	c8 f3       	brcs	.-14     	; 0x1932 <strrev+0x10>
    1940:	08 95       	ret

00001942 <_exit>:
    1942:	f8 94       	cli

00001944 <__stop_program>:
    1944:	ff cf       	rjmp	.-2      	; 0x1944 <__stop_program>
